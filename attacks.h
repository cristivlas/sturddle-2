/* Auto-generated attack tables */
#pragma once

#include <cstdint>
#include <cstdlib>

namespace chess
{
inline uint64_t mul_shift_31_81dadef4bc2dd44d(uint64_t key) {
    key *= 9357036318526133325ULL;
    key >>= 31;
    return key;
}

inline uint64_t mul_shift_33_e36aa5c613612997(uint64_t key) {
    key *= 16387092464288213399ULL;
    key >>= 33;
    return key;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_11(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 11;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_15(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 15;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_17(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 17;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_19(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 19;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_21(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 21;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_3(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 3;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_5(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 5;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_7(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 7;
}

static inline uint64_t mul_shift_31_81dadef4bc2dd44d_rshift_9(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d(key) >> 9;
}

static inline uint64_t mul_shift_33_e36aa5c613612997_rshift_11(uint64_t key) {
    return mul_shift_33_e36aa5c613612997(key) >> 11;
}

static inline uint64_t mul_shift_33_e36aa5c613612997_rshift_15(uint64_t key) {
    return mul_shift_33_e36aa5c613612997(key) >> 15;
}

static inline uint64_t mul_shift_33_e36aa5c613612997_rshift_17(uint64_t key) {
    return mul_shift_33_e36aa5c613612997(key) >> 17;
}

static inline uint64_t mul_shift_33_e36aa5c613612997_rshift_7(uint64_t key) {
    return mul_shift_33_e36aa5c613612997(key) >> 7;
}

static inline uint64_t mul_shift_33_e36aa5c613612997_rshift_9(uint64_t key) {
    return mul_shift_33_e36aa5c613612997(key) >> 9;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_11(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_15(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_17(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_19_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_19(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_21_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_21(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_3(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_5_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_5(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_7(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin(uint64_t key) {
    return mul_shift_31_81dadef4bc2dd44d_rshift_9(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_33_e36aa5c613612997_rshift_11_mixin(uint64_t key) {
    return mul_shift_33_e36aa5c613612997_rshift_11(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_33_e36aa5c613612997_rshift_15_mixin(uint64_t key) {
    return mul_shift_33_e36aa5c613612997_rshift_15(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_33_e36aa5c613612997_rshift_17_mixin(uint64_t key) {
    return mul_shift_33_e36aa5c613612997_rshift_17(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_33_e36aa5c613612997_rshift_7_mixin(uint64_t key) {
    return mul_shift_33_e36aa5c613612997_rshift_7(key) & Mask;
}

template<size_t Mask>
inline size_t mul_shift_33_e36aa5c613612997_rshift_9_mixin(uint64_t key) {
    return mul_shift_33_e36aa5c613612997_rshift_9(key) & Mask;
}

template<size_t S> struct RightShift {
   static inline size_t hash(uint64_t u) {
       return (u >> S);
   }
};


const ::chess::AttackTable BB_FILE_ATTACKS[64] = {
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_21_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [498]();
        data[1] = 0x0101010101010100ULL;
        data[2] = 0x0000000000000100ULL;
        data[18] = 0x0000000000010100ULL;
        data[25] = 0x0000000000010100ULL;
        data[35] = 0x0000010101010100ULL;
        data[42] = 0x0000000001010100ULL;
        data[46] = 0x0000000000000100ULL;
        data[62] = 0x0000000000000100ULL;
        data[63] = 0x0000000000000100ULL;
        data[67] = 0x0000000000010100ULL;
        data[79] = 0x0000000000000100ULL;
        data[84] = 0x0000000001010100ULL;
        data[123] = 0x0000000000000100ULL;
        data[128] = 0x0000000000010100ULL;
        data[140] = 0x0000000000000100ULL;
        data[144] = 0x0000000000010100ULL;
        data[145] = 0x0000000001010100ULL;
        data[161] = 0x0000000101010100ULL;
        data[165] = 0x0000000000000100ULL;
        data[172] = 0x0000000000000100ULL;
        data[182] = 0x0000000000000100ULL;
        data[189] = 0x0000000000000100ULL;
        data[205] = 0x0000000000010100ULL;
        data[206] = 0x0000000000000100ULL;
        data[222] = 0x0000010101010100ULL;
        data[223] = 0x0000000000000100ULL;
        data[227] = 0x0000000000000100ULL;
        data[233] = 0x0000000000000100ULL;
        data[243] = 0x0000000000000100ULL;
        data[247] = 0x0000000000010100ULL;
        data[250] = 0x0000000000000100ULL;
        data[254] = 0x0000000000010100ULL;
        data[264] = 0x0000000101010100ULL;
        data[268] = 0x0000000000000100ULL;
        data[271] = 0x0000000001010100ULL;
        data[284] = 0x0000000000000100ULL;
        data[289] = 0x0000000000010100ULL;
        data[305] = 0x0000000001010100ULL;
        data[309] = 0x0000000000010100ULL;
        data[316] = 0x0000000000010100ULL;
        data[325] = 0x0001010101010100ULL;
        data[332] = 0x0000000001010100ULL;
        data[350] = 0x0000000000010100ULL;
        data[353] = 0x0000000000000100ULL;
        data[366] = 0x0000000001010100ULL;
        data[369] = 0x0000000000000100ULL;
        data[387] = 0x0000000000000100ULL;
        data[394] = 0x0000000000000100ULL;
        data[403] = 0x0000000000000100ULL;
        data[410] = 0x0000000000000100ULL;
        data[414] = 0x0000000000000100ULL;
        data[430] = 0x0000000000000100ULL;
        data[435] = 0x0000000000010100ULL;
        data[448] = 0x0000000000000100ULL;
        data[451] = 0x0000000101010100ULL;
        data[455] = 0x0000000000000100ULL;
        data[465] = 0x0000000000000100ULL;
        data[469] = 0x0000000000010100ULL;
        data[471] = 0x0000000000000100ULL;
        data[476] = 0x0000000000010100ULL;
        data[485] = 0x0000000101010100ULL;
        data[492] = 0x0000000001010100ULL;
        data[496] = 0x0000000000010100ULL;
        data[497] = 0x0000000000000100ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0202020202020200ULL;
        data[6] = 0x0000000000020200ULL;
        data[18] = 0x0000000000000200ULL;
        data[22] = 0x0000000000000200ULL;
        data[23] = 0x0000000002020200ULL;
        data[33] = 0x0000000000000200ULL;
        data[39] = 0x0000020202020200ULL;
        data[56] = 0x0000000000000200ULL;
        data[62] = 0x0000000002020200ULL;
        data[89] = 0x0000000000000200ULL;
        data[95] = 0x0000000000020200ULL;
        data[101] = 0x0000000000000200ULL;
        data[112] = 0x0000000000000200ULL;
        data[118] = 0x0000000000020200ULL;
        data[124] = 0x0000000000000200ULL;
        data[127] = 0x0000000000000200ULL;
        data[129] = 0x0002020202020200ULL;
        data[133] = 0x0000000000020200ULL;
        data[140] = 0x0000000000000200ULL;
        data[150] = 0x0000000000000200ULL;
        data[151] = 0x0000000002020200ULL;
        data[156] = 0x0000000000020200ULL;
        data[162] = 0x0000000000000200ULL;
        data[167] = 0x0000020202020200ULL;
        data[190] = 0x0000000002020200ULL;
        data[195] = 0x0000000000000200ULL;
        data[218] = 0x0000000000000200ULL;
        data[223] = 0x0000000000020200ULL;
        data[229] = 0x0000000000000200ULL;
        data[234] = 0x0000000000000200ULL;
        data[235] = 0x0000000202020200ULL;
        data[246] = 0x0000000000020200ULL;
        data[252] = 0x0000000000000200ULL;
        data[257] = 0x0000000000000200ULL;
        data[258] = 0x0000000002020200ULL;
        data[261] = 0x0000000000020200ULL;
        data[268] = 0x0000000000000200ULL;
        data[273] = 0x0000000202020200ULL;
        data[284] = 0x0000000000020200ULL;
        data[290] = 0x0000000000000200ULL;
        data[296] = 0x0000000002020200ULL;
        data[323] = 0x0000000000000200ULL;
        data[329] = 0x0000000000020200ULL;
        data[346] = 0x0000000000000200ULL;
        data[352] = 0x0000000000020200ULL;
        data[362] = 0x0000000000000200ULL;
        data[363] = 0x0000000202020200ULL;
        data[367] = 0x0000000000020200ULL;
        data[379] = 0x0000000000000200ULL;
        data[385] = 0x0000000000000200ULL;
        data[386] = 0x0000000002020200ULL;
        data[390] = 0x0000000000020200ULL;
        data[401] = 0x0000000202020200ULL;
        data[402] = 0x0000000000000200ULL;
        data[417] = 0x0000000000000200ULL;
        data[424] = 0x0000000002020200ULL;
        data[440] = 0x0000000000000200ULL;
        data[457] = 0x0000000000020200ULL;
        data[473] = 0x0000000000000200ULL;
        data[480] = 0x0000000000020200ULL;
        data[495] = 0x0000000000020200ULL;
        data[496] = 0x0000000000000200ULL;
        data[507] = 0x0000000000000200ULL;
        data[511] = 0x0000000000000200ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0404040404040400ULL;
        data[4] = 0x0000000000000400ULL;
        data[12] = 0x0000000000040400ULL;
        data[20] = 0x0000000000040400ULL;
        data[34] = 0x0000000004040400ULL;
        data[40] = 0x0000000000000400ULL;
        data[42] = 0x0000000404040400ULL;
        data[54] = 0x0000000000040400ULL;
        data[59] = 0x0000000000000400ULL;
        data[61] = 0x0000000000040400ULL;
        data[81] = 0x0000000000000400ULL;
        data[94] = 0x0000000000000400ULL;
        data[98] = 0x0000000004040400ULL;
        data[101] = 0x0000000000000400ULL;
        data[113] = 0x0000000000000400ULL;
        data[117] = 0x0000000000040400ULL;
        data[135] = 0x0000000000000400ULL;
        data[139] = 0x0000000004040400ULL;
        data[152] = 0x0000040404040400ULL;
        data[155] = 0x0000000000000400ULL;
        data[159] = 0x0000000000040400ULL;
        data[171] = 0x0000000000040400ULL;
        data[191] = 0x0000000000000400ULL;
        data[193] = 0x0000000404040400ULL;
        data[199] = 0x0000000000000400ULL;
        data[210] = 0x0000000000000400ULL;
        data[212] = 0x0000000000040400ULL;
        data[218] = 0x0000000000000400ULL;
        data[232] = 0x0000000000000400ULL;
        data[240] = 0x0000000000000400ULL;
        data[249] = 0x0000000004040400ULL;
        data[252] = 0x0000000000000400ULL;
        data[257] = 0x0004040404040400ULL;
        data[260] = 0x0000000000000400ULL;
        data[268] = 0x0000000000040400ULL;
        data[276] = 0x0000000000040400ULL;
        data[290] = 0x0000000004040400ULL;
        data[296] = 0x0000000000000400ULL;
        data[298] = 0x0000000404040400ULL;
        data[310] = 0x0000000000040400ULL;
        data[315] = 0x0000000000000400ULL;
        data[317] = 0x0000000000040400ULL;
        data[337] = 0x0000000000000400ULL;
        data[350] = 0x0000000000000400ULL;
        data[354] = 0x0000000004040400ULL;
        data[357] = 0x0000000000000400ULL;
        data[369] = 0x0000000000000400ULL;
        data[373] = 0x0000000000040400ULL;
        data[391] = 0x0000000000000400ULL;
        data[395] = 0x0000000004040400ULL;
        data[408] = 0x0000040404040400ULL;
        data[411] = 0x0000000000000400ULL;
        data[415] = 0x0000000000040400ULL;
        data[427] = 0x0000000000040400ULL;
        data[447] = 0x0000000000000400ULL;
        data[449] = 0x0000000404040400ULL;
        data[455] = 0x0000000000000400ULL;
        data[466] = 0x0000000000000400ULL;
        data[468] = 0x0000000000040400ULL;
        data[474] = 0x0000000000000400ULL;
        data[488] = 0x0000000000000400ULL;
        data[496] = 0x0000000000000400ULL;
        data[505] = 0x0000000004040400ULL;
        data[508] = 0x0000000000000400ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0808080808080800ULL;
        data[2] = 0x0000000000080800ULL;
        data[9] = 0x0000000000000800ULL;
        data[16] = 0x0000000008080800ULL;
        data[23] = 0x0000000000000800ULL;
        data[30] = 0x0000000000080800ULL;
        data[35] = 0x0000000000000800ULL;
        data[38] = 0x0000000000000800ULL;
        data[42] = 0x0000080808080800ULL;
        data[49] = 0x0000000000000800ULL;
        data[56] = 0x0000000000080800ULL;
        data[65] = 0x0000000000000800ULL;
        data[69] = 0x0000000808080800ULL;
        data[71] = 0x0000000000080800ULL;
        data[83] = 0x0000000000080800ULL;
        data[91] = 0x0000000000000800ULL;
        data[98] = 0x0000000000080800ULL;
        data[105] = 0x0000000000000800ULL;
        data[119] = 0x0000000000000800ULL;
        data[124] = 0x0000000000080800ULL;
        data[134] = 0x0000000000000800ULL;
        data[138] = 0x0000080808080800ULL;
        data[152] = 0x0000000000080800ULL;
        data[160] = 0x0000000000000800ULL;
        data[167] = 0x0000000000080800ULL;
        data[187] = 0x0000000000000800ULL;
        data[191] = 0x0000000000000800ULL;
        data[194] = 0x0000000000080800ULL;
        data[220] = 0x0000000000080800ULL;
        data[225] = 0x0000000008080800ULL;
        data[256] = 0x0000000000000800ULL;
        data[261] = 0x0000000000000800ULL;
        data[287] = 0x0000000000000800ULL;
        data[290] = 0x0000000000080800ULL;
        data[294] = 0x0000000008080800ULL;
        data[314] = 0x0000000000000800ULL;
        data[321] = 0x0000000008080800ULL;
        data[329] = 0x0000000000000800ULL;
        data[343] = 0x0000000000000800ULL;
        data[347] = 0x0000000808080800ULL;
        data[357] = 0x0000000000000800ULL;
        data[362] = 0x0000000008080800ULL;
        data[376] = 0x0000000000080800ULL;
        data[383] = 0x0000000000000800ULL;
        data[390] = 0x0000000008080800ULL;
        data[398] = 0x0000000000000800ULL;
        data[410] = 0x0000000000000800ULL;
        data[412] = 0x0000000000000800ULL;
        data[417] = 0x0008080808080800ULL;
        data[425] = 0x0000000000000800ULL;
        data[432] = 0x0000000008080800ULL;
        data[439] = 0x0000000000000800ULL;
        data[443] = 0x0000000808080800ULL;
        data[446] = 0x0000000000080800ULL;
        data[451] = 0x0000000000000800ULL;
        data[458] = 0x0000000008080800ULL;
        data[465] = 0x0000000000000800ULL;
        data[472] = 0x0000000000080800ULL;
        data[479] = 0x0000000000000800ULL;
        data[481] = 0x0000000000000800ULL;
        data[485] = 0x0000000808080800ULL;
        data[494] = 0x0000000000000800ULL;
        data[499] = 0x0000000000080800ULL;
        data[508] = 0x0000000000000800ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x1010101010101000ULL;
        data[4] = 0x0000000000001000ULL;
        data[12] = 0x0000000000101000ULL;
        data[20] = 0x0000000000101000ULL;
        data[34] = 0x0000000010101000ULL;
        data[40] = 0x0000000000001000ULL;
        data[42] = 0x0000001010101000ULL;
        data[54] = 0x0000000000101000ULL;
        data[59] = 0x0000000000001000ULL;
        data[61] = 0x0000000000101000ULL;
        data[81] = 0x0000000000001000ULL;
        data[94] = 0x0000000000001000ULL;
        data[98] = 0x0000000010101000ULL;
        data[101] = 0x0000000000001000ULL;
        data[113] = 0x0000000000001000ULL;
        data[117] = 0x0000000000101000ULL;
        data[135] = 0x0000000000001000ULL;
        data[139] = 0x0000000010101000ULL;
        data[152] = 0x0000101010101000ULL;
        data[155] = 0x0000000000001000ULL;
        data[159] = 0x0000000000101000ULL;
        data[171] = 0x0000000000101000ULL;
        data[191] = 0x0000000000001000ULL;
        data[193] = 0x0000001010101000ULL;
        data[199] = 0x0000000000001000ULL;
        data[210] = 0x0000000000001000ULL;
        data[212] = 0x0000000000101000ULL;
        data[218] = 0x0000000000001000ULL;
        data[232] = 0x0000000000001000ULL;
        data[240] = 0x0000000000001000ULL;
        data[249] = 0x0000000010101000ULL;
        data[252] = 0x0000000000001000ULL;
        data[257] = 0x0010101010101000ULL;
        data[260] = 0x0000000000001000ULL;
        data[268] = 0x0000000000101000ULL;
        data[276] = 0x0000000000101000ULL;
        data[290] = 0x0000000010101000ULL;
        data[296] = 0x0000000000001000ULL;
        data[298] = 0x0000001010101000ULL;
        data[310] = 0x0000000000101000ULL;
        data[315] = 0x0000000000001000ULL;
        data[317] = 0x0000000000101000ULL;
        data[337] = 0x0000000000001000ULL;
        data[350] = 0x0000000000001000ULL;
        data[354] = 0x0000000010101000ULL;
        data[357] = 0x0000000000001000ULL;
        data[369] = 0x0000000000001000ULL;
        data[373] = 0x0000000000101000ULL;
        data[391] = 0x0000000000001000ULL;
        data[395] = 0x0000000010101000ULL;
        data[408] = 0x0000101010101000ULL;
        data[411] = 0x0000000000001000ULL;
        data[415] = 0x0000000000101000ULL;
        data[427] = 0x0000000000101000ULL;
        data[447] = 0x0000000000001000ULL;
        data[449] = 0x0000001010101000ULL;
        data[455] = 0x0000000000001000ULL;
        data[466] = 0x0000000000001000ULL;
        data[468] = 0x0000000000101000ULL;
        data[474] = 0x0000000000001000ULL;
        data[488] = 0x0000000000001000ULL;
        data[496] = 0x0000000000001000ULL;
        data[505] = 0x0000000010101000ULL;
        data[508] = 0x0000000000001000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x2020202020202000ULL;
        data[6] = 0x0000000000202000ULL;
        data[18] = 0x0000000000002000ULL;
        data[22] = 0x0000000000002000ULL;
        data[23] = 0x0000000020202000ULL;
        data[33] = 0x0000000000002000ULL;
        data[39] = 0x0000202020202000ULL;
        data[56] = 0x0000000000002000ULL;
        data[62] = 0x0000000020202000ULL;
        data[89] = 0x0000000000002000ULL;
        data[95] = 0x0000000000202000ULL;
        data[101] = 0x0000000000002000ULL;
        data[112] = 0x0000000000002000ULL;
        data[118] = 0x0000000000202000ULL;
        data[124] = 0x0000000000002000ULL;
        data[127] = 0x0000000000002000ULL;
        data[129] = 0x0020202020202000ULL;
        data[133] = 0x0000000000202000ULL;
        data[140] = 0x0000000000002000ULL;
        data[150] = 0x0000000000002000ULL;
        data[151] = 0x0000000020202000ULL;
        data[156] = 0x0000000000202000ULL;
        data[162] = 0x0000000000002000ULL;
        data[167] = 0x0000202020202000ULL;
        data[190] = 0x0000000020202000ULL;
        data[195] = 0x0000000000002000ULL;
        data[218] = 0x0000000000002000ULL;
        data[223] = 0x0000000000202000ULL;
        data[229] = 0x0000000000002000ULL;
        data[234] = 0x0000000000002000ULL;
        data[235] = 0x0000002020202000ULL;
        data[246] = 0x0000000000202000ULL;
        data[252] = 0x0000000000002000ULL;
        data[257] = 0x0000000000002000ULL;
        data[258] = 0x0000000020202000ULL;
        data[261] = 0x0000000000202000ULL;
        data[268] = 0x0000000000002000ULL;
        data[273] = 0x0000002020202000ULL;
        data[284] = 0x0000000000202000ULL;
        data[290] = 0x0000000000002000ULL;
        data[296] = 0x0000000020202000ULL;
        data[323] = 0x0000000000002000ULL;
        data[329] = 0x0000000000202000ULL;
        data[346] = 0x0000000000002000ULL;
        data[352] = 0x0000000000202000ULL;
        data[362] = 0x0000000000002000ULL;
        data[363] = 0x0000002020202000ULL;
        data[367] = 0x0000000000202000ULL;
        data[379] = 0x0000000000002000ULL;
        data[385] = 0x0000000000002000ULL;
        data[386] = 0x0000000020202000ULL;
        data[390] = 0x0000000000202000ULL;
        data[401] = 0x0000002020202000ULL;
        data[402] = 0x0000000000002000ULL;
        data[417] = 0x0000000000002000ULL;
        data[424] = 0x0000000020202000ULL;
        data[440] = 0x0000000000002000ULL;
        data[457] = 0x0000000000202000ULL;
        data[473] = 0x0000000000002000ULL;
        data[480] = 0x0000000000202000ULL;
        data[495] = 0x0000000000202000ULL;
        data[496] = 0x0000000000002000ULL;
        data[507] = 0x0000000000002000ULL;
        data[511] = 0x0000000000002000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x4040404040404000ULL;
        data[7] = 0x0000000000004000ULL;
        data[10] = 0x0000404040404000ULL;
        data[16] = 0x0000000000004000ULL;
        data[19] = 0x0000004040404000ULL;
        data[29] = 0x0000004040404000ULL;
        data[44] = 0x0000000000004000ULL;
        data[46] = 0x0000000000004000ULL;
        data[49] = 0x0000000000404000ULL;
        data[63] = 0x0000000000004000ULL;
        data[65] = 0x0000000000004000ULL;
        data[68] = 0x0000000000404000ULL;
        data[93] = 0x0000000000004000ULL;
        data[98] = 0x0000000000404000ULL;
        data[102] = 0x0000000000004000ULL;
        data[107] = 0x0000000000404000ULL;
        data[111] = 0x0000000000004000ULL;
        data[116] = 0x0000000000404000ULL;
        data[121] = 0x0000000000004000ULL;
        data[126] = 0x0000000000404000ULL;
        data[142] = 0x0000000000004000ULL;
        data[154] = 0x0000404040404000ULL;
        data[160] = 0x0000000000004000ULL;
        data[167] = 0x0000000040404000ULL;
        data[173] = 0x0000004040404000ULL;
        data[185] = 0x0000000040404000ULL;
        data[190] = 0x0000000000004000ULL;
        data[200] = 0x0000000000004000ULL;
        data[209] = 0x0000000000004000ULL;
        data[218] = 0x0000000000004000ULL;
        data[246] = 0x0000000000004000ULL;
        data[251] = 0x0000000000404000ULL;
        data[259] = 0x0000000000004000ULL;
        data[264] = 0x0000000000404000ULL;
        data[265] = 0x0000000000004000ULL;
        data[270] = 0x0000000000404000ULL;
        data[278] = 0x0000000000004000ULL;
        data[282] = 0x0000000000404000ULL;
        data[311] = 0x0000000040404000ULL;
        data[320] = 0x0000000040404000ULL;
        data[329] = 0x0000000040404000ULL;
        data[339] = 0x0000000040404000ULL;
        data[344] = 0x0000000000004000ULL;
        data[356] = 0x0000000000004000ULL;
        data[362] = 0x0000000000004000ULL;
        data[369] = 0x0040404040404000ULL;
        data[375] = 0x0000000000004000ULL;
        data[387] = 0x0000004040404000ULL;
        data[403] = 0x0000000000004000ULL;
        data[408] = 0x0000000000404000ULL;
        data[412] = 0x0000000000004000ULL;
        data[417] = 0x0000000000404000ULL;
        data[422] = 0x0000000000004000ULL;
        data[426] = 0x0000000000404000ULL;
        data[431] = 0x0000000000004000ULL;
        data[436] = 0x0000000000404000ULL;
        data[461] = 0x0000000000004000ULL;
        data[464] = 0x0000000040404000ULL;
        data[466] = 0x0000000000404000ULL;
        data[479] = 0x0000000000004000ULL;
        data[483] = 0x0000000040404000ULL;
        data[484] = 0x0000000000404000ULL;
        data[500] = 0x0000000000004000ULL;
        data[510] = 0x0000000000004000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x8080808080808000ULL;
        data[6] = 0x0000000000808000ULL;
        data[18] = 0x0000000000008000ULL;
        data[22] = 0x0000000000008000ULL;
        data[23] = 0x0000000080808000ULL;
        data[33] = 0x0000000000008000ULL;
        data[39] = 0x0000808080808000ULL;
        data[56] = 0x0000000000008000ULL;
        data[62] = 0x0000000080808000ULL;
        data[89] = 0x0000000000008000ULL;
        data[95] = 0x0000000000808000ULL;
        data[101] = 0x0000000000008000ULL;
        data[112] = 0x0000000000008000ULL;
        data[118] = 0x0000000000808000ULL;
        data[124] = 0x0000000000008000ULL;
        data[127] = 0x0000000000008000ULL;
        data[129] = 0x0080808080808000ULL;
        data[133] = 0x0000000000808000ULL;
        data[140] = 0x0000000000008000ULL;
        data[150] = 0x0000000000008000ULL;
        data[151] = 0x0000000080808000ULL;
        data[156] = 0x0000000000808000ULL;
        data[162] = 0x0000000000008000ULL;
        data[167] = 0x0000808080808000ULL;
        data[190] = 0x0000000080808000ULL;
        data[195] = 0x0000000000008000ULL;
        data[218] = 0x0000000000008000ULL;
        data[223] = 0x0000000000808000ULL;
        data[229] = 0x0000000000008000ULL;
        data[234] = 0x0000000000008000ULL;
        data[235] = 0x0000008080808000ULL;
        data[246] = 0x0000000000808000ULL;
        data[252] = 0x0000000000008000ULL;
        data[257] = 0x0000000000008000ULL;
        data[258] = 0x0000000080808000ULL;
        data[261] = 0x0000000000808000ULL;
        data[268] = 0x0000000000008000ULL;
        data[273] = 0x0000008080808000ULL;
        data[284] = 0x0000000000808000ULL;
        data[290] = 0x0000000000008000ULL;
        data[296] = 0x0000000080808000ULL;
        data[323] = 0x0000000000008000ULL;
        data[329] = 0x0000000000808000ULL;
        data[346] = 0x0000000000008000ULL;
        data[352] = 0x0000000000808000ULL;
        data[362] = 0x0000000000008000ULL;
        data[363] = 0x0000008080808000ULL;
        data[367] = 0x0000000000808000ULL;
        data[379] = 0x0000000000008000ULL;
        data[385] = 0x0000000000008000ULL;
        data[386] = 0x0000000080808000ULL;
        data[390] = 0x0000000000808000ULL;
        data[401] = 0x0000008080808000ULL;
        data[402] = 0x0000000000008000ULL;
        data[417] = 0x0000000000008000ULL;
        data[424] = 0x0000000080808000ULL;
        data[440] = 0x0000000000008000ULL;
        data[457] = 0x0000000000808000ULL;
        data[473] = 0x0000000000008000ULL;
        data[480] = 0x0000000000808000ULL;
        data[495] = 0x0000000000808000ULL;
        data[496] = 0x0000000000008000ULL;
        data[507] = 0x0000000000008000ULL;
        data[511] = 0x0000000000008000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x0101010101010001ULL;
        data[3] = 0x0000000001010001ULL;
        data[10] = 0x0000000000010001ULL;
        data[12] = 0x0000000000010001ULL;
        data[34] = 0x0000000101010001ULL;
        data[46] = 0x0000000001010001ULL;
        data[56] = 0x0000000000010001ULL;
        data[78] = 0x0000010101010001ULL;
        data[80] = 0x0000000001010001ULL;
        data[123] = 0x0000000001010001ULL;
        data[145] = 0x0000000000010001ULL;
        data[189] = 0x0000000000010001ULL;
        data[191] = 0x0000000000010001ULL;
        data[213] = 0x0000000101010001ULL;
        data[222] = 0x0000000000010001ULL;
        data[235] = 0x0000000000010001ULL;
        data[257] = 0x0001010101010001ULL;
        data[259] = 0x0000000001010001ULL;
        data[266] = 0x0000000000010001ULL;
        data[268] = 0x0000000000010001ULL;
        data[290] = 0x0000000101010001ULL;
        data[302] = 0x0000000001010001ULL;
        data[312] = 0x0000000000010001ULL;
        data[334] = 0x0000010101010001ULL;
        data[336] = 0x0000000001010001ULL;
        data[379] = 0x0000000001010001ULL;
        data[401] = 0x0000000000010001ULL;
        data[445] = 0x0000000000010001ULL;
        data[447] = 0x0000000000010001ULL;
        data[469] = 0x0000000101010001ULL;
        data[478] = 0x0000000000010001ULL;
        data[491] = 0x0000000000010001ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0202020202020002ULL;
        data[6] = 0x0000000000020002ULL;
        data[23] = 0x0000000002020002ULL;
        data[39] = 0x0000020202020002ULL;
        data[62] = 0x0000000002020002ULL;
        data[95] = 0x0000000000020002ULL;
        data[118] = 0x0000000000020002ULL;
        data[129] = 0x0002020202020002ULL;
        data[133] = 0x0000000000020002ULL;
        data[151] = 0x0000000002020002ULL;
        data[156] = 0x0000000000020002ULL;
        data[167] = 0x0000020202020002ULL;
        data[190] = 0x0000000002020002ULL;
        data[223] = 0x0000000000020002ULL;
        data[235] = 0x0000000202020002ULL;
        data[246] = 0x0000000000020002ULL;
        data[258] = 0x0000000002020002ULL;
        data[261] = 0x0000000000020002ULL;
        data[273] = 0x0000000202020002ULL;
        data[284] = 0x0000000000020002ULL;
        data[296] = 0x0000000002020002ULL;
        data[329] = 0x0000000000020002ULL;
        data[352] = 0x0000000000020002ULL;
        data[363] = 0x0000000202020002ULL;
        data[367] = 0x0000000000020002ULL;
        data[386] = 0x0000000002020002ULL;
        data[390] = 0x0000000000020002ULL;
        data[401] = 0x0000000202020002ULL;
        data[424] = 0x0000000002020002ULL;
        data[457] = 0x0000000000020002ULL;
        data[480] = 0x0000000000020002ULL;
        data[495] = 0x0000000000020002ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x0404040404040004ULL;
        data[3] = 0x0000000004040004ULL;
        data[10] = 0x0000000000040004ULL;
        data[12] = 0x0000000000040004ULL;
        data[34] = 0x0000000404040004ULL;
        data[46] = 0x0000000004040004ULL;
        data[56] = 0x0000000000040004ULL;
        data[78] = 0x0000040404040004ULL;
        data[80] = 0x0000000004040004ULL;
        data[123] = 0x0000000004040004ULL;
        data[145] = 0x0000000000040004ULL;
        data[189] = 0x0000000000040004ULL;
        data[191] = 0x0000000000040004ULL;
        data[213] = 0x0000000404040004ULL;
        data[222] = 0x0000000000040004ULL;
        data[235] = 0x0000000000040004ULL;
        data[257] = 0x0004040404040004ULL;
        data[259] = 0x0000000004040004ULL;
        data[266] = 0x0000000000040004ULL;
        data[268] = 0x0000000000040004ULL;
        data[290] = 0x0000000404040004ULL;
        data[302] = 0x0000000004040004ULL;
        data[312] = 0x0000000000040004ULL;
        data[334] = 0x0000040404040004ULL;
        data[336] = 0x0000000004040004ULL;
        data[379] = 0x0000000004040004ULL;
        data[401] = 0x0000000000040004ULL;
        data[445] = 0x0000000000040004ULL;
        data[447] = 0x0000000000040004ULL;
        data[469] = 0x0000000404040004ULL;
        data[478] = 0x0000000000040004ULL;
        data[491] = 0x0000000000040004ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [500]();
        data[1] = 0x0808080808080008ULL;
        data[2] = 0x0000000000080008ULL;
        data[16] = 0x0000000008080008ULL;
        data[30] = 0x0000000000080008ULL;
        data[42] = 0x0000080808080008ULL;
        data[56] = 0x0000000000080008ULL;
        data[69] = 0x0000000808080008ULL;
        data[71] = 0x0000000000080008ULL;
        data[83] = 0x0000000000080008ULL;
        data[98] = 0x0000000000080008ULL;
        data[124] = 0x0000000000080008ULL;
        data[138] = 0x0000080808080008ULL;
        data[152] = 0x0000000000080008ULL;
        data[167] = 0x0000000000080008ULL;
        data[194] = 0x0000000000080008ULL;
        data[220] = 0x0000000000080008ULL;
        data[225] = 0x0000000008080008ULL;
        data[290] = 0x0000000000080008ULL;
        data[294] = 0x0000000008080008ULL;
        data[321] = 0x0000000008080008ULL;
        data[347] = 0x0000000808080008ULL;
        data[362] = 0x0000000008080008ULL;
        data[376] = 0x0000000000080008ULL;
        data[390] = 0x0000000008080008ULL;
        data[417] = 0x0008080808080008ULL;
        data[432] = 0x0000000008080008ULL;
        data[443] = 0x0000000808080008ULL;
        data[446] = 0x0000000000080008ULL;
        data[458] = 0x0000000008080008ULL;
        data[472] = 0x0000000000080008ULL;
        data[485] = 0x0000000808080008ULL;
        data[499] = 0x0000000000080008ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [486]();
        data[1] = 0x1010101010100010ULL;
        data[3] = 0x0000000000100010ULL;
        data[31] = 0x0000000010100010ULL;
        data[59] = 0x0000000000100010ULL;
        data[67] = 0x0000000000100010ULL;
        data[76] = 0x0000000010100010ULL;
        data[84] = 0x0000101010100010ULL;
        data[112] = 0x0000000000100010ULL;
        data[129] = 0x0000000010100010ULL;
        data[137] = 0x0000001010100010ULL;
        data[142] = 0x0000000000100010ULL;
        data[165] = 0x0000000000100010ULL;
        data[182] = 0x0000001010100010ULL;
        data[195] = 0x0000000000100010ULL;
        data[212] = 0x0000000010100010ULL;
        data[240] = 0x0000000000100010ULL;
        data[248] = 0x0000000000100010ULL;
        data[268] = 0x0000000010100010ULL;
        data[276] = 0x0000101010100010ULL;
        data[304] = 0x0000000000100010ULL;
        data[321] = 0x0010101010100010ULL;
        data[334] = 0x0000000000100010ULL;
        data[351] = 0x0000000010100010ULL;
        data[374] = 0x0000001010100010ULL;
        data[379] = 0x0000000000100010ULL;
        data[387] = 0x0000000000100010ULL;
        data[404] = 0x0000000010100010ULL;
        data[432] = 0x0000000000100010ULL;
        data[440] = 0x0000000000100010ULL;
        data[449] = 0x0000000010100010ULL;
        data[457] = 0x0000001010100010ULL;
        data[485] = 0x0000000000100010ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x2020202020200020ULL;
        data[6] = 0x0000000000200020ULL;
        data[23] = 0x0000000020200020ULL;
        data[39] = 0x0000202020200020ULL;
        data[62] = 0x0000000020200020ULL;
        data[95] = 0x0000000000200020ULL;
        data[118] = 0x0000000000200020ULL;
        data[129] = 0x0020202020200020ULL;
        data[133] = 0x0000000000200020ULL;
        data[151] = 0x0000000020200020ULL;
        data[156] = 0x0000000000200020ULL;
        data[167] = 0x0000202020200020ULL;
        data[190] = 0x0000000020200020ULL;
        data[223] = 0x0000000000200020ULL;
        data[235] = 0x0000002020200020ULL;
        data[246] = 0x0000000000200020ULL;
        data[258] = 0x0000000020200020ULL;
        data[261] = 0x0000000000200020ULL;
        data[273] = 0x0000002020200020ULL;
        data[284] = 0x0000000000200020ULL;
        data[296] = 0x0000000020200020ULL;
        data[329] = 0x0000000000200020ULL;
        data[352] = 0x0000000000200020ULL;
        data[363] = 0x0000002020200020ULL;
        data[367] = 0x0000000000200020ULL;
        data[386] = 0x0000000020200020ULL;
        data[390] = 0x0000000000200020ULL;
        data[401] = 0x0000002020200020ULL;
        data[424] = 0x0000000020200020ULL;
        data[457] = 0x0000000000200020ULL;
        data[480] = 0x0000000000200020ULL;
        data[495] = 0x0000000000200020ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x4040404040400040ULL;
        data[3] = 0x0000000040400040ULL;
        data[10] = 0x0000000000400040ULL;
        data[12] = 0x0000000000400040ULL;
        data[34] = 0x0000004040400040ULL;
        data[46] = 0x0000000040400040ULL;
        data[56] = 0x0000000000400040ULL;
        data[78] = 0x0000404040400040ULL;
        data[80] = 0x0000000040400040ULL;
        data[123] = 0x0000000040400040ULL;
        data[145] = 0x0000000000400040ULL;
        data[189] = 0x0000000000400040ULL;
        data[191] = 0x0000000000400040ULL;
        data[213] = 0x0000004040400040ULL;
        data[222] = 0x0000000000400040ULL;
        data[235] = 0x0000000000400040ULL;
        data[257] = 0x0040404040400040ULL;
        data[259] = 0x0000000040400040ULL;
        data[266] = 0x0000000000400040ULL;
        data[268] = 0x0000000000400040ULL;
        data[290] = 0x0000004040400040ULL;
        data[302] = 0x0000000040400040ULL;
        data[312] = 0x0000000000400040ULL;
        data[334] = 0x0000404040400040ULL;
        data[336] = 0x0000000040400040ULL;
        data[379] = 0x0000000040400040ULL;
        data[401] = 0x0000000000400040ULL;
        data[445] = 0x0000000000400040ULL;
        data[447] = 0x0000000000400040ULL;
        data[469] = 0x0000004040400040ULL;
        data[478] = 0x0000000000400040ULL;
        data[491] = 0x0000000000400040ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x8080808080800080ULL;
        data[6] = 0x0000000000800080ULL;
        data[23] = 0x0000000080800080ULL;
        data[39] = 0x0000808080800080ULL;
        data[62] = 0x0000000080800080ULL;
        data[95] = 0x0000000000800080ULL;
        data[118] = 0x0000000000800080ULL;
        data[129] = 0x0080808080800080ULL;
        data[133] = 0x0000000000800080ULL;
        data[151] = 0x0000000080800080ULL;
        data[156] = 0x0000000000800080ULL;
        data[167] = 0x0000808080800080ULL;
        data[190] = 0x0000000080800080ULL;
        data[223] = 0x0000000000800080ULL;
        data[235] = 0x0000008080800080ULL;
        data[246] = 0x0000000000800080ULL;
        data[258] = 0x0000000080800080ULL;
        data[261] = 0x0000000000800080ULL;
        data[273] = 0x0000008080800080ULL;
        data[284] = 0x0000000000800080ULL;
        data[296] = 0x0000000080800080ULL;
        data[329] = 0x0000000000800080ULL;
        data[352] = 0x0000000000800080ULL;
        data[363] = 0x0000008080800080ULL;
        data[367] = 0x0000000000800080ULL;
        data[386] = 0x0000000080800080ULL;
        data[390] = 0x0000000000800080ULL;
        data[401] = 0x0000008080800080ULL;
        data[424] = 0x0000000080800080ULL;
        data[457] = 0x0000000000800080ULL;
        data[480] = 0x0000000000800080ULL;
        data[495] = 0x0000000000800080ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x0101010101000101ULL;
        data[3] = 0x0000000001000101ULL;
        data[23] = 0x0000000101000100ULL;
        data[34] = 0x0000000101000101ULL;
        data[35] = 0x0000000001000100ULL;
        data[46] = 0x0000000001000101ULL;
        data[66] = 0x0000010101000100ULL;
        data[68] = 0x0000000001000100ULL;
        data[78] = 0x0000010101000101ULL;
        data[80] = 0x0000000001000101ULL;
        data[112] = 0x0000000001000100ULL;
        data[123] = 0x0000000001000101ULL;
        data[202] = 0x0000000101000100ULL;
        data[213] = 0x0000000101000101ULL;
        data[245] = 0x0101010101000100ULL;
        data[247] = 0x0000000001000100ULL;
        data[257] = 0x0001010101000101ULL;
        data[259] = 0x0000000001000101ULL;
        data[279] = 0x0000000101000100ULL;
        data[290] = 0x0000000101000101ULL;
        data[291] = 0x0000000001000100ULL;
        data[302] = 0x0000000001000101ULL;
        data[322] = 0x0000010101000100ULL;
        data[324] = 0x0000000001000100ULL;
        data[334] = 0x0000010101000101ULL;
        data[336] = 0x0000000001000101ULL;
        data[368] = 0x0000000001000100ULL;
        data[379] = 0x0000000001000101ULL;
        data[458] = 0x0000000101000100ULL;
        data[469] = 0x0000000101000101ULL;
        data[501] = 0x0001010101000100ULL;
        data[503] = 0x0000000001000100ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0202020202000202ULL;
        data[18] = 0x0000000002000200ULL;
        data[23] = 0x0000000002000202ULL;
        data[33] = 0x0000020202000200ULL;
        data[39] = 0x0000020202000202ULL;
        data[56] = 0x0000000002000200ULL;
        data[62] = 0x0000000002000202ULL;
        data[101] = 0x0000000202000200ULL;
        data[124] = 0x0000000002000200ULL;
        data[129] = 0x0002020202000202ULL;
        data[140] = 0x0000000202000200ULL;
        data[151] = 0x0000000002000202ULL;
        data[162] = 0x0000000002000200ULL;
        data[167] = 0x0000020202000202ULL;
        data[190] = 0x0000000002000202ULL;
        data[229] = 0x0000000202000200ULL;
        data[235] = 0x0000000202000202ULL;
        data[252] = 0x0000000002000200ULL;
        data[258] = 0x0000000002000202ULL;
        data[268] = 0x0000000202000200ULL;
        data[273] = 0x0000000202000202ULL;
        data[290] = 0x0000000002000200ULL;
        data[296] = 0x0000000002000202ULL;
        data[363] = 0x0000000202000202ULL;
        data[379] = 0x0202020202000200ULL;
        data[386] = 0x0000000002000202ULL;
        data[401] = 0x0000000202000202ULL;
        data[402] = 0x0000000002000200ULL;
        data[417] = 0x0000020202000200ULL;
        data[424] = 0x0000000002000202ULL;
        data[440] = 0x0000000002000200ULL;
        data[507] = 0x0002020202000200ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x0404040404000404ULL;
        data[3] = 0x0000000004000404ULL;
        data[23] = 0x0000000404000400ULL;
        data[34] = 0x0000000404000404ULL;
        data[35] = 0x0000000004000400ULL;
        data[46] = 0x0000000004000404ULL;
        data[66] = 0x0000040404000400ULL;
        data[68] = 0x0000000004000400ULL;
        data[78] = 0x0000040404000404ULL;
        data[80] = 0x0000000004000404ULL;
        data[112] = 0x0000000004000400ULL;
        data[123] = 0x0000000004000404ULL;
        data[202] = 0x0000000404000400ULL;
        data[213] = 0x0000000404000404ULL;
        data[245] = 0x0404040404000400ULL;
        data[247] = 0x0000000004000400ULL;
        data[257] = 0x0004040404000404ULL;
        data[259] = 0x0000000004000404ULL;
        data[279] = 0x0000000404000400ULL;
        data[290] = 0x0000000404000404ULL;
        data[291] = 0x0000000004000400ULL;
        data[302] = 0x0000000004000404ULL;
        data[322] = 0x0000040404000400ULL;
        data[324] = 0x0000000004000400ULL;
        data[334] = 0x0000040404000404ULL;
        data[336] = 0x0000000004000404ULL;
        data[368] = 0x0000000004000400ULL;
        data[379] = 0x0000000004000404ULL;
        data[458] = 0x0000000404000400ULL;
        data[469] = 0x0000000404000404ULL;
        data[501] = 0x0004040404000400ULL;
        data[503] = 0x0000000004000400ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [495]();
        data[1] = 0x0808080808000808ULL;
        data[9] = 0x0000080808000800ULL;
        data[16] = 0x0000000008000808ULL;
        data[35] = 0x0000000808000800ULL;
        data[42] = 0x0000080808000808ULL;
        data[69] = 0x0000000808000808ULL;
        data[105] = 0x0000080808000800ULL;
        data[138] = 0x0000080808000808ULL;
        data[191] = 0x0000000008000800ULL;
        data[225] = 0x0000000008000808ULL;
        data[261] = 0x0000000008000800ULL;
        data[287] = 0x0000000008000800ULL;
        data[294] = 0x0000000008000808ULL;
        data[314] = 0x0000000808000800ULL;
        data[321] = 0x0000000008000808ULL;
        data[329] = 0x0000000008000800ULL;
        data[347] = 0x0000000808000808ULL;
        data[357] = 0x0000000008000800ULL;
        data[362] = 0x0000000008000808ULL;
        data[383] = 0x0008080808000800ULL;
        data[390] = 0x0000000008000808ULL;
        data[398] = 0x0000000008000800ULL;
        data[410] = 0x0000000808000800ULL;
        data[417] = 0x0008080808000808ULL;
        data[425] = 0x0000000008000800ULL;
        data[432] = 0x0000000008000808ULL;
        data[443] = 0x0000000808000808ULL;
        data[451] = 0x0000000808000800ULL;
        data[458] = 0x0000000008000808ULL;
        data[479] = 0x0808080808000800ULL;
        data[485] = 0x0000000808000808ULL;
        data[494] = 0x0000000008000800ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [477]();
        data[1] = 0x1010101010001010ULL;
        data[9] = 0x0000000010001000ULL;
        data[17] = 0x0000101010001000ULL;
        data[31] = 0x0000000010001010ULL;
        data[62] = 0x0000000010001000ULL;
        data[70] = 0x0000001010001000ULL;
        data[76] = 0x0000000010001010ULL;
        data[84] = 0x0000101010001010ULL;
        data[115] = 0x0000001010001000ULL;
        data[129] = 0x0000000010001010ULL;
        data[137] = 0x0000001010001010ULL;
        data[145] = 0x0000000010001000ULL;
        data[182] = 0x0000001010001010ULL;
        data[201] = 0x0000000010001000ULL;
        data[209] = 0x0000101010001000ULL;
        data[212] = 0x0000000010001010ULL;
        data[254] = 0x0010101010001000ULL;
        data[268] = 0x0000000010001010ULL;
        data[276] = 0x0000101010001010ULL;
        data[284] = 0x0000000010001000ULL;
        data[307] = 0x0000001010001000ULL;
        data[321] = 0x0010101010001010ULL;
        data[337] = 0x0000000010001000ULL;
        data[351] = 0x0000000010001010ULL;
        data[374] = 0x0000001010001010ULL;
        data[382] = 0x0000000010001000ULL;
        data[390] = 0x0000001010001000ULL;
        data[404] = 0x0000000010001010ULL;
        data[446] = 0x1010101010001000ULL;
        data[449] = 0x0000000010001010ULL;
        data[457] = 0x0000001010001010ULL;
        data[476] = 0x0000000010001000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x2020202020002020ULL;
        data[18] = 0x0000000020002000ULL;
        data[23] = 0x0000000020002020ULL;
        data[33] = 0x0000202020002000ULL;
        data[39] = 0x0000202020002020ULL;
        data[56] = 0x0000000020002000ULL;
        data[62] = 0x0000000020002020ULL;
        data[101] = 0x0000002020002000ULL;
        data[124] = 0x0000000020002000ULL;
        data[129] = 0x0020202020002020ULL;
        data[140] = 0x0000002020002000ULL;
        data[151] = 0x0000000020002020ULL;
        data[162] = 0x0000000020002000ULL;
        data[167] = 0x0000202020002020ULL;
        data[190] = 0x0000000020002020ULL;
        data[229] = 0x0000002020002000ULL;
        data[235] = 0x0000002020002020ULL;
        data[252] = 0x0000000020002000ULL;
        data[258] = 0x0000000020002020ULL;
        data[268] = 0x0000002020002000ULL;
        data[273] = 0x0000002020002020ULL;
        data[290] = 0x0000000020002000ULL;
        data[296] = 0x0000000020002020ULL;
        data[363] = 0x0000002020002020ULL;
        data[379] = 0x2020202020002000ULL;
        data[386] = 0x0000000020002020ULL;
        data[401] = 0x0000002020002020ULL;
        data[402] = 0x0000000020002000ULL;
        data[417] = 0x0000202020002000ULL;
        data[424] = 0x0000000020002020ULL;
        data[440] = 0x0000000020002000ULL;
        data[507] = 0x0020202020002000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x4040404040004040ULL;
        data[3] = 0x0000000040004040ULL;
        data[23] = 0x0000004040004000ULL;
        data[34] = 0x0000004040004040ULL;
        data[35] = 0x0000000040004000ULL;
        data[46] = 0x0000000040004040ULL;
        data[66] = 0x0000404040004000ULL;
        data[68] = 0x0000000040004000ULL;
        data[78] = 0x0000404040004040ULL;
        data[80] = 0x0000000040004040ULL;
        data[112] = 0x0000000040004000ULL;
        data[123] = 0x0000000040004040ULL;
        data[202] = 0x0000004040004000ULL;
        data[213] = 0x0000004040004040ULL;
        data[245] = 0x4040404040004000ULL;
        data[247] = 0x0000000040004000ULL;
        data[257] = 0x0040404040004040ULL;
        data[259] = 0x0000000040004040ULL;
        data[279] = 0x0000004040004000ULL;
        data[290] = 0x0000004040004040ULL;
        data[291] = 0x0000000040004000ULL;
        data[302] = 0x0000000040004040ULL;
        data[322] = 0x0000404040004000ULL;
        data[324] = 0x0000000040004000ULL;
        data[334] = 0x0000404040004040ULL;
        data[336] = 0x0000000040004040ULL;
        data[368] = 0x0000000040004000ULL;
        data[379] = 0x0000000040004040ULL;
        data[458] = 0x0000004040004000ULL;
        data[469] = 0x0000004040004040ULL;
        data[501] = 0x0040404040004000ULL;
        data[503] = 0x0000000040004000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x8080808080008080ULL;
        data[18] = 0x0000000080008000ULL;
        data[23] = 0x0000000080008080ULL;
        data[33] = 0x0000808080008000ULL;
        data[39] = 0x0000808080008080ULL;
        data[56] = 0x0000000080008000ULL;
        data[62] = 0x0000000080008080ULL;
        data[101] = 0x0000008080008000ULL;
        data[124] = 0x0000000080008000ULL;
        data[129] = 0x0080808080008080ULL;
        data[140] = 0x0000008080008000ULL;
        data[151] = 0x0000000080008080ULL;
        data[162] = 0x0000000080008000ULL;
        data[167] = 0x0000808080008080ULL;
        data[190] = 0x0000000080008080ULL;
        data[229] = 0x0000008080008000ULL;
        data[235] = 0x0000008080008080ULL;
        data[252] = 0x0000000080008000ULL;
        data[258] = 0x0000000080008080ULL;
        data[268] = 0x0000008080008000ULL;
        data[273] = 0x0000008080008080ULL;
        data[290] = 0x0000000080008000ULL;
        data[296] = 0x0000000080008080ULL;
        data[363] = 0x0000008080008080ULL;
        data[379] = 0x8080808080008000ULL;
        data[386] = 0x0000000080008080ULL;
        data[401] = 0x0000008080008080ULL;
        data[402] = 0x0000000080008000ULL;
        data[417] = 0x0000808080008000ULL;
        data[424] = 0x0000000080008080ULL;
        data[440] = 0x0000000080008000ULL;
        data[507] = 0x0080808080008000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0101010100010101ULL;
        data[10] = 0x0000010100010000ULL;
        data[23] = 0x0000000100010100ULL;
        data[34] = 0x0000000100010101ULL;
        data[66] = 0x0000010100010100ULL;
        data[78] = 0x0000010100010101ULL;
        data[134] = 0x0000000100010000ULL;
        data[145] = 0x0000000100010000ULL;
        data[177] = 0x0001010100010000ULL;
        data[189] = 0x0101010100010000ULL;
        data[202] = 0x0000000100010100ULL;
        data[211] = 0x0000000100010000ULL;
        data[213] = 0x0000000100010101ULL;
        data[222] = 0x0000000100010000ULL;
        data[245] = 0x0101010100010100ULL;
        data[254] = 0x0000010100010000ULL;
        data[257] = 0x0001010100010101ULL;
        data[266] = 0x0000010100010000ULL;
        data[279] = 0x0000000100010100ULL;
        data[290] = 0x0000000100010101ULL;
        data[322] = 0x0000010100010100ULL;
        data[334] = 0x0000010100010101ULL;
        data[390] = 0x0000000100010000ULL;
        data[401] = 0x0000000100010000ULL;
        data[433] = 0x0101010100010000ULL;
        data[445] = 0x0001010100010000ULL;
        data[458] = 0x0000000100010100ULL;
        data[467] = 0x0000000100010000ULL;
        data[469] = 0x0000000100010101ULL;
        data[478] = 0x0000000100010000ULL;
        data[501] = 0x0001010100010100ULL;
        data[510] = 0x0000010100010000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0202020200020202ULL;
        data[33] = 0x0000020200020200ULL;
        data[39] = 0x0000020200020202ULL;
        data[89] = 0x0002020200020000ULL;
        data[95] = 0x0202020200020000ULL;
        data[101] = 0x0000000200020200ULL;
        data[127] = 0x0000020200020000ULL;
        data[129] = 0x0002020200020202ULL;
        data[133] = 0x0000020200020000ULL;
        data[140] = 0x0000000200020200ULL;
        data[167] = 0x0000020200020202ULL;
        data[195] = 0x0000000200020000ULL;
        data[223] = 0x0002020200020000ULL;
        data[229] = 0x0000000200020200ULL;
        data[234] = 0x0000000200020000ULL;
        data[235] = 0x0000000200020202ULL;
        data[261] = 0x0000020200020000ULL;
        data[268] = 0x0000000200020200ULL;
        data[273] = 0x0000000200020202ULL;
        data[323] = 0x0000000200020000ULL;
        data[329] = 0x0000000200020000ULL;
        data[362] = 0x0000000200020000ULL;
        data[363] = 0x0000000200020202ULL;
        data[367] = 0x0000000200020000ULL;
        data[379] = 0x0202020200020200ULL;
        data[401] = 0x0000000200020202ULL;
        data[417] = 0x0000020200020200ULL;
        data[457] = 0x0000000200020000ULL;
        data[473] = 0x0202020200020000ULL;
        data[495] = 0x0000000200020000ULL;
        data[507] = 0x0002020200020200ULL;
        data[511] = 0x0000020200020000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0404040400040404ULL;
        data[10] = 0x0000040400040000ULL;
        data[23] = 0x0000000400040400ULL;
        data[34] = 0x0000000400040404ULL;
        data[66] = 0x0000040400040400ULL;
        data[78] = 0x0000040400040404ULL;
        data[134] = 0x0000000400040000ULL;
        data[145] = 0x0000000400040000ULL;
        data[177] = 0x0004040400040000ULL;
        data[189] = 0x0404040400040000ULL;
        data[202] = 0x0000000400040400ULL;
        data[211] = 0x0000000400040000ULL;
        data[213] = 0x0000000400040404ULL;
        data[222] = 0x0000000400040000ULL;
        data[245] = 0x0404040400040400ULL;
        data[254] = 0x0000040400040000ULL;
        data[257] = 0x0004040400040404ULL;
        data[266] = 0x0000040400040000ULL;
        data[279] = 0x0000000400040400ULL;
        data[290] = 0x0000000400040404ULL;
        data[322] = 0x0000040400040400ULL;
        data[334] = 0x0000040400040404ULL;
        data[390] = 0x0000000400040000ULL;
        data[401] = 0x0000000400040000ULL;
        data[433] = 0x0404040400040000ULL;
        data[445] = 0x0004040400040000ULL;
        data[458] = 0x0000000400040400ULL;
        data[467] = 0x0000000400040000ULL;
        data[469] = 0x0000000400040404ULL;
        data[478] = 0x0000000400040000ULL;
        data[501] = 0x0004040400040400ULL;
        data[510] = 0x0000040400040000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [500]();
        data[1] = 0x0808080800080808ULL;
        data[9] = 0x0000080800080800ULL;
        data[23] = 0x0008080800080000ULL;
        data[35] = 0x0000000800080800ULL;
        data[42] = 0x0000080800080808ULL;
        data[49] = 0x0000000800080000ULL;
        data[56] = 0x0008080800080000ULL;
        data[69] = 0x0000000800080808ULL;
        data[83] = 0x0000000800080000ULL;
        data[91] = 0x0000000800080000ULL;
        data[105] = 0x0000080800080800ULL;
        data[119] = 0x0808080800080000ULL;
        data[124] = 0x0000000800080000ULL;
        data[138] = 0x0000080800080808ULL;
        data[152] = 0x0808080800080000ULL;
        data[160] = 0x0000080800080000ULL;
        data[187] = 0x0000000800080000ULL;
        data[194] = 0x0000080800080000ULL;
        data[220] = 0x0000000800080000ULL;
        data[256] = 0x0000080800080000ULL;
        data[290] = 0x0000080800080000ULL;
        data[314] = 0x0000000800080800ULL;
        data[347] = 0x0000000800080808ULL;
        data[383] = 0x0008080800080800ULL;
        data[410] = 0x0000000800080800ULL;
        data[417] = 0x0008080800080808ULL;
        data[443] = 0x0000000800080808ULL;
        data[451] = 0x0000000800080800ULL;
        data[465] = 0x0000000800080000ULL;
        data[479] = 0x0808080800080800ULL;
        data[485] = 0x0000000800080808ULL;
        data[499] = 0x0000000800080000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [513]();
        data[1] = 0x1010101000101010ULL;
        data[17] = 0x0000101000101000ULL;
        data[45] = 0x0010101000100000ULL;
        data[67] = 0x0000101000100000ULL;
        data[70] = 0x0000001000101000ULL;
        data[84] = 0x0000101000101010ULL;
        data[98] = 0x0000001000100000ULL;
        data[112] = 0x0010101000100000ULL;
        data[115] = 0x0000001000101000ULL;
        data[137] = 0x0000001000101010ULL;
        data[165] = 0x0000001000100000ULL;
        data[181] = 0x0000001000100000ULL;
        data[182] = 0x0000001000101010ULL;
        data[209] = 0x0000101000101000ULL;
        data[237] = 0x1010101000100000ULL;
        data[248] = 0x0000001000100000ULL;
        data[254] = 0x0010101000101000ULL;
        data[276] = 0x0000101000101010ULL;
        data[304] = 0x1010101000100000ULL;
        data[307] = 0x0000001000101000ULL;
        data[320] = 0x0000101000100000ULL;
        data[321] = 0x0010101000101010ULL;
        data[373] = 0x0000001000100000ULL;
        data[374] = 0x0000001000101010ULL;
        data[387] = 0x0000101000100000ULL;
        data[390] = 0x0000001000101000ULL;
        data[418] = 0x0000001000100000ULL;
        data[440] = 0x0000001000100000ULL;
        data[446] = 0x1010101000101000ULL;
        data[457] = 0x0000001000101010ULL;
        data[485] = 0x0000001000100000ULL;
        data[512] = 0x0000101000100000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x2020202000202020ULL;
        data[33] = 0x0000202000202000ULL;
        data[39] = 0x0000202000202020ULL;
        data[89] = 0x0020202000200000ULL;
        data[95] = 0x2020202000200000ULL;
        data[101] = 0x0000002000202000ULL;
        data[127] = 0x0000202000200000ULL;
        data[129] = 0x0020202000202020ULL;
        data[133] = 0x0000202000200000ULL;
        data[140] = 0x0000002000202000ULL;
        data[167] = 0x0000202000202020ULL;
        data[195] = 0x0000002000200000ULL;
        data[223] = 0x0020202000200000ULL;
        data[229] = 0x0000002000202000ULL;
        data[234] = 0x0000002000200000ULL;
        data[235] = 0x0000002000202020ULL;
        data[261] = 0x0000202000200000ULL;
        data[268] = 0x0000002000202000ULL;
        data[273] = 0x0000002000202020ULL;
        data[323] = 0x0000002000200000ULL;
        data[329] = 0x0000002000200000ULL;
        data[362] = 0x0000002000200000ULL;
        data[363] = 0x0000002000202020ULL;
        data[367] = 0x0000002000200000ULL;
        data[379] = 0x2020202000202000ULL;
        data[401] = 0x0000002000202020ULL;
        data[417] = 0x0000202000202000ULL;
        data[457] = 0x0000002000200000ULL;
        data[473] = 0x2020202000200000ULL;
        data[495] = 0x0000002000200000ULL;
        data[507] = 0x0020202000202000ULL;
        data[511] = 0x0000202000200000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x4040404000404040ULL;
        data[10] = 0x0000404000400000ULL;
        data[23] = 0x0000004000404000ULL;
        data[34] = 0x0000004000404040ULL;
        data[66] = 0x0000404000404000ULL;
        data[78] = 0x0000404000404040ULL;
        data[134] = 0x0000004000400000ULL;
        data[145] = 0x0000004000400000ULL;
        data[177] = 0x0040404000400000ULL;
        data[189] = 0x4040404000400000ULL;
        data[202] = 0x0000004000404000ULL;
        data[211] = 0x0000004000400000ULL;
        data[213] = 0x0000004000404040ULL;
        data[222] = 0x0000004000400000ULL;
        data[245] = 0x4040404000404000ULL;
        data[254] = 0x0000404000400000ULL;
        data[257] = 0x0040404000404040ULL;
        data[266] = 0x0000404000400000ULL;
        data[279] = 0x0000004000404000ULL;
        data[290] = 0x0000004000404040ULL;
        data[322] = 0x0000404000404000ULL;
        data[334] = 0x0000404000404040ULL;
        data[390] = 0x0000004000400000ULL;
        data[401] = 0x0000004000400000ULL;
        data[433] = 0x4040404000400000ULL;
        data[445] = 0x0040404000400000ULL;
        data[458] = 0x0000004000404000ULL;
        data[467] = 0x0000004000400000ULL;
        data[469] = 0x0000004000404040ULL;
        data[478] = 0x0000004000400000ULL;
        data[501] = 0x0040404000404000ULL;
        data[510] = 0x0000404000400000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x8080808000808080ULL;
        data[33] = 0x0000808000808000ULL;
        data[39] = 0x0000808000808080ULL;
        data[89] = 0x0080808000800000ULL;
        data[95] = 0x8080808000800000ULL;
        data[101] = 0x0000008000808000ULL;
        data[127] = 0x0000808000800000ULL;
        data[129] = 0x0080808000808080ULL;
        data[133] = 0x0000808000800000ULL;
        data[140] = 0x0000008000808000ULL;
        data[167] = 0x0000808000808080ULL;
        data[195] = 0x0000008000800000ULL;
        data[223] = 0x0080808000800000ULL;
        data[229] = 0x0000008000808000ULL;
        data[234] = 0x0000008000800000ULL;
        data[235] = 0x0000008000808080ULL;
        data[261] = 0x0000808000800000ULL;
        data[268] = 0x0000008000808000ULL;
        data[273] = 0x0000008000808080ULL;
        data[323] = 0x0000008000800000ULL;
        data[329] = 0x0000008000800000ULL;
        data[362] = 0x0000008000800000ULL;
        data[363] = 0x0000008000808080ULL;
        data[367] = 0x0000008000800000ULL;
        data[379] = 0x8080808000808000ULL;
        data[401] = 0x0000008000808080ULL;
        data[417] = 0x0000808000808000ULL;
        data[457] = 0x0000008000800000ULL;
        data[473] = 0x8080808000800000ULL;
        data[495] = 0x0000008000800000ULL;
        data[507] = 0x0080808000808000ULL;
        data[511] = 0x0000808000800000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0101010001010101ULL;
        data[10] = 0x0000010001010000ULL;
        data[35] = 0x0001010001000000ULL;
        data[44] = 0x0000010001000000ULL;
        data[46] = 0x0101010001000000ULL;
        data[56] = 0x0000010001000000ULL;
        data[66] = 0x0000010001010100ULL;
        data[78] = 0x0000010001010101ULL;
        data[112] = 0x0000010001000000ULL;
        data[123] = 0x0000010001000000ULL;
        data[177] = 0x0001010001010000ULL;
        data[189] = 0x0101010001010000ULL;
        data[223] = 0x0001010001000000ULL;
        data[235] = 0x0101010001000000ULL;
        data[245] = 0x0101010001010100ULL;
        data[254] = 0x0000010001010000ULL;
        data[257] = 0x0001010001010101ULL;
        data[266] = 0x0000010001010000ULL;
        data[291] = 0x0101010001000000ULL;
        data[300] = 0x0000010001000000ULL;
        data[302] = 0x0001010001000000ULL;
        data[312] = 0x0000010001000000ULL;
        data[322] = 0x0000010001010100ULL;
        data[334] = 0x0000010001010101ULL;
        data[368] = 0x0000010001000000ULL;
        data[379] = 0x0000010001000000ULL;
        data[433] = 0x0101010001010000ULL;
        data[445] = 0x0001010001010000ULL;
        data[479] = 0x0101010001000000ULL;
        data[491] = 0x0001010001000000ULL;
        data[501] = 0x0001010001010100ULL;
        data[510] = 0x0000010001010000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0202020002020202ULL;
        data[18] = 0x0002020002000000ULL;
        data[22] = 0x0000020002000000ULL;
        data[23] = 0x0202020002000000ULL;
        data[33] = 0x0000020002020200ULL;
        data[39] = 0x0000020002020202ULL;
        data[56] = 0x0000020002000000ULL;
        data[62] = 0x0000020002000000ULL;
        data[89] = 0x0002020002020000ULL;
        data[95] = 0x0202020002020000ULL;
        data[112] = 0x0002020002000000ULL;
        data[118] = 0x0202020002000000ULL;
        data[127] = 0x0000020002020000ULL;
        data[129] = 0x0002020002020202ULL;
        data[133] = 0x0000020002020000ULL;
        data[150] = 0x0000020002000000ULL;
        data[151] = 0x0002020002000000ULL;
        data[156] = 0x0000020002000000ULL;
        data[167] = 0x0000020002020202ULL;
        data[190] = 0x0000020002000000ULL;
        data[223] = 0x0002020002020000ULL;
        data[246] = 0x0002020002000000ULL;
        data[261] = 0x0000020002020000ULL;
        data[284] = 0x0000020002000000ULL;
        data[379] = 0x0202020002020200ULL;
        data[402] = 0x0202020002000000ULL;
        data[417] = 0x0000020002020200ULL;
        data[440] = 0x0000020002000000ULL;
        data[473] = 0x0202020002020000ULL;
        data[496] = 0x0202020002000000ULL;
        data[507] = 0x0002020002020200ULL;
        data[511] = 0x0000020002020000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0404040004040404ULL;
        data[10] = 0x0000040004040000ULL;
        data[35] = 0x0004040004000000ULL;
        data[44] = 0x0000040004000000ULL;
        data[46] = 0x0404040004000000ULL;
        data[56] = 0x0000040004000000ULL;
        data[66] = 0x0000040004040400ULL;
        data[78] = 0x0000040004040404ULL;
        data[112] = 0x0000040004000000ULL;
        data[123] = 0x0000040004000000ULL;
        data[177] = 0x0004040004040000ULL;
        data[189] = 0x0404040004040000ULL;
        data[223] = 0x0004040004000000ULL;
        data[235] = 0x0404040004000000ULL;
        data[245] = 0x0404040004040400ULL;
        data[254] = 0x0000040004040000ULL;
        data[257] = 0x0004040004040404ULL;
        data[266] = 0x0000040004040000ULL;
        data[291] = 0x0404040004000000ULL;
        data[300] = 0x0000040004000000ULL;
        data[302] = 0x0004040004000000ULL;
        data[312] = 0x0000040004000000ULL;
        data[322] = 0x0000040004040400ULL;
        data[334] = 0x0000040004040404ULL;
        data[368] = 0x0000040004000000ULL;
        data[379] = 0x0000040004000000ULL;
        data[433] = 0x0404040004040000ULL;
        data[445] = 0x0004040004040000ULL;
        data[479] = 0x0404040004000000ULL;
        data[491] = 0x0004040004000000ULL;
        data[501] = 0x0004040004040400ULL;
        data[510] = 0x0000040004040000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0808080008080808ULL;
        data[9] = 0x0000080008080800ULL;
        data[16] = 0x0000080008000000ULL;
        data[23] = 0x0008080008080000ULL;
        data[30] = 0x0808080008000000ULL;
        data[38] = 0x0000080008000000ULL;
        data[42] = 0x0000080008080808ULL;
        data[56] = 0x0008080008080000ULL;
        data[71] = 0x0000080008000000ULL;
        data[105] = 0x0000080008080800ULL;
        data[119] = 0x0808080008080000ULL;
        data[134] = 0x0000080008000000ULL;
        data[138] = 0x0000080008080808ULL;
        data[152] = 0x0808080008080000ULL;
        data[160] = 0x0000080008080000ULL;
        data[167] = 0x0000080008000000ULL;
        data[194] = 0x0000080008080000ULL;
        data[256] = 0x0000080008080000ULL;
        data[261] = 0x0008080008000000ULL;
        data[290] = 0x0000080008080000ULL;
        data[294] = 0x0008080008000000ULL;
        data[357] = 0x0808080008000000ULL;
        data[383] = 0x0008080008080800ULL;
        data[390] = 0x0808080008000000ULL;
        data[398] = 0x0000080008000000ULL;
        data[412] = 0x0008080008000000ULL;
        data[417] = 0x0008080008080808ULL;
        data[432] = 0x0000080008000000ULL;
        data[446] = 0x0008080008000000ULL;
        data[479] = 0x0808080008080800ULL;
        data[494] = 0x0000080008000000ULL;
        data[508] = 0x0808080008000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [513]();
        data[1] = 0x1010100010101010ULL;
        data[9] = 0x0010100010000000ULL;
        data[17] = 0x0000100010101000ULL;
        data[31] = 0x0000100010000000ULL;
        data[45] = 0x0010100010100000ULL;
        data[59] = 0x1010100010000000ULL;
        data[67] = 0x0000100010100000ULL;
        data[75] = 0x0000100010000000ULL;
        data[76] = 0x0010100010000000ULL;
        data[84] = 0x0000100010101010ULL;
        data[112] = 0x0010100010100000ULL;
        data[142] = 0x0000100010000000ULL;
        data[201] = 0x1010100010000000ULL;
        data[209] = 0x0000100010101000ULL;
        data[237] = 0x1010100010100000ULL;
        data[254] = 0x0010100010101000ULL;
        data[267] = 0x0000100010000000ULL;
        data[268] = 0x1010100010000000ULL;
        data[276] = 0x0000100010101010ULL;
        data[284] = 0x0000100010000000ULL;
        data[304] = 0x1010100010100000ULL;
        data[312] = 0x0010100010000000ULL;
        data[320] = 0x0000100010100000ULL;
        data[321] = 0x0010100010101010ULL;
        data[334] = 0x0000100010000000ULL;
        data[351] = 0x0000100010000000ULL;
        data[379] = 0x0010100010000000ULL;
        data[387] = 0x0000100010100000ULL;
        data[446] = 0x1010100010101000ULL;
        data[476] = 0x0000100010000000ULL;
        data[504] = 0x1010100010000000ULL;
        data[512] = 0x0000100010100000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x2020200020202020ULL;
        data[18] = 0x0020200020000000ULL;
        data[22] = 0x0000200020000000ULL;
        data[23] = 0x2020200020000000ULL;
        data[33] = 0x0000200020202000ULL;
        data[39] = 0x0000200020202020ULL;
        data[56] = 0x0000200020000000ULL;
        data[62] = 0x0000200020000000ULL;
        data[89] = 0x0020200020200000ULL;
        data[95] = 0x2020200020200000ULL;
        data[112] = 0x0020200020000000ULL;
        data[118] = 0x2020200020000000ULL;
        data[127] = 0x0000200020200000ULL;
        data[129] = 0x0020200020202020ULL;
        data[133] = 0x0000200020200000ULL;
        data[150] = 0x0000200020000000ULL;
        data[151] = 0x0020200020000000ULL;
        data[156] = 0x0000200020000000ULL;
        data[167] = 0x0000200020202020ULL;
        data[190] = 0x0000200020000000ULL;
        data[223] = 0x0020200020200000ULL;
        data[246] = 0x0020200020000000ULL;
        data[261] = 0x0000200020200000ULL;
        data[284] = 0x0000200020000000ULL;
        data[379] = 0x2020200020202000ULL;
        data[402] = 0x2020200020000000ULL;
        data[417] = 0x0000200020202000ULL;
        data[440] = 0x0000200020000000ULL;
        data[473] = 0x2020200020200000ULL;
        data[496] = 0x2020200020000000ULL;
        data[507] = 0x0020200020202000ULL;
        data[511] = 0x0000200020200000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x4040400040404040ULL;
        data[10] = 0x0000400040400000ULL;
        data[35] = 0x0040400040000000ULL;
        data[44] = 0x0000400040000000ULL;
        data[46] = 0x4040400040000000ULL;
        data[56] = 0x0000400040000000ULL;
        data[66] = 0x0000400040404000ULL;
        data[78] = 0x0000400040404040ULL;
        data[112] = 0x0000400040000000ULL;
        data[123] = 0x0000400040000000ULL;
        data[177] = 0x0040400040400000ULL;
        data[189] = 0x4040400040400000ULL;
        data[223] = 0x0040400040000000ULL;
        data[235] = 0x4040400040000000ULL;
        data[245] = 0x4040400040404000ULL;
        data[254] = 0x0000400040400000ULL;
        data[257] = 0x0040400040404040ULL;
        data[266] = 0x0000400040400000ULL;
        data[291] = 0x4040400040000000ULL;
        data[300] = 0x0000400040000000ULL;
        data[302] = 0x0040400040000000ULL;
        data[312] = 0x0000400040000000ULL;
        data[322] = 0x0000400040404000ULL;
        data[334] = 0x0000400040404040ULL;
        data[368] = 0x0000400040000000ULL;
        data[379] = 0x0000400040000000ULL;
        data[433] = 0x4040400040400000ULL;
        data[445] = 0x0040400040400000ULL;
        data[479] = 0x4040400040000000ULL;
        data[491] = 0x0040400040000000ULL;
        data[501] = 0x0040400040404000ULL;
        data[510] = 0x0000400040400000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x8080800080808080ULL;
        data[18] = 0x0080800080000000ULL;
        data[22] = 0x0000800080000000ULL;
        data[23] = 0x8080800080000000ULL;
        data[33] = 0x0000800080808000ULL;
        data[39] = 0x0000800080808080ULL;
        data[56] = 0x0000800080000000ULL;
        data[62] = 0x0000800080000000ULL;
        data[89] = 0x0080800080800000ULL;
        data[95] = 0x8080800080800000ULL;
        data[112] = 0x0080800080000000ULL;
        data[118] = 0x8080800080000000ULL;
        data[127] = 0x0000800080800000ULL;
        data[129] = 0x0080800080808080ULL;
        data[133] = 0x0000800080800000ULL;
        data[150] = 0x0000800080000000ULL;
        data[151] = 0x0080800080000000ULL;
        data[156] = 0x0000800080000000ULL;
        data[167] = 0x0000800080808080ULL;
        data[190] = 0x0000800080000000ULL;
        data[223] = 0x0080800080800000ULL;
        data[246] = 0x0080800080000000ULL;
        data[261] = 0x0000800080800000ULL;
        data[284] = 0x0000800080000000ULL;
        data[379] = 0x8080800080808000ULL;
        data[402] = 0x8080800080000000ULL;
        data[417] = 0x0000800080808000ULL;
        data[440] = 0x0000800080000000ULL;
        data[473] = 0x8080800080800000ULL;
        data[496] = 0x8080800080000000ULL;
        data[507] = 0x0080800080808000ULL;
        data[511] = 0x0000800080800000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x0101000101010101ULL;
        data[3] = 0x0101000100000000ULL;
        data[35] = 0x0001000101000000ULL;
        data[46] = 0x0101000101000000ULL;
        data[134] = 0x0001000100000000ULL;
        data[145] = 0x0101000100000000ULL;
        data[177] = 0x0001000101010000ULL;
        data[180] = 0x0001000100000000ULL;
        data[189] = 0x0101000101010000ULL;
        data[191] = 0x0101000100000000ULL;
        data[202] = 0x0101000100000000ULL;
        data[213] = 0x0001000100000000ULL;
        data[223] = 0x0001000101000000ULL;
        data[235] = 0x0101000101000000ULL;
        data[245] = 0x0101000101010100ULL;
        data[247] = 0x0101000100000000ULL;
        data[257] = 0x0001000101010101ULL;
        data[259] = 0x0001000100000000ULL;
        data[291] = 0x0101000101000000ULL;
        data[302] = 0x0001000101000000ULL;
        data[390] = 0x0101000100000000ULL;
        data[401] = 0x0001000100000000ULL;
        data[433] = 0x0101000101010000ULL;
        data[436] = 0x0101000100000000ULL;
        data[445] = 0x0001000101010000ULL;
        data[447] = 0x0001000100000000ULL;
        data[458] = 0x0001000100000000ULL;
        data[469] = 0x0101000100000000ULL;
        data[479] = 0x0101000101000000ULL;
        data[491] = 0x0001000101000000ULL;
        data[501] = 0x0001000101010100ULL;
        data[503] = 0x0001000100000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0202000202020202ULL;
        data[18] = 0x0002000202000000ULL;
        data[23] = 0x0202000202000000ULL;
        data[89] = 0x0002000202020000ULL;
        data[95] = 0x0202000202020000ULL;
        data[101] = 0x0202000200000000ULL;
        data[112] = 0x0002000202000000ULL;
        data[118] = 0x0202000202000000ULL;
        data[124] = 0x0202000200000000ULL;
        data[129] = 0x0002000202020202ULL;
        data[151] = 0x0002000202000000ULL;
        data[195] = 0x0202000200000000ULL;
        data[218] = 0x0202000200000000ULL;
        data[223] = 0x0002000202020000ULL;
        data[229] = 0x0002000200000000ULL;
        data[235] = 0x0202000200000000ULL;
        data[246] = 0x0002000202000000ULL;
        data[252] = 0x0002000200000000ULL;
        data[258] = 0x0202000200000000ULL;
        data[323] = 0x0002000200000000ULL;
        data[329] = 0x0202000200000000ULL;
        data[346] = 0x0002000200000000ULL;
        data[352] = 0x0202000200000000ULL;
        data[363] = 0x0002000200000000ULL;
        data[379] = 0x0202000202020200ULL;
        data[386] = 0x0002000200000000ULL;
        data[402] = 0x0202000202000000ULL;
        data[457] = 0x0002000200000000ULL;
        data[473] = 0x0202000202020000ULL;
        data[480] = 0x0002000200000000ULL;
        data[496] = 0x0202000202000000ULL;
        data[507] = 0x0002000202020200ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x0404000404040404ULL;
        data[3] = 0x0404000400000000ULL;
        data[35] = 0x0004000404000000ULL;
        data[46] = 0x0404000404000000ULL;
        data[134] = 0x0004000400000000ULL;
        data[145] = 0x0404000400000000ULL;
        data[177] = 0x0004000404040000ULL;
        data[180] = 0x0004000400000000ULL;
        data[189] = 0x0404000404040000ULL;
        data[191] = 0x0404000400000000ULL;
        data[202] = 0x0404000400000000ULL;
        data[213] = 0x0004000400000000ULL;
        data[223] = 0x0004000404000000ULL;
        data[235] = 0x0404000404000000ULL;
        data[245] = 0x0404000404040400ULL;
        data[247] = 0x0404000400000000ULL;
        data[257] = 0x0004000404040404ULL;
        data[259] = 0x0004000400000000ULL;
        data[291] = 0x0404000404000000ULL;
        data[302] = 0x0004000404000000ULL;
        data[390] = 0x0404000400000000ULL;
        data[401] = 0x0004000400000000ULL;
        data[433] = 0x0404000404040000ULL;
        data[436] = 0x0404000400000000ULL;
        data[445] = 0x0004000404040000ULL;
        data[447] = 0x0004000400000000ULL;
        data[458] = 0x0004000400000000ULL;
        data[469] = 0x0404000400000000ULL;
        data[479] = 0x0404000404000000ULL;
        data[491] = 0x0004000404000000ULL;
        data[501] = 0x0004000404040400ULL;
        data[503] = 0x0004000400000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0808000808080808ULL;
        data[23] = 0x0008000808080000ULL;
        data[30] = 0x0808000808000000ULL;
        data[49] = 0x0808000800000000ULL;
        data[56] = 0x0008000808080000ULL;
        data[83] = 0x0808000800000000ULL;
        data[119] = 0x0808000808080000ULL;
        data[152] = 0x0808000808080000ULL;
        data[191] = 0x0008000800000000ULL;
        data[225] = 0x0008000800000000ULL;
        data[261] = 0x0008000808000000ULL;
        data[287] = 0x0808000800000000ULL;
        data[294] = 0x0008000808000000ULL;
        data[314] = 0x0008000800000000ULL;
        data[321] = 0x0808000800000000ULL;
        data[343] = 0x0008000800000000ULL;
        data[347] = 0x0008000800000000ULL;
        data[357] = 0x0808000808000000ULL;
        data[376] = 0x0008000800000000ULL;
        data[383] = 0x0008000808080800ULL;
        data[390] = 0x0808000808000000ULL;
        data[410] = 0x0808000800000000ULL;
        data[412] = 0x0008000808000000ULL;
        data[417] = 0x0008000808080808ULL;
        data[439] = 0x0808000800000000ULL;
        data[443] = 0x0808000800000000ULL;
        data[446] = 0x0008000808000000ULL;
        data[465] = 0x0008000800000000ULL;
        data[472] = 0x0808000800000000ULL;
        data[479] = 0x0808000808080800ULL;
        data[499] = 0x0008000800000000ULL;
        data[508] = 0x0808000808000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [505]();
        data[1] = 0x1010001010101010ULL;
        data[9] = 0x0010001010000000ULL;
        data[45] = 0x0010001010100000ULL;
        data[59] = 0x1010001010000000ULL;
        data[62] = 0x1010001000000000ULL;
        data[76] = 0x0010001010000000ULL;
        data[98] = 0x1010001000000000ULL;
        data[112] = 0x0010001010100000ULL;
        data[115] = 0x0010001000000000ULL;
        data[129] = 0x1010001000000000ULL;
        data[165] = 0x1010001000000000ULL;
        data[173] = 0x0010001000000000ULL;
        data[182] = 0x0010001000000000ULL;
        data[201] = 0x1010001010000000ULL;
        data[237] = 0x1010001010100000ULL;
        data[240] = 0x0010001000000000ULL;
        data[254] = 0x0010001010101000ULL;
        data[268] = 0x1010001010000000ULL;
        data[304] = 0x1010001010100000ULL;
        data[307] = 0x1010001000000000ULL;
        data[312] = 0x0010001010000000ULL;
        data[321] = 0x0010001010101010ULL;
        data[365] = 0x1010001000000000ULL;
        data[374] = 0x1010001000000000ULL;
        data[379] = 0x0010001010000000ULL;
        data[382] = 0x0010001000000000ULL;
        data[418] = 0x0010001000000000ULL;
        data[432] = 0x1010001000000000ULL;
        data[446] = 0x1010001010101000ULL;
        data[449] = 0x0010001000000000ULL;
        data[485] = 0x0010001000000000ULL;
        data[504] = 0x1010001010000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x2020002020202020ULL;
        data[18] = 0x0020002020000000ULL;
        data[23] = 0x2020002020000000ULL;
        data[89] = 0x0020002020200000ULL;
        data[95] = 0x2020002020200000ULL;
        data[101] = 0x2020002000000000ULL;
        data[112] = 0x0020002020000000ULL;
        data[118] = 0x2020002020000000ULL;
        data[124] = 0x2020002000000000ULL;
        data[129] = 0x0020002020202020ULL;
        data[151] = 0x0020002020000000ULL;
        data[195] = 0x2020002000000000ULL;
        data[218] = 0x2020002000000000ULL;
        data[223] = 0x0020002020200000ULL;
        data[229] = 0x0020002000000000ULL;
        data[235] = 0x2020002000000000ULL;
        data[246] = 0x0020002020000000ULL;
        data[252] = 0x0020002000000000ULL;
        data[258] = 0x2020002000000000ULL;
        data[323] = 0x0020002000000000ULL;
        data[329] = 0x2020002000000000ULL;
        data[346] = 0x0020002000000000ULL;
        data[352] = 0x2020002000000000ULL;
        data[363] = 0x0020002000000000ULL;
        data[379] = 0x2020002020202000ULL;
        data[386] = 0x0020002000000000ULL;
        data[402] = 0x2020002020000000ULL;
        data[457] = 0x0020002000000000ULL;
        data[473] = 0x2020002020200000ULL;
        data[480] = 0x0020002000000000ULL;
        data[496] = 0x2020002020000000ULL;
        data[507] = 0x0020002020202000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [504]();
        data[1] = 0x4040004040404040ULL;
        data[3] = 0x4040004000000000ULL;
        data[35] = 0x0040004040000000ULL;
        data[46] = 0x4040004040000000ULL;
        data[134] = 0x0040004000000000ULL;
        data[145] = 0x4040004000000000ULL;
        data[177] = 0x0040004040400000ULL;
        data[180] = 0x0040004000000000ULL;
        data[189] = 0x4040004040400000ULL;
        data[191] = 0x4040004000000000ULL;
        data[202] = 0x4040004000000000ULL;
        data[213] = 0x0040004000000000ULL;
        data[223] = 0x0040004040000000ULL;
        data[235] = 0x4040004040000000ULL;
        data[245] = 0x4040004040404000ULL;
        data[247] = 0x4040004000000000ULL;
        data[257] = 0x0040004040404040ULL;
        data[259] = 0x0040004000000000ULL;
        data[291] = 0x4040004040000000ULL;
        data[302] = 0x0040004040000000ULL;
        data[390] = 0x4040004000000000ULL;
        data[401] = 0x0040004000000000ULL;
        data[433] = 0x4040004040400000ULL;
        data[436] = 0x4040004000000000ULL;
        data[445] = 0x0040004040400000ULL;
        data[447] = 0x0040004000000000ULL;
        data[458] = 0x0040004000000000ULL;
        data[469] = 0x4040004000000000ULL;
        data[479] = 0x4040004040000000ULL;
        data[491] = 0x0040004040000000ULL;
        data[501] = 0x0040004040404000ULL;
        data[503] = 0x0040004000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x8080008080808080ULL;
        data[18] = 0x0080008080000000ULL;
        data[23] = 0x8080008080000000ULL;
        data[89] = 0x0080008080800000ULL;
        data[95] = 0x8080008080800000ULL;
        data[101] = 0x8080008000000000ULL;
        data[112] = 0x0080008080000000ULL;
        data[118] = 0x8080008080000000ULL;
        data[124] = 0x8080008000000000ULL;
        data[129] = 0x0080008080808080ULL;
        data[151] = 0x0080008080000000ULL;
        data[195] = 0x8080008000000000ULL;
        data[218] = 0x8080008000000000ULL;
        data[223] = 0x0080008080800000ULL;
        data[229] = 0x0080008000000000ULL;
        data[235] = 0x8080008000000000ULL;
        data[246] = 0x0080008080000000ULL;
        data[252] = 0x0080008000000000ULL;
        data[258] = 0x8080008000000000ULL;
        data[323] = 0x0080008000000000ULL;
        data[329] = 0x8080008000000000ULL;
        data[346] = 0x0080008000000000ULL;
        data[352] = 0x8080008000000000ULL;
        data[363] = 0x0080008000000000ULL;
        data[379] = 0x8080008080808000ULL;
        data[386] = 0x0080008000000000ULL;
        data[402] = 0x8080008080000000ULL;
        data[457] = 0x0080008000000000ULL;
        data[473] = 0x8080008080800000ULL;
        data[480] = 0x0080008000000000ULL;
        data[496] = 0x8080008080000000ULL;
        data[507] = 0x0080008080808000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [486]();
        data[1] = 0x0100010101010101ULL;
        data[3] = 0x0100010000000000ULL;
        data[31] = 0x0100010100000000ULL;
        data[59] = 0x0100010101010000ULL;
        data[67] = 0x0100010100000000ULL;
        data[76] = 0x0100010000000000ULL;
        data[84] = 0x0100010000000000ULL;
        data[112] = 0x0100010000000000ULL;
        data[129] = 0x0100010101000000ULL;
        data[137] = 0x0100010100000000ULL;
        data[142] = 0x0100010000000000ULL;
        data[165] = 0x0100010101000000ULL;
        data[182] = 0x0100010000000000ULL;
        data[195] = 0x0100010100000000ULL;
        data[212] = 0x0100010000000000ULL;
        data[240] = 0x0100010000000000ULL;
        data[248] = 0x0100010000000000ULL;
        data[268] = 0x0100010101010000ULL;
        data[276] = 0x0100010100000000ULL;
        data[304] = 0x0100010101010100ULL;
        data[321] = 0x0100010000000000ULL;
        data[334] = 0x0100010100000000ULL;
        data[351] = 0x0100010000000000ULL;
        data[374] = 0x0100010101000000ULL;
        data[379] = 0x0100010000000000ULL;
        data[387] = 0x0100010000000000ULL;
        data[404] = 0x0100010100000000ULL;
        data[432] = 0x0100010101000000ULL;
        data[440] = 0x0100010100000000ULL;
        data[449] = 0x0100010000000000ULL;
        data[457] = 0x0100010000000000ULL;
        data[485] = 0x0100010000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0200020202020202ULL;
        data[6] = 0x0200020000000000ULL;
        data[23] = 0x0200020202020000ULL;
        data[39] = 0x0200020200000000ULL;
        data[62] = 0x0200020200000000ULL;
        data[95] = 0x0200020202020200ULL;
        data[118] = 0x0200020202020000ULL;
        data[129] = 0x0200020000000000ULL;
        data[133] = 0x0200020200000000ULL;
        data[151] = 0x0200020000000000ULL;
        data[156] = 0x0200020200000000ULL;
        data[167] = 0x0200020000000000ULL;
        data[190] = 0x0200020000000000ULL;
        data[223] = 0x0200020000000000ULL;
        data[235] = 0x0200020202000000ULL;
        data[246] = 0x0200020000000000ULL;
        data[258] = 0x0200020202000000ULL;
        data[261] = 0x0200020000000000ULL;
        data[273] = 0x0200020200000000ULL;
        data[284] = 0x0200020000000000ULL;
        data[296] = 0x0200020200000000ULL;
        data[329] = 0x0200020202000000ULL;
        data[352] = 0x0200020202000000ULL;
        data[363] = 0x0200020000000000ULL;
        data[367] = 0x0200020200000000ULL;
        data[386] = 0x0200020000000000ULL;
        data[390] = 0x0200020200000000ULL;
        data[401] = 0x0200020000000000ULL;
        data[424] = 0x0200020000000000ULL;
        data[457] = 0x0200020000000000ULL;
        data[480] = 0x0200020000000000ULL;
        data[495] = 0x0200020000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x0400040404040404ULL;
        data[3] = 0x0400040404000000ULL;
        data[10] = 0x0400040000000000ULL;
        data[12] = 0x0400040000000000ULL;
        data[34] = 0x0400040400000000ULL;
        data[46] = 0x0400040404040000ULL;
        data[56] = 0x0400040000000000ULL;
        data[78] = 0x0400040400000000ULL;
        data[80] = 0x0400040400000000ULL;
        data[123] = 0x0400040400000000ULL;
        data[145] = 0x0400040404000000ULL;
        data[189] = 0x0400040404040400ULL;
        data[191] = 0x0400040404000000ULL;
        data[213] = 0x0400040000000000ULL;
        data[222] = 0x0400040400000000ULL;
        data[235] = 0x0400040404040000ULL;
        data[257] = 0x0400040000000000ULL;
        data[259] = 0x0400040000000000ULL;
        data[266] = 0x0400040400000000ULL;
        data[268] = 0x0400040400000000ULL;
        data[290] = 0x0400040000000000ULL;
        data[302] = 0x0400040000000000ULL;
        data[312] = 0x0400040400000000ULL;
        data[334] = 0x0400040000000000ULL;
        data[336] = 0x0400040000000000ULL;
        data[379] = 0x0400040000000000ULL;
        data[401] = 0x0400040000000000ULL;
        data[445] = 0x0400040000000000ULL;
        data[447] = 0x0400040000000000ULL;
        data[469] = 0x0400040404000000ULL;
        data[478] = 0x0400040000000000ULL;
        data[491] = 0x0400040000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_5_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0800080808080808ULL;
        data[6] = 0x0800080000000000ULL;
        data[23] = 0x0800080808080000ULL;
        data[39] = 0x0800080800000000ULL;
        data[62] = 0x0800080800000000ULL;
        data[95] = 0x0800080808080800ULL;
        data[118] = 0x0800080808080000ULL;
        data[129] = 0x0800080000000000ULL;
        data[133] = 0x0800080800000000ULL;
        data[151] = 0x0800080000000000ULL;
        data[156] = 0x0800080800000000ULL;
        data[167] = 0x0800080000000000ULL;
        data[190] = 0x0800080000000000ULL;
        data[223] = 0x0800080000000000ULL;
        data[235] = 0x0800080808000000ULL;
        data[246] = 0x0800080000000000ULL;
        data[258] = 0x0800080808000000ULL;
        data[261] = 0x0800080000000000ULL;
        data[273] = 0x0800080800000000ULL;
        data[284] = 0x0800080000000000ULL;
        data[296] = 0x0800080800000000ULL;
        data[329] = 0x0800080808000000ULL;
        data[352] = 0x0800080808000000ULL;
        data[363] = 0x0800080000000000ULL;
        data[367] = 0x0800080800000000ULL;
        data[386] = 0x0800080000000000ULL;
        data[390] = 0x0800080800000000ULL;
        data[401] = 0x0800080000000000ULL;
        data[424] = 0x0800080000000000ULL;
        data[457] = 0x0800080000000000ULL;
        data[480] = 0x0800080000000000ULL;
        data[495] = 0x0800080000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_5_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x1000101010101010ULL;
        data[3] = 0x1000101010000000ULL;
        data[10] = 0x1000100000000000ULL;
        data[12] = 0x1000100000000000ULL;
        data[34] = 0x1000101000000000ULL;
        data[46] = 0x1000101010100000ULL;
        data[56] = 0x1000100000000000ULL;
        data[78] = 0x1000101000000000ULL;
        data[80] = 0x1000101000000000ULL;
        data[123] = 0x1000101000000000ULL;
        data[145] = 0x1000101010000000ULL;
        data[189] = 0x1000101010101000ULL;
        data[191] = 0x1000101010000000ULL;
        data[213] = 0x1000100000000000ULL;
        data[222] = 0x1000101000000000ULL;
        data[235] = 0x1000101010100000ULL;
        data[257] = 0x1000100000000000ULL;
        data[259] = 0x1000100000000000ULL;
        data[266] = 0x1000101000000000ULL;
        data[268] = 0x1000101000000000ULL;
        data[290] = 0x1000100000000000ULL;
        data[302] = 0x1000100000000000ULL;
        data[312] = 0x1000101000000000ULL;
        data[334] = 0x1000100000000000ULL;
        data[336] = 0x1000100000000000ULL;
        data[379] = 0x1000100000000000ULL;
        data[401] = 0x1000100000000000ULL;
        data[445] = 0x1000100000000000ULL;
        data[447] = 0x1000100000000000ULL;
        data[469] = 0x1000101010000000ULL;
        data[478] = 0x1000100000000000ULL;
        data[491] = 0x1000100000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x2000202020202020ULL;
        data[6] = 0x2000200000000000ULL;
        data[23] = 0x2000202020200000ULL;
        data[39] = 0x2000202000000000ULL;
        data[62] = 0x2000202000000000ULL;
        data[95] = 0x2000202020202000ULL;
        data[118] = 0x2000202020200000ULL;
        data[129] = 0x2000200000000000ULL;
        data[133] = 0x2000202000000000ULL;
        data[151] = 0x2000200000000000ULL;
        data[156] = 0x2000202000000000ULL;
        data[167] = 0x2000200000000000ULL;
        data[190] = 0x2000200000000000ULL;
        data[223] = 0x2000200000000000ULL;
        data[235] = 0x2000202020000000ULL;
        data[246] = 0x2000200000000000ULL;
        data[258] = 0x2000202020000000ULL;
        data[261] = 0x2000200000000000ULL;
        data[273] = 0x2000202000000000ULL;
        data[284] = 0x2000200000000000ULL;
        data[296] = 0x2000202000000000ULL;
        data[329] = 0x2000202020000000ULL;
        data[352] = 0x2000202020000000ULL;
        data[363] = 0x2000200000000000ULL;
        data[367] = 0x2000202000000000ULL;
        data[386] = 0x2000200000000000ULL;
        data[390] = 0x2000202000000000ULL;
        data[401] = 0x2000200000000000ULL;
        data[424] = 0x2000200000000000ULL;
        data[457] = 0x2000200000000000ULL;
        data[480] = 0x2000200000000000ULL;
        data[495] = 0x2000200000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [492]();
        data[1] = 0x4000404040404040ULL;
        data[3] = 0x4000404040000000ULL;
        data[10] = 0x4000400000000000ULL;
        data[12] = 0x4000400000000000ULL;
        data[34] = 0x4000404000000000ULL;
        data[46] = 0x4000404040400000ULL;
        data[56] = 0x4000400000000000ULL;
        data[78] = 0x4000404000000000ULL;
        data[80] = 0x4000404000000000ULL;
        data[123] = 0x4000404000000000ULL;
        data[145] = 0x4000404040000000ULL;
        data[189] = 0x4000404040404000ULL;
        data[191] = 0x4000404040000000ULL;
        data[213] = 0x4000400000000000ULL;
        data[222] = 0x4000404000000000ULL;
        data[235] = 0x4000404040400000ULL;
        data[257] = 0x4000400000000000ULL;
        data[259] = 0x4000400000000000ULL;
        data[266] = 0x4000404000000000ULL;
        data[268] = 0x4000404000000000ULL;
        data[290] = 0x4000400000000000ULL;
        data[302] = 0x4000400000000000ULL;
        data[312] = 0x4000404000000000ULL;
        data[334] = 0x4000400000000000ULL;
        data[336] = 0x4000400000000000ULL;
        data[379] = 0x4000400000000000ULL;
        data[401] = 0x4000400000000000ULL;
        data[445] = 0x4000400000000000ULL;
        data[447] = 0x4000400000000000ULL;
        data[469] = 0x4000404040000000ULL;
        data[478] = 0x4000400000000000ULL;
        data[491] = 0x4000400000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x8000808080808080ULL;
        data[6] = 0x8000800000000000ULL;
        data[23] = 0x8000808080800000ULL;
        data[39] = 0x8000808000000000ULL;
        data[62] = 0x8000808000000000ULL;
        data[95] = 0x8000808080808000ULL;
        data[118] = 0x8000808080800000ULL;
        data[129] = 0x8000800000000000ULL;
        data[133] = 0x8000808000000000ULL;
        data[151] = 0x8000800000000000ULL;
        data[156] = 0x8000808000000000ULL;
        data[167] = 0x8000800000000000ULL;
        data[190] = 0x8000800000000000ULL;
        data[223] = 0x8000800000000000ULL;
        data[235] = 0x8000808080000000ULL;
        data[246] = 0x8000800000000000ULL;
        data[258] = 0x8000808080000000ULL;
        data[261] = 0x8000800000000000ULL;
        data[273] = 0x8000808000000000ULL;
        data[284] = 0x8000800000000000ULL;
        data[296] = 0x8000808000000000ULL;
        data[329] = 0x8000808080000000ULL;
        data[352] = 0x8000808080000000ULL;
        data[363] = 0x8000800000000000ULL;
        data[367] = 0x8000808000000000ULL;
        data[386] = 0x8000800000000000ULL;
        data[390] = 0x8000808000000000ULL;
        data[401] = 0x8000800000000000ULL;
        data[424] = 0x8000800000000000ULL;
        data[457] = 0x8000800000000000ULL;
        data[480] = 0x8000800000000000ULL;
        data[495] = 0x8000800000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_21_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [498]();
        data[1] = 0x0001010101010101ULL;
        data[2] = 0x0001000000000000ULL;
        data[18] = 0x0001000000000000ULL;
        data[25] = 0x0001010000000000ULL;
        data[35] = 0x0001000000000000ULL;
        data[42] = 0x0001010000000000ULL;
        data[46] = 0x0001000000000000ULL;
        data[62] = 0x0001010000000000ULL;
        data[63] = 0x0001000000000000ULL;
        data[67] = 0x0001000000000000ULL;
        data[79] = 0x0001010000000000ULL;
        data[84] = 0x0001000000000000ULL;
        data[123] = 0x0001010000000000ULL;
        data[128] = 0x0001000000000000ULL;
        data[140] = 0x0001010000000000ULL;
        data[144] = 0x0001010000000000ULL;
        data[145] = 0x0001000000000000ULL;
        data[161] = 0x0001010000000000ULL;
        data[165] = 0x0001000000000000ULL;
        data[172] = 0x0001010100000000ULL;
        data[182] = 0x0001000000000000ULL;
        data[189] = 0x0001010100000000ULL;
        data[205] = 0x0001010000000000ULL;
        data[206] = 0x0001000000000000ULL;
        data[222] = 0x0001010000000000ULL;
        data[223] = 0x0001000000000000ULL;
        data[227] = 0x0001000000000000ULL;
        data[233] = 0x0001010101000000ULL;
        data[243] = 0x0001000000000000ULL;
        data[247] = 0x0001000000000000ULL;
        data[250] = 0x0001010101000000ULL;
        data[254] = 0x0001010100000000ULL;
        data[264] = 0x0001000000000000ULL;
        data[268] = 0x0001000000000000ULL;
        data[271] = 0x0001010100000000ULL;
        data[284] = 0x0001000000000000ULL;
        data[289] = 0x0001000000000000ULL;
        data[305] = 0x0001000000000000ULL;
        data[309] = 0x0001000000000000ULL;
        data[316] = 0x0001010101000000ULL;
        data[325] = 0x0001000000000000ULL;
        data[332] = 0x0001010101000000ULL;
        data[350] = 0x0001000000000000ULL;
        data[353] = 0x0001010100000000ULL;
        data[366] = 0x0001000000000000ULL;
        data[369] = 0x0001010100000000ULL;
        data[387] = 0x0001000000000000ULL;
        data[394] = 0x0001010000000000ULL;
        data[403] = 0x0001000000000000ULL;
        data[410] = 0x0001010000000000ULL;
        data[414] = 0x0001010101010000ULL;
        data[430] = 0x0001010101010100ULL;
        data[435] = 0x0001010100000000ULL;
        data[448] = 0x0001000000000000ULL;
        data[451] = 0x0001010100000000ULL;
        data[455] = 0x0001010000000000ULL;
        data[465] = 0x0001000000000000ULL;
        data[469] = 0x0001000000000000ULL;
        data[471] = 0x0001010000000000ULL;
        data[476] = 0x0001010000000000ULL;
        data[485] = 0x0001000000000000ULL;
        data[492] = 0x0001010000000000ULL;
        data[496] = 0x0001010101010000ULL;
        data[497] = 0x0001000000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0002020202020202ULL;
        data[6] = 0x0002000000000000ULL;
        data[18] = 0x0002000000000000ULL;
        data[22] = 0x0002020000000000ULL;
        data[23] = 0x0002020202000000ULL;
        data[33] = 0x0002000000000000ULL;
        data[39] = 0x0002020000000000ULL;
        data[56] = 0x0002000000000000ULL;
        data[62] = 0x0002020000000000ULL;
        data[89] = 0x0002000000000000ULL;
        data[95] = 0x0002020202020000ULL;
        data[101] = 0x0002020200000000ULL;
        data[112] = 0x0002000000000000ULL;
        data[118] = 0x0002020202000000ULL;
        data[124] = 0x0002020200000000ULL;
        data[127] = 0x0002000000000000ULL;
        data[129] = 0x0002000000000000ULL;
        data[133] = 0x0002020000000000ULL;
        data[140] = 0x0002020000000000ULL;
        data[150] = 0x0002000000000000ULL;
        data[151] = 0x0002000000000000ULL;
        data[156] = 0x0002020000000000ULL;
        data[162] = 0x0002020000000000ULL;
        data[167] = 0x0002000000000000ULL;
        data[190] = 0x0002000000000000ULL;
        data[195] = 0x0002020200000000ULL;
        data[218] = 0x0002020200000000ULL;
        data[223] = 0x0002000000000000ULL;
        data[229] = 0x0002000000000000ULL;
        data[234] = 0x0002020000000000ULL;
        data[235] = 0x0002020200000000ULL;
        data[246] = 0x0002000000000000ULL;
        data[252] = 0x0002000000000000ULL;
        data[257] = 0x0002020000000000ULL;
        data[258] = 0x0002020200000000ULL;
        data[261] = 0x0002000000000000ULL;
        data[268] = 0x0002000000000000ULL;
        data[273] = 0x0002020000000000ULL;
        data[284] = 0x0002000000000000ULL;
        data[290] = 0x0002000000000000ULL;
        data[296] = 0x0002020000000000ULL;
        data[323] = 0x0002000000000000ULL;
        data[329] = 0x0002020200000000ULL;
        data[346] = 0x0002000000000000ULL;
        data[352] = 0x0002020200000000ULL;
        data[362] = 0x0002000000000000ULL;
        data[363] = 0x0002000000000000ULL;
        data[367] = 0x0002020000000000ULL;
        data[379] = 0x0002020202020200ULL;
        data[385] = 0x0002000000000000ULL;
        data[386] = 0x0002000000000000ULL;
        data[390] = 0x0002020000000000ULL;
        data[401] = 0x0002000000000000ULL;
        data[402] = 0x0002020202000000ULL;
        data[417] = 0x0002020000000000ULL;
        data[424] = 0x0002000000000000ULL;
        data[440] = 0x0002020000000000ULL;
        data[457] = 0x0002000000000000ULL;
        data[473] = 0x0002020202020000ULL;
        data[480] = 0x0002000000000000ULL;
        data[495] = 0x0002000000000000ULL;
        data[496] = 0x0002020202000000ULL;
        data[507] = 0x0002000000000000ULL;
        data[511] = 0x0002020000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_9_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0004040404040404ULL;
        data[4] = 0x0004000000000000ULL;
        data[12] = 0x0004000000000000ULL;
        data[20] = 0x0004040404040000ULL;
        data[34] = 0x0004040000000000ULL;
        data[40] = 0x0004000000000000ULL;
        data[42] = 0x0004000000000000ULL;
        data[54] = 0x0004040000000000ULL;
        data[59] = 0x0004000000000000ULL;
        data[61] = 0x0004000000000000ULL;
        data[81] = 0x0004040400000000ULL;
        data[94] = 0x0004000000000000ULL;
        data[98] = 0x0004000000000000ULL;
        data[101] = 0x0004040400000000ULL;
        data[113] = 0x0004000000000000ULL;
        data[117] = 0x0004000000000000ULL;
        data[135] = 0x0004040000000000ULL;
        data[139] = 0x0004040400000000ULL;
        data[152] = 0x0004000000000000ULL;
        data[155] = 0x0004040000000000ULL;
        data[159] = 0x0004040400000000ULL;
        data[171] = 0x0004000000000000ULL;
        data[191] = 0x0004040000000000ULL;
        data[193] = 0x0004040000000000ULL;
        data[199] = 0x0004000000000000ULL;
        data[210] = 0x0004040000000000ULL;
        data[212] = 0x0004040000000000ULL;
        data[218] = 0x0004000000000000ULL;
        data[232] = 0x0004000000000000ULL;
        data[240] = 0x0004040400000000ULL;
        data[249] = 0x0004040000000000ULL;
        data[252] = 0x0004000000000000ULL;
        data[257] = 0x0004000000000000ULL;
        data[260] = 0x0004040400000000ULL;
        data[268] = 0x0004040000000000ULL;
        data[276] = 0x0004000000000000ULL;
        data[290] = 0x0004000000000000ULL;
        data[296] = 0x0004040404000000ULL;
        data[298] = 0x0004040400000000ULL;
        data[310] = 0x0004000000000000ULL;
        data[315] = 0x0004040404000000ULL;
        data[317] = 0x0004040400000000ULL;
        data[337] = 0x0004000000000000ULL;
        data[350] = 0x0004040000000000ULL;
        data[354] = 0x0004040404000000ULL;
        data[357] = 0x0004000000000000ULL;
        data[369] = 0x0004040000000000ULL;
        data[373] = 0x0004040404000000ULL;
        data[391] = 0x0004000000000000ULL;
        data[395] = 0x0004000000000000ULL;
        data[408] = 0x0004040000000000ULL;
        data[411] = 0x0004000000000000ULL;
        data[415] = 0x0004000000000000ULL;
        data[427] = 0x0004040000000000ULL;
        data[447] = 0x0004000000000000ULL;
        data[449] = 0x0004000000000000ULL;
        data[455] = 0x0004040404040400ULL;
        data[466] = 0x0004000000000000ULL;
        data[468] = 0x0004000000000000ULL;
        data[474] = 0x0004040404040000ULL;
        data[488] = 0x0004040000000000ULL;
        data[496] = 0x0004000000000000ULL;
        data[505] = 0x0004000000000000ULL;
        data[508] = 0x0004040000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0008080808080808ULL;
        data[2] = 0x0008000000000000ULL;
        data[9] = 0x0008000000000000ULL;
        data[16] = 0x0008080000000000ULL;
        data[23] = 0x0008000000000000ULL;
        data[30] = 0x0008080808000000ULL;
        data[35] = 0x0008080000000000ULL;
        data[38] = 0x0008000000000000ULL;
        data[42] = 0x0008000000000000ULL;
        data[49] = 0x0008080800000000ULL;
        data[56] = 0x0008000000000000ULL;
        data[65] = 0x0008080000000000ULL;
        data[69] = 0x0008080000000000ULL;
        data[71] = 0x0008000000000000ULL;
        data[83] = 0x0008080800000000ULL;
        data[91] = 0x0008000000000000ULL;
        data[98] = 0x0008080000000000ULL;
        data[105] = 0x0008080000000000ULL;
        data[119] = 0x0008080808080000ULL;
        data[124] = 0x0008000000000000ULL;
        data[134] = 0x0008080000000000ULL;
        data[138] = 0x0008080000000000ULL;
        data[152] = 0x0008080808080000ULL;
        data[160] = 0x0008000000000000ULL;
        data[167] = 0x0008080000000000ULL;
        data[187] = 0x0008080000000000ULL;
        data[191] = 0x0008000000000000ULL;
        data[194] = 0x0008000000000000ULL;
        data[220] = 0x0008080000000000ULL;
        data[225] = 0x0008000000000000ULL;
        data[256] = 0x0008080000000000ULL;
        data[261] = 0x0008000000000000ULL;
        data[287] = 0x0008080800000000ULL;
        data[290] = 0x0008080000000000ULL;
        data[294] = 0x0008000000000000ULL;
        data[314] = 0x0008000000000000ULL;
        data[321] = 0x0008080800000000ULL;
        data[329] = 0x0008000000000000ULL;
        data[343] = 0x0008000000000000ULL;
        data[347] = 0x0008000000000000ULL;
        data[357] = 0x0008080808000000ULL;
        data[362] = 0x0008000000000000ULL;
        data[376] = 0x0008000000000000ULL;
        data[383] = 0x0008000000000000ULL;
        data[390] = 0x0008080808000000ULL;
        data[398] = 0x0008000000000000ULL;
        data[410] = 0x0008080800000000ULL;
        data[412] = 0x0008000000000000ULL;
        data[417] = 0x0008000000000000ULL;
        data[425] = 0x0008080000000000ULL;
        data[432] = 0x0008000000000000ULL;
        data[439] = 0x0008080800000000ULL;
        data[443] = 0x0008080800000000ULL;
        data[446] = 0x0008000000000000ULL;
        data[451] = 0x0008000000000000ULL;
        data[458] = 0x0008080000000000ULL;
        data[465] = 0x0008000000000000ULL;
        data[472] = 0x0008080800000000ULL;
        data[479] = 0x0008080808080800ULL;
        data[481] = 0x0008000000000000ULL;
        data[485] = 0x0008000000000000ULL;
        data[494] = 0x0008080000000000ULL;
        data[499] = 0x0008000000000000ULL;
        data[508] = 0x0008080808000000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x0010101010101010ULL;
        data[4] = 0x0010000000000000ULL;
        data[12] = 0x0010000000000000ULL;
        data[20] = 0x0010101010100000ULL;
        data[34] = 0x0010100000000000ULL;
        data[40] = 0x0010000000000000ULL;
        data[42] = 0x0010000000000000ULL;
        data[54] = 0x0010100000000000ULL;
        data[59] = 0x0010000000000000ULL;
        data[61] = 0x0010000000000000ULL;
        data[81] = 0x0010101000000000ULL;
        data[94] = 0x0010000000000000ULL;
        data[98] = 0x0010000000000000ULL;
        data[101] = 0x0010101000000000ULL;
        data[113] = 0x0010000000000000ULL;
        data[117] = 0x0010000000000000ULL;
        data[135] = 0x0010100000000000ULL;
        data[139] = 0x0010101000000000ULL;
        data[152] = 0x0010000000000000ULL;
        data[155] = 0x0010100000000000ULL;
        data[159] = 0x0010101000000000ULL;
        data[171] = 0x0010000000000000ULL;
        data[191] = 0x0010100000000000ULL;
        data[193] = 0x0010100000000000ULL;
        data[199] = 0x0010000000000000ULL;
        data[210] = 0x0010100000000000ULL;
        data[212] = 0x0010100000000000ULL;
        data[218] = 0x0010000000000000ULL;
        data[232] = 0x0010000000000000ULL;
        data[240] = 0x0010101000000000ULL;
        data[249] = 0x0010100000000000ULL;
        data[252] = 0x0010000000000000ULL;
        data[257] = 0x0010000000000000ULL;
        data[260] = 0x0010101000000000ULL;
        data[268] = 0x0010100000000000ULL;
        data[276] = 0x0010000000000000ULL;
        data[290] = 0x0010000000000000ULL;
        data[296] = 0x0010101010000000ULL;
        data[298] = 0x0010101000000000ULL;
        data[310] = 0x0010000000000000ULL;
        data[315] = 0x0010101010000000ULL;
        data[317] = 0x0010101000000000ULL;
        data[337] = 0x0010000000000000ULL;
        data[350] = 0x0010100000000000ULL;
        data[354] = 0x0010101010000000ULL;
        data[357] = 0x0010000000000000ULL;
        data[369] = 0x0010100000000000ULL;
        data[373] = 0x0010101010000000ULL;
        data[391] = 0x0010000000000000ULL;
        data[395] = 0x0010000000000000ULL;
        data[408] = 0x0010100000000000ULL;
        data[411] = 0x0010000000000000ULL;
        data[415] = 0x0010000000000000ULL;
        data[427] = 0x0010100000000000ULL;
        data[447] = 0x0010000000000000ULL;
        data[449] = 0x0010000000000000ULL;
        data[455] = 0x0010101010101000ULL;
        data[466] = 0x0010000000000000ULL;
        data[468] = 0x0010000000000000ULL;
        data[474] = 0x0010101010100000ULL;
        data[488] = 0x0010100000000000ULL;
        data[496] = 0x0010000000000000ULL;
        data[505] = 0x0010000000000000ULL;
        data[508] = 0x0010100000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0020202020202020ULL;
        data[6] = 0x0020000000000000ULL;
        data[18] = 0x0020000000000000ULL;
        data[22] = 0x0020200000000000ULL;
        data[23] = 0x0020202020000000ULL;
        data[33] = 0x0020000000000000ULL;
        data[39] = 0x0020200000000000ULL;
        data[56] = 0x0020000000000000ULL;
        data[62] = 0x0020200000000000ULL;
        data[89] = 0x0020000000000000ULL;
        data[95] = 0x0020202020200000ULL;
        data[101] = 0x0020202000000000ULL;
        data[112] = 0x0020000000000000ULL;
        data[118] = 0x0020202020000000ULL;
        data[124] = 0x0020202000000000ULL;
        data[127] = 0x0020000000000000ULL;
        data[129] = 0x0020000000000000ULL;
        data[133] = 0x0020200000000000ULL;
        data[140] = 0x0020200000000000ULL;
        data[150] = 0x0020000000000000ULL;
        data[151] = 0x0020000000000000ULL;
        data[156] = 0x0020200000000000ULL;
        data[162] = 0x0020200000000000ULL;
        data[167] = 0x0020000000000000ULL;
        data[190] = 0x0020000000000000ULL;
        data[195] = 0x0020202000000000ULL;
        data[218] = 0x0020202000000000ULL;
        data[223] = 0x0020000000000000ULL;
        data[229] = 0x0020000000000000ULL;
        data[234] = 0x0020200000000000ULL;
        data[235] = 0x0020202000000000ULL;
        data[246] = 0x0020000000000000ULL;
        data[252] = 0x0020000000000000ULL;
        data[257] = 0x0020200000000000ULL;
        data[258] = 0x0020202000000000ULL;
        data[261] = 0x0020000000000000ULL;
        data[268] = 0x0020000000000000ULL;
        data[273] = 0x0020200000000000ULL;
        data[284] = 0x0020000000000000ULL;
        data[290] = 0x0020000000000000ULL;
        data[296] = 0x0020200000000000ULL;
        data[323] = 0x0020000000000000ULL;
        data[329] = 0x0020202000000000ULL;
        data[346] = 0x0020000000000000ULL;
        data[352] = 0x0020202000000000ULL;
        data[362] = 0x0020000000000000ULL;
        data[363] = 0x0020000000000000ULL;
        data[367] = 0x0020200000000000ULL;
        data[379] = 0x0020202020202000ULL;
        data[385] = 0x0020000000000000ULL;
        data[386] = 0x0020000000000000ULL;
        data[390] = 0x0020200000000000ULL;
        data[401] = 0x0020000000000000ULL;
        data[402] = 0x0020202020000000ULL;
        data[417] = 0x0020200000000000ULL;
        data[424] = 0x0020000000000000ULL;
        data[440] = 0x0020200000000000ULL;
        data[457] = 0x0020000000000000ULL;
        data[473] = 0x0020202020200000ULL;
        data[480] = 0x0020000000000000ULL;
        data[495] = 0x0020000000000000ULL;
        data[496] = 0x0020202020000000ULL;
        data[507] = 0x0020000000000000ULL;
        data[511] = 0x0020200000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [502]();
        data[1] = 0x0040404040404040ULL;
        data[10] = 0x0040000000000000ULL;
        data[11] = 0x0040000000000000ULL;
        data[26] = 0x0040404000000000ULL;
        data[30] = 0x0040000000000000ULL;
        data[34] = 0x0040400000000000ULL;
        data[38] = 0x0040000000000000ULL;
        data[53] = 0x0040400000000000ULL;
        data[63] = 0x0040000000000000ULL;
        data[74] = 0x0040404040000000ULL;
        data[75] = 0x0040404000000000ULL;
        data[85] = 0x0040000000000000ULL;
        data[94] = 0x0040404040000000ULL;
        data[102] = 0x0040400000000000ULL;
        data[104] = 0x0040000000000000ULL;
        data[112] = 0x0040000000000000ULL;
        data[113] = 0x0040000000000000ULL;
        data[127] = 0x0040400000000000ULL;
        data[131] = 0x0040000000000000ULL;
        data[149] = 0x0040404000000000ULL;
        data[153] = 0x0040000000000000ULL;
        data[168] = 0x0040404000000000ULL;
        data[176] = 0x0040400000000000ULL;
        data[177] = 0x0040400000000000ULL;
        data[183] = 0x0040000000000000ULL;
        data[186] = 0x0040000000000000ULL;
        data[195] = 0x0040400000000000ULL;
        data[206] = 0x0040000000000000ULL;
        data[217] = 0x0040404040000000ULL;
        data[227] = 0x0040000000000000ULL;
        data[247] = 0x0040404040400000ULL;
        data[250] = 0x0040400000000000ULL;
        data[255] = 0x0040000000000000ULL;
        data[257] = 0x0040000000000000ULL;
        data[270] = 0x0040400000000000ULL;
        data[285] = 0x0040000000000000ULL;
        data[291] = 0x0040404000000000ULL;
        data[306] = 0x0040000000000000ULL;
        data[319] = 0x0040400000000000ULL;
        data[321] = 0x0040404000000000ULL;
        data[325] = 0x0040000000000000ULL;
        data[329] = 0x0040000000000000ULL;
        data[349] = 0x0040400000000000ULL;
        data[359] = 0x0040000000000000ULL;
        data[370] = 0x0040404040404000ULL;
        data[380] = 0x0040000000000000ULL;
        data[389] = 0x0040404040400000ULL;
        data[393] = 0x0040400000000000ULL;
        data[399] = 0x0040000000000000ULL;
        data[400] = 0x0040000000000000ULL;
        data[408] = 0x0040000000000000ULL;
        data[423] = 0x0040400000000000ULL;
        data[427] = 0x0040000000000000ULL;
        data[444] = 0x0040404000000000ULL;
        data[449] = 0x0040000000000000ULL;
        data[463] = 0x0040404040000000ULL;
        data[464] = 0x0040404000000000ULL;
        data[472] = 0x0040400000000000ULL;
        data[474] = 0x0040000000000000ULL;
        data[482] = 0x0040000000000000ULL;
        data[491] = 0x0040400000000000ULL;
        data[501] = 0x0040000000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0080808080808080ULL;
        data[6] = 0x0080000000000000ULL;
        data[18] = 0x0080000000000000ULL;
        data[22] = 0x0080800000000000ULL;
        data[23] = 0x0080808080000000ULL;
        data[33] = 0x0080000000000000ULL;
        data[39] = 0x0080800000000000ULL;
        data[56] = 0x0080000000000000ULL;
        data[62] = 0x0080800000000000ULL;
        data[89] = 0x0080000000000000ULL;
        data[95] = 0x0080808080800000ULL;
        data[101] = 0x0080808000000000ULL;
        data[112] = 0x0080000000000000ULL;
        data[118] = 0x0080808080000000ULL;
        data[124] = 0x0080808000000000ULL;
        data[127] = 0x0080000000000000ULL;
        data[129] = 0x0080000000000000ULL;
        data[133] = 0x0080800000000000ULL;
        data[140] = 0x0080800000000000ULL;
        data[150] = 0x0080000000000000ULL;
        data[151] = 0x0080000000000000ULL;
        data[156] = 0x0080800000000000ULL;
        data[162] = 0x0080800000000000ULL;
        data[167] = 0x0080000000000000ULL;
        data[190] = 0x0080000000000000ULL;
        data[195] = 0x0080808000000000ULL;
        data[218] = 0x0080808000000000ULL;
        data[223] = 0x0080000000000000ULL;
        data[229] = 0x0080000000000000ULL;
        data[234] = 0x0080800000000000ULL;
        data[235] = 0x0080808000000000ULL;
        data[246] = 0x0080000000000000ULL;
        data[252] = 0x0080000000000000ULL;
        data[257] = 0x0080800000000000ULL;
        data[258] = 0x0080808000000000ULL;
        data[261] = 0x0080000000000000ULL;
        data[268] = 0x0080000000000000ULL;
        data[273] = 0x0080800000000000ULL;
        data[284] = 0x0080000000000000ULL;
        data[290] = 0x0080000000000000ULL;
        data[296] = 0x0080800000000000ULL;
        data[323] = 0x0080000000000000ULL;
        data[329] = 0x0080808000000000ULL;
        data[346] = 0x0080000000000000ULL;
        data[352] = 0x0080808000000000ULL;
        data[362] = 0x0080000000000000ULL;
        data[363] = 0x0080000000000000ULL;
        data[367] = 0x0080800000000000ULL;
        data[379] = 0x0080808080808000ULL;
        data[385] = 0x0080000000000000ULL;
        data[386] = 0x0080000000000000ULL;
        data[390] = 0x0080800000000000ULL;
        data[401] = 0x0080000000000000ULL;
        data[402] = 0x0080808080000000ULL;
        data[417] = 0x0080800000000000ULL;
        data[424] = 0x0080000000000000ULL;
        data[440] = 0x0080800000000000ULL;
        data[457] = 0x0080000000000000ULL;
        data[473] = 0x0080808080800000ULL;
        data[480] = 0x0080000000000000ULL;
        data[495] = 0x0080000000000000ULL;
        data[496] = 0x0080808080000000ULL;
        data[507] = 0x0080000000000000ULL;
        data[511] = 0x0080800000000000ULL;
    }),
};

const ::chess::AttackTable BB_RANK_ATTACKS[64] = {
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x00000000000000feULL;
        data[2] = 0x0000000000000002ULL;
        data[3] = 0x0000000000000006ULL;
        data[4] = 0x0000000000000002ULL;
        data[5] = 0x000000000000000eULL;
        data[6] = 0x0000000000000002ULL;
        data[7] = 0x0000000000000006ULL;
        data[8] = 0x0000000000000002ULL;
        data[9] = 0x000000000000001eULL;
        data[10] = 0x0000000000000002ULL;
        data[11] = 0x0000000000000006ULL;
        data[12] = 0x0000000000000002ULL;
        data[13] = 0x000000000000000eULL;
        data[14] = 0x0000000000000002ULL;
        data[15] = 0x0000000000000006ULL;
        data[16] = 0x0000000000000002ULL;
        data[17] = 0x000000000000003eULL;
        data[18] = 0x0000000000000002ULL;
        data[19] = 0x0000000000000006ULL;
        data[20] = 0x0000000000000002ULL;
        data[21] = 0x000000000000000eULL;
        data[22] = 0x0000000000000002ULL;
        data[23] = 0x0000000000000006ULL;
        data[24] = 0x0000000000000002ULL;
        data[25] = 0x000000000000001eULL;
        data[26] = 0x0000000000000002ULL;
        data[27] = 0x0000000000000006ULL;
        data[28] = 0x0000000000000002ULL;
        data[29] = 0x000000000000000eULL;
        data[30] = 0x0000000000000002ULL;
        data[31] = 0x0000000000000006ULL;
        data[32] = 0x0000000000000002ULL;
        data[33] = 0x000000000000007eULL;
        data[34] = 0x0000000000000002ULL;
        data[35] = 0x0000000000000006ULL;
        data[36] = 0x0000000000000002ULL;
        data[37] = 0x000000000000000eULL;
        data[38] = 0x0000000000000002ULL;
        data[39] = 0x0000000000000006ULL;
        data[40] = 0x0000000000000002ULL;
        data[41] = 0x000000000000001eULL;
        data[42] = 0x0000000000000002ULL;
        data[43] = 0x0000000000000006ULL;
        data[44] = 0x0000000000000002ULL;
        data[45] = 0x000000000000000eULL;
        data[46] = 0x0000000000000002ULL;
        data[47] = 0x0000000000000006ULL;
        data[48] = 0x0000000000000002ULL;
        data[49] = 0x000000000000003eULL;
        data[50] = 0x0000000000000002ULL;
        data[51] = 0x0000000000000006ULL;
        data[52] = 0x0000000000000002ULL;
        data[53] = 0x000000000000000eULL;
        data[54] = 0x0000000000000002ULL;
        data[55] = 0x0000000000000006ULL;
        data[56] = 0x0000000000000002ULL;
        data[57] = 0x000000000000001eULL;
        data[58] = 0x0000000000000002ULL;
        data[59] = 0x0000000000000006ULL;
        data[60] = 0x0000000000000002ULL;
        data[61] = 0x000000000000000eULL;
        data[62] = 0x0000000000000002ULL;
        data[63] = 0x0000000000000006ULL;
        data[64] = 0x0000000000000002ULL;
    }),
    ::chess::AttackTable(RightShift<2>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00000000000000fdULL;
        data[2] = 0x0000000000000005ULL;
        data[3] = 0x000000000000000dULL;
        data[4] = 0x0000000000000005ULL;
        data[5] = 0x000000000000001dULL;
        data[6] = 0x0000000000000005ULL;
        data[7] = 0x000000000000000dULL;
        data[8] = 0x0000000000000005ULL;
        data[9] = 0x000000000000003dULL;
        data[10] = 0x0000000000000005ULL;
        data[11] = 0x000000000000000dULL;
        data[12] = 0x0000000000000005ULL;
        data[13] = 0x000000000000001dULL;
        data[14] = 0x0000000000000005ULL;
        data[15] = 0x000000000000000dULL;
        data[16] = 0x0000000000000005ULL;
        data[17] = 0x000000000000007dULL;
        data[18] = 0x0000000000000005ULL;
        data[19] = 0x000000000000000dULL;
        data[20] = 0x0000000000000005ULL;
        data[21] = 0x000000000000001dULL;
        data[22] = 0x0000000000000005ULL;
        data[23] = 0x000000000000000dULL;
        data[24] = 0x0000000000000005ULL;
        data[25] = 0x000000000000003dULL;
        data[26] = 0x0000000000000005ULL;
        data[27] = 0x000000000000000dULL;
        data[28] = 0x0000000000000005ULL;
        data[29] = 0x000000000000001dULL;
        data[30] = 0x0000000000000005ULL;
        data[31] = 0x000000000000000dULL;
        data[32] = 0x0000000000000005ULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x00000000000000fbULL;
        data[2] = 0x00000000000000faULL;
        data[5] = 0x000000000000000bULL;
        data[6] = 0x000000000000000aULL;
        data[9] = 0x000000000000001bULL;
        data[10] = 0x000000000000001aULL;
        data[13] = 0x000000000000000bULL;
        data[14] = 0x000000000000000aULL;
        data[17] = 0x000000000000003bULL;
        data[18] = 0x000000000000003aULL;
        data[21] = 0x000000000000000bULL;
        data[22] = 0x000000000000000aULL;
        data[25] = 0x000000000000001bULL;
        data[26] = 0x000000000000001aULL;
        data[29] = 0x000000000000000bULL;
        data[30] = 0x000000000000000aULL;
        data[33] = 0x000000000000007bULL;
        data[34] = 0x000000000000007aULL;
        data[37] = 0x000000000000000bULL;
        data[38] = 0x000000000000000aULL;
        data[41] = 0x000000000000001bULL;
        data[42] = 0x000000000000001aULL;
        data[45] = 0x000000000000000bULL;
        data[46] = 0x000000000000000aULL;
        data[49] = 0x000000000000003bULL;
        data[50] = 0x000000000000003aULL;
        data[53] = 0x000000000000000bULL;
        data[54] = 0x000000000000000aULL;
        data[57] = 0x000000000000001bULL;
        data[58] = 0x000000000000001aULL;
        data[61] = 0x000000000000000bULL;
        data[62] = 0x000000000000000aULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x00000000000000f7ULL;
        data[2] = 0x00000000000000f6ULL;
        data[3] = 0x00000000000000f4ULL;
        data[4] = 0x00000000000000f4ULL;
        data[9] = 0x0000000000000017ULL;
        data[10] = 0x0000000000000016ULL;
        data[11] = 0x0000000000000014ULL;
        data[12] = 0x0000000000000014ULL;
        data[17] = 0x0000000000000037ULL;
        data[18] = 0x0000000000000036ULL;
        data[19] = 0x0000000000000034ULL;
        data[20] = 0x0000000000000034ULL;
        data[25] = 0x0000000000000017ULL;
        data[26] = 0x0000000000000016ULL;
        data[27] = 0x0000000000000014ULL;
        data[28] = 0x0000000000000014ULL;
        data[33] = 0x0000000000000077ULL;
        data[34] = 0x0000000000000076ULL;
        data[35] = 0x0000000000000074ULL;
        data[36] = 0x0000000000000074ULL;
        data[41] = 0x0000000000000017ULL;
        data[42] = 0x0000000000000016ULL;
        data[43] = 0x0000000000000014ULL;
        data[44] = 0x0000000000000014ULL;
        data[49] = 0x0000000000000037ULL;
        data[50] = 0x0000000000000036ULL;
        data[51] = 0x0000000000000034ULL;
        data[52] = 0x0000000000000034ULL;
        data[57] = 0x0000000000000017ULL;
        data[58] = 0x0000000000000016ULL;
        data[59] = 0x0000000000000014ULL;
        data[60] = 0x0000000000000014ULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x00000000000000efULL;
        data[2] = 0x00000000000000eeULL;
        data[3] = 0x00000000000000ecULL;
        data[4] = 0x00000000000000ecULL;
        data[5] = 0x00000000000000e8ULL;
        data[6] = 0x00000000000000e8ULL;
        data[7] = 0x00000000000000e8ULL;
        data[8] = 0x00000000000000e8ULL;
        data[17] = 0x000000000000002fULL;
        data[18] = 0x000000000000002eULL;
        data[19] = 0x000000000000002cULL;
        data[20] = 0x000000000000002cULL;
        data[21] = 0x0000000000000028ULL;
        data[22] = 0x0000000000000028ULL;
        data[23] = 0x0000000000000028ULL;
        data[24] = 0x0000000000000028ULL;
        data[33] = 0x000000000000006fULL;
        data[34] = 0x000000000000006eULL;
        data[35] = 0x000000000000006cULL;
        data[36] = 0x000000000000006cULL;
        data[37] = 0x0000000000000068ULL;
        data[38] = 0x0000000000000068ULL;
        data[39] = 0x0000000000000068ULL;
        data[40] = 0x0000000000000068ULL;
        data[49] = 0x000000000000002fULL;
        data[50] = 0x000000000000002eULL;
        data[51] = 0x000000000000002cULL;
        data[52] = 0x000000000000002cULL;
        data[53] = 0x0000000000000028ULL;
        data[54] = 0x0000000000000028ULL;
        data[55] = 0x0000000000000028ULL;
        data[56] = 0x0000000000000028ULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x00000000000000dfULL;
        data[2] = 0x00000000000000deULL;
        data[3] = 0x00000000000000dcULL;
        data[4] = 0x00000000000000dcULL;
        data[5] = 0x00000000000000d8ULL;
        data[6] = 0x00000000000000d8ULL;
        data[7] = 0x00000000000000d8ULL;
        data[8] = 0x00000000000000d8ULL;
        data[9] = 0x00000000000000d0ULL;
        data[10] = 0x00000000000000d0ULL;
        data[11] = 0x00000000000000d0ULL;
        data[12] = 0x00000000000000d0ULL;
        data[13] = 0x00000000000000d0ULL;
        data[14] = 0x00000000000000d0ULL;
        data[15] = 0x00000000000000d0ULL;
        data[16] = 0x00000000000000d0ULL;
        data[33] = 0x000000000000005fULL;
        data[34] = 0x000000000000005eULL;
        data[35] = 0x000000000000005cULL;
        data[36] = 0x000000000000005cULL;
        data[37] = 0x0000000000000058ULL;
        data[38] = 0x0000000000000058ULL;
        data[39] = 0x0000000000000058ULL;
        data[40] = 0x0000000000000058ULL;
        data[41] = 0x0000000000000050ULL;
        data[42] = 0x0000000000000050ULL;
        data[43] = 0x0000000000000050ULL;
        data[44] = 0x0000000000000050ULL;
        data[45] = 0x0000000000000050ULL;
        data[46] = 0x0000000000000050ULL;
        data[47] = 0x0000000000000050ULL;
        data[48] = 0x0000000000000050ULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00000000000000bfULL;
        data[2] = 0x00000000000000beULL;
        data[3] = 0x00000000000000bcULL;
        data[4] = 0x00000000000000bcULL;
        data[5] = 0x00000000000000b8ULL;
        data[6] = 0x00000000000000b8ULL;
        data[7] = 0x00000000000000b8ULL;
        data[8] = 0x00000000000000b8ULL;
        data[9] = 0x00000000000000b0ULL;
        data[10] = 0x00000000000000b0ULL;
        data[11] = 0x00000000000000b0ULL;
        data[12] = 0x00000000000000b0ULL;
        data[13] = 0x00000000000000b0ULL;
        data[14] = 0x00000000000000b0ULL;
        data[15] = 0x00000000000000b0ULL;
        data[16] = 0x00000000000000b0ULL;
        data[17] = 0x00000000000000a0ULL;
        data[18] = 0x00000000000000a0ULL;
        data[19] = 0x00000000000000a0ULL;
        data[20] = 0x00000000000000a0ULL;
        data[21] = 0x00000000000000a0ULL;
        data[22] = 0x00000000000000a0ULL;
        data[23] = 0x00000000000000a0ULL;
        data[24] = 0x00000000000000a0ULL;
        data[25] = 0x00000000000000a0ULL;
        data[26] = 0x00000000000000a0ULL;
        data[27] = 0x00000000000000a0ULL;
        data[28] = 0x00000000000000a0ULL;
        data[29] = 0x00000000000000a0ULL;
        data[30] = 0x00000000000000a0ULL;
        data[31] = 0x00000000000000a0ULL;
        data[32] = 0x00000000000000a0ULL;
    }),
    ::chess::AttackTable(RightShift<1>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x000000000000007fULL;
        data[2] = 0x000000000000007eULL;
        data[3] = 0x000000000000007cULL;
        data[4] = 0x000000000000007cULL;
        data[5] = 0x0000000000000078ULL;
        data[6] = 0x0000000000000078ULL;
        data[7] = 0x0000000000000078ULL;
        data[8] = 0x0000000000000078ULL;
        data[9] = 0x0000000000000070ULL;
        data[10] = 0x0000000000000070ULL;
        data[11] = 0x0000000000000070ULL;
        data[12] = 0x0000000000000070ULL;
        data[13] = 0x0000000000000070ULL;
        data[14] = 0x0000000000000070ULL;
        data[15] = 0x0000000000000070ULL;
        data[16] = 0x0000000000000070ULL;
        data[17] = 0x0000000000000060ULL;
        data[18] = 0x0000000000000060ULL;
        data[19] = 0x0000000000000060ULL;
        data[20] = 0x0000000000000060ULL;
        data[21] = 0x0000000000000060ULL;
        data[22] = 0x0000000000000060ULL;
        data[23] = 0x0000000000000060ULL;
        data[24] = 0x0000000000000060ULL;
        data[25] = 0x0000000000000060ULL;
        data[26] = 0x0000000000000060ULL;
        data[27] = 0x0000000000000060ULL;
        data[28] = 0x0000000000000060ULL;
        data[29] = 0x0000000000000060ULL;
        data[30] = 0x0000000000000060ULL;
        data[31] = 0x0000000000000060ULL;
        data[32] = 0x0000000000000060ULL;
        data[33] = 0x0000000000000040ULL;
        data[34] = 0x0000000000000040ULL;
        data[35] = 0x0000000000000040ULL;
        data[36] = 0x0000000000000040ULL;
        data[37] = 0x0000000000000040ULL;
        data[38] = 0x0000000000000040ULL;
        data[39] = 0x0000000000000040ULL;
        data[40] = 0x0000000000000040ULL;
        data[41] = 0x0000000000000040ULL;
        data[42] = 0x0000000000000040ULL;
        data[43] = 0x0000000000000040ULL;
        data[44] = 0x0000000000000040ULL;
        data[45] = 0x0000000000000040ULL;
        data[46] = 0x0000000000000040ULL;
        data[47] = 0x0000000000000040ULL;
        data[48] = 0x0000000000000040ULL;
        data[49] = 0x0000000000000040ULL;
        data[50] = 0x0000000000000040ULL;
        data[51] = 0x0000000000000040ULL;
        data[52] = 0x0000000000000040ULL;
        data[53] = 0x0000000000000040ULL;
        data[54] = 0x0000000000000040ULL;
        data[55] = 0x0000000000000040ULL;
        data[56] = 0x0000000000000040ULL;
        data[57] = 0x0000000000000040ULL;
        data[58] = 0x0000000000000040ULL;
        data[59] = 0x0000000000000040ULL;
        data[60] = 0x0000000000000040ULL;
        data[61] = 0x0000000000000040ULL;
        data[62] = 0x0000000000000040ULL;
        data[63] = 0x0000000000000040ULL;
        data[64] = 0x0000000000000040ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x000000000000fe00ULL;
        data[2] = 0x0000000000000200ULL;
        data[3] = 0x0000000000000600ULL;
        data[4] = 0x0000000000000200ULL;
        data[5] = 0x0000000000000e00ULL;
        data[6] = 0x0000000000000200ULL;
        data[7] = 0x0000000000000600ULL;
        data[8] = 0x0000000000000200ULL;
        data[9] = 0x0000000000001e00ULL;
        data[10] = 0x0000000000000200ULL;
        data[11] = 0x0000000000000600ULL;
        data[12] = 0x0000000000000200ULL;
        data[13] = 0x0000000000000e00ULL;
        data[14] = 0x0000000000000200ULL;
        data[15] = 0x0000000000000600ULL;
        data[16] = 0x0000000000000200ULL;
        data[17] = 0x0000000000003e00ULL;
        data[18] = 0x0000000000000200ULL;
        data[19] = 0x0000000000000600ULL;
        data[20] = 0x0000000000000200ULL;
        data[21] = 0x0000000000000e00ULL;
        data[22] = 0x0000000000000200ULL;
        data[23] = 0x0000000000000600ULL;
        data[24] = 0x0000000000000200ULL;
        data[25] = 0x0000000000001e00ULL;
        data[26] = 0x0000000000000200ULL;
        data[27] = 0x0000000000000600ULL;
        data[28] = 0x0000000000000200ULL;
        data[29] = 0x0000000000000e00ULL;
        data[30] = 0x0000000000000200ULL;
        data[31] = 0x0000000000000600ULL;
        data[32] = 0x0000000000000200ULL;
        data[33] = 0x0000000000007e00ULL;
        data[34] = 0x0000000000000200ULL;
        data[35] = 0x0000000000000600ULL;
        data[36] = 0x0000000000000200ULL;
        data[37] = 0x0000000000000e00ULL;
        data[38] = 0x0000000000000200ULL;
        data[39] = 0x0000000000000600ULL;
        data[40] = 0x0000000000000200ULL;
        data[41] = 0x0000000000001e00ULL;
        data[42] = 0x0000000000000200ULL;
        data[43] = 0x0000000000000600ULL;
        data[44] = 0x0000000000000200ULL;
        data[45] = 0x0000000000000e00ULL;
        data[46] = 0x0000000000000200ULL;
        data[47] = 0x0000000000000600ULL;
        data[48] = 0x0000000000000200ULL;
        data[49] = 0x0000000000003e00ULL;
        data[50] = 0x0000000000000200ULL;
        data[51] = 0x0000000000000600ULL;
        data[52] = 0x0000000000000200ULL;
        data[53] = 0x0000000000000e00ULL;
        data[54] = 0x0000000000000200ULL;
        data[55] = 0x0000000000000600ULL;
        data[56] = 0x0000000000000200ULL;
        data[57] = 0x0000000000001e00ULL;
        data[58] = 0x0000000000000200ULL;
        data[59] = 0x0000000000000600ULL;
        data[60] = 0x0000000000000200ULL;
        data[61] = 0x0000000000000e00ULL;
        data[62] = 0x0000000000000200ULL;
        data[63] = 0x0000000000000600ULL;
        data[64] = 0x0000000000000200ULL;
    }),
    ::chess::AttackTable(RightShift<10>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x000000000000fd00ULL;
        data[2] = 0x0000000000000500ULL;
        data[3] = 0x0000000000000d00ULL;
        data[4] = 0x0000000000000500ULL;
        data[5] = 0x0000000000001d00ULL;
        data[6] = 0x0000000000000500ULL;
        data[7] = 0x0000000000000d00ULL;
        data[8] = 0x0000000000000500ULL;
        data[9] = 0x0000000000003d00ULL;
        data[10] = 0x0000000000000500ULL;
        data[11] = 0x0000000000000d00ULL;
        data[12] = 0x0000000000000500ULL;
        data[13] = 0x0000000000001d00ULL;
        data[14] = 0x0000000000000500ULL;
        data[15] = 0x0000000000000d00ULL;
        data[16] = 0x0000000000000500ULL;
        data[17] = 0x0000000000007d00ULL;
        data[18] = 0x0000000000000500ULL;
        data[19] = 0x0000000000000d00ULL;
        data[20] = 0x0000000000000500ULL;
        data[21] = 0x0000000000001d00ULL;
        data[22] = 0x0000000000000500ULL;
        data[23] = 0x0000000000000d00ULL;
        data[24] = 0x0000000000000500ULL;
        data[25] = 0x0000000000003d00ULL;
        data[26] = 0x0000000000000500ULL;
        data[27] = 0x0000000000000d00ULL;
        data[28] = 0x0000000000000500ULL;
        data[29] = 0x0000000000001d00ULL;
        data[30] = 0x0000000000000500ULL;
        data[31] = 0x0000000000000d00ULL;
        data[32] = 0x0000000000000500ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x000000000000fb00ULL;
        data[2] = 0x000000000000fa00ULL;
        data[5] = 0x0000000000000b00ULL;
        data[6] = 0x0000000000000a00ULL;
        data[9] = 0x0000000000001b00ULL;
        data[10] = 0x0000000000001a00ULL;
        data[13] = 0x0000000000000b00ULL;
        data[14] = 0x0000000000000a00ULL;
        data[17] = 0x0000000000003b00ULL;
        data[18] = 0x0000000000003a00ULL;
        data[21] = 0x0000000000000b00ULL;
        data[22] = 0x0000000000000a00ULL;
        data[25] = 0x0000000000001b00ULL;
        data[26] = 0x0000000000001a00ULL;
        data[29] = 0x0000000000000b00ULL;
        data[30] = 0x0000000000000a00ULL;
        data[33] = 0x0000000000007b00ULL;
        data[34] = 0x0000000000007a00ULL;
        data[37] = 0x0000000000000b00ULL;
        data[38] = 0x0000000000000a00ULL;
        data[41] = 0x0000000000001b00ULL;
        data[42] = 0x0000000000001a00ULL;
        data[45] = 0x0000000000000b00ULL;
        data[46] = 0x0000000000000a00ULL;
        data[49] = 0x0000000000003b00ULL;
        data[50] = 0x0000000000003a00ULL;
        data[53] = 0x0000000000000b00ULL;
        data[54] = 0x0000000000000a00ULL;
        data[57] = 0x0000000000001b00ULL;
        data[58] = 0x0000000000001a00ULL;
        data[61] = 0x0000000000000b00ULL;
        data[62] = 0x0000000000000a00ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x000000000000f700ULL;
        data[2] = 0x000000000000f600ULL;
        data[3] = 0x000000000000f400ULL;
        data[4] = 0x000000000000f400ULL;
        data[9] = 0x0000000000001700ULL;
        data[10] = 0x0000000000001600ULL;
        data[11] = 0x0000000000001400ULL;
        data[12] = 0x0000000000001400ULL;
        data[17] = 0x0000000000003700ULL;
        data[18] = 0x0000000000003600ULL;
        data[19] = 0x0000000000003400ULL;
        data[20] = 0x0000000000003400ULL;
        data[25] = 0x0000000000001700ULL;
        data[26] = 0x0000000000001600ULL;
        data[27] = 0x0000000000001400ULL;
        data[28] = 0x0000000000001400ULL;
        data[33] = 0x0000000000007700ULL;
        data[34] = 0x0000000000007600ULL;
        data[35] = 0x0000000000007400ULL;
        data[36] = 0x0000000000007400ULL;
        data[41] = 0x0000000000001700ULL;
        data[42] = 0x0000000000001600ULL;
        data[43] = 0x0000000000001400ULL;
        data[44] = 0x0000000000001400ULL;
        data[49] = 0x0000000000003700ULL;
        data[50] = 0x0000000000003600ULL;
        data[51] = 0x0000000000003400ULL;
        data[52] = 0x0000000000003400ULL;
        data[57] = 0x0000000000001700ULL;
        data[58] = 0x0000000000001600ULL;
        data[59] = 0x0000000000001400ULL;
        data[60] = 0x0000000000001400ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x000000000000ef00ULL;
        data[2] = 0x000000000000ee00ULL;
        data[3] = 0x000000000000ec00ULL;
        data[4] = 0x000000000000ec00ULL;
        data[5] = 0x000000000000e800ULL;
        data[6] = 0x000000000000e800ULL;
        data[7] = 0x000000000000e800ULL;
        data[8] = 0x000000000000e800ULL;
        data[17] = 0x0000000000002f00ULL;
        data[18] = 0x0000000000002e00ULL;
        data[19] = 0x0000000000002c00ULL;
        data[20] = 0x0000000000002c00ULL;
        data[21] = 0x0000000000002800ULL;
        data[22] = 0x0000000000002800ULL;
        data[23] = 0x0000000000002800ULL;
        data[24] = 0x0000000000002800ULL;
        data[33] = 0x0000000000006f00ULL;
        data[34] = 0x0000000000006e00ULL;
        data[35] = 0x0000000000006c00ULL;
        data[36] = 0x0000000000006c00ULL;
        data[37] = 0x0000000000006800ULL;
        data[38] = 0x0000000000006800ULL;
        data[39] = 0x0000000000006800ULL;
        data[40] = 0x0000000000006800ULL;
        data[49] = 0x0000000000002f00ULL;
        data[50] = 0x0000000000002e00ULL;
        data[51] = 0x0000000000002c00ULL;
        data[52] = 0x0000000000002c00ULL;
        data[53] = 0x0000000000002800ULL;
        data[54] = 0x0000000000002800ULL;
        data[55] = 0x0000000000002800ULL;
        data[56] = 0x0000000000002800ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x000000000000df00ULL;
        data[2] = 0x000000000000de00ULL;
        data[3] = 0x000000000000dc00ULL;
        data[4] = 0x000000000000dc00ULL;
        data[5] = 0x000000000000d800ULL;
        data[6] = 0x000000000000d800ULL;
        data[7] = 0x000000000000d800ULL;
        data[8] = 0x000000000000d800ULL;
        data[9] = 0x000000000000d000ULL;
        data[10] = 0x000000000000d000ULL;
        data[11] = 0x000000000000d000ULL;
        data[12] = 0x000000000000d000ULL;
        data[13] = 0x000000000000d000ULL;
        data[14] = 0x000000000000d000ULL;
        data[15] = 0x000000000000d000ULL;
        data[16] = 0x000000000000d000ULL;
        data[33] = 0x0000000000005f00ULL;
        data[34] = 0x0000000000005e00ULL;
        data[35] = 0x0000000000005c00ULL;
        data[36] = 0x0000000000005c00ULL;
        data[37] = 0x0000000000005800ULL;
        data[38] = 0x0000000000005800ULL;
        data[39] = 0x0000000000005800ULL;
        data[40] = 0x0000000000005800ULL;
        data[41] = 0x0000000000005000ULL;
        data[42] = 0x0000000000005000ULL;
        data[43] = 0x0000000000005000ULL;
        data[44] = 0x0000000000005000ULL;
        data[45] = 0x0000000000005000ULL;
        data[46] = 0x0000000000005000ULL;
        data[47] = 0x0000000000005000ULL;
        data[48] = 0x0000000000005000ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x000000000000bf00ULL;
        data[2] = 0x000000000000be00ULL;
        data[3] = 0x000000000000bc00ULL;
        data[4] = 0x000000000000bc00ULL;
        data[5] = 0x000000000000b800ULL;
        data[6] = 0x000000000000b800ULL;
        data[7] = 0x000000000000b800ULL;
        data[8] = 0x000000000000b800ULL;
        data[9] = 0x000000000000b000ULL;
        data[10] = 0x000000000000b000ULL;
        data[11] = 0x000000000000b000ULL;
        data[12] = 0x000000000000b000ULL;
        data[13] = 0x000000000000b000ULL;
        data[14] = 0x000000000000b000ULL;
        data[15] = 0x000000000000b000ULL;
        data[16] = 0x000000000000b000ULL;
        data[17] = 0x000000000000a000ULL;
        data[18] = 0x000000000000a000ULL;
        data[19] = 0x000000000000a000ULL;
        data[20] = 0x000000000000a000ULL;
        data[21] = 0x000000000000a000ULL;
        data[22] = 0x000000000000a000ULL;
        data[23] = 0x000000000000a000ULL;
        data[24] = 0x000000000000a000ULL;
        data[25] = 0x000000000000a000ULL;
        data[26] = 0x000000000000a000ULL;
        data[27] = 0x000000000000a000ULL;
        data[28] = 0x000000000000a000ULL;
        data[29] = 0x000000000000a000ULL;
        data[30] = 0x000000000000a000ULL;
        data[31] = 0x000000000000a000ULL;
        data[32] = 0x000000000000a000ULL;
    }),
    ::chess::AttackTable(RightShift<9>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x0000000000007f00ULL;
        data[2] = 0x0000000000007e00ULL;
        data[3] = 0x0000000000007c00ULL;
        data[4] = 0x0000000000007c00ULL;
        data[5] = 0x0000000000007800ULL;
        data[6] = 0x0000000000007800ULL;
        data[7] = 0x0000000000007800ULL;
        data[8] = 0x0000000000007800ULL;
        data[9] = 0x0000000000007000ULL;
        data[10] = 0x0000000000007000ULL;
        data[11] = 0x0000000000007000ULL;
        data[12] = 0x0000000000007000ULL;
        data[13] = 0x0000000000007000ULL;
        data[14] = 0x0000000000007000ULL;
        data[15] = 0x0000000000007000ULL;
        data[16] = 0x0000000000007000ULL;
        data[17] = 0x0000000000006000ULL;
        data[18] = 0x0000000000006000ULL;
        data[19] = 0x0000000000006000ULL;
        data[20] = 0x0000000000006000ULL;
        data[21] = 0x0000000000006000ULL;
        data[22] = 0x0000000000006000ULL;
        data[23] = 0x0000000000006000ULL;
        data[24] = 0x0000000000006000ULL;
        data[25] = 0x0000000000006000ULL;
        data[26] = 0x0000000000006000ULL;
        data[27] = 0x0000000000006000ULL;
        data[28] = 0x0000000000006000ULL;
        data[29] = 0x0000000000006000ULL;
        data[30] = 0x0000000000006000ULL;
        data[31] = 0x0000000000006000ULL;
        data[32] = 0x0000000000006000ULL;
        data[33] = 0x0000000000004000ULL;
        data[34] = 0x0000000000004000ULL;
        data[35] = 0x0000000000004000ULL;
        data[36] = 0x0000000000004000ULL;
        data[37] = 0x0000000000004000ULL;
        data[38] = 0x0000000000004000ULL;
        data[39] = 0x0000000000004000ULL;
        data[40] = 0x0000000000004000ULL;
        data[41] = 0x0000000000004000ULL;
        data[42] = 0x0000000000004000ULL;
        data[43] = 0x0000000000004000ULL;
        data[44] = 0x0000000000004000ULL;
        data[45] = 0x0000000000004000ULL;
        data[46] = 0x0000000000004000ULL;
        data[47] = 0x0000000000004000ULL;
        data[48] = 0x0000000000004000ULL;
        data[49] = 0x0000000000004000ULL;
        data[50] = 0x0000000000004000ULL;
        data[51] = 0x0000000000004000ULL;
        data[52] = 0x0000000000004000ULL;
        data[53] = 0x0000000000004000ULL;
        data[54] = 0x0000000000004000ULL;
        data[55] = 0x0000000000004000ULL;
        data[56] = 0x0000000000004000ULL;
        data[57] = 0x0000000000004000ULL;
        data[58] = 0x0000000000004000ULL;
        data[59] = 0x0000000000004000ULL;
        data[60] = 0x0000000000004000ULL;
        data[61] = 0x0000000000004000ULL;
        data[62] = 0x0000000000004000ULL;
        data[63] = 0x0000000000004000ULL;
        data[64] = 0x0000000000004000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x0000000000fe0000ULL;
        data[2] = 0x0000000000020000ULL;
        data[3] = 0x0000000000060000ULL;
        data[4] = 0x0000000000020000ULL;
        data[5] = 0x00000000000e0000ULL;
        data[6] = 0x0000000000020000ULL;
        data[7] = 0x0000000000060000ULL;
        data[8] = 0x0000000000020000ULL;
        data[9] = 0x00000000001e0000ULL;
        data[10] = 0x0000000000020000ULL;
        data[11] = 0x0000000000060000ULL;
        data[12] = 0x0000000000020000ULL;
        data[13] = 0x00000000000e0000ULL;
        data[14] = 0x0000000000020000ULL;
        data[15] = 0x0000000000060000ULL;
        data[16] = 0x0000000000020000ULL;
        data[17] = 0x00000000003e0000ULL;
        data[18] = 0x0000000000020000ULL;
        data[19] = 0x0000000000060000ULL;
        data[20] = 0x0000000000020000ULL;
        data[21] = 0x00000000000e0000ULL;
        data[22] = 0x0000000000020000ULL;
        data[23] = 0x0000000000060000ULL;
        data[24] = 0x0000000000020000ULL;
        data[25] = 0x00000000001e0000ULL;
        data[26] = 0x0000000000020000ULL;
        data[27] = 0x0000000000060000ULL;
        data[28] = 0x0000000000020000ULL;
        data[29] = 0x00000000000e0000ULL;
        data[30] = 0x0000000000020000ULL;
        data[31] = 0x0000000000060000ULL;
        data[32] = 0x0000000000020000ULL;
        data[33] = 0x00000000007e0000ULL;
        data[34] = 0x0000000000020000ULL;
        data[35] = 0x0000000000060000ULL;
        data[36] = 0x0000000000020000ULL;
        data[37] = 0x00000000000e0000ULL;
        data[38] = 0x0000000000020000ULL;
        data[39] = 0x0000000000060000ULL;
        data[40] = 0x0000000000020000ULL;
        data[41] = 0x00000000001e0000ULL;
        data[42] = 0x0000000000020000ULL;
        data[43] = 0x0000000000060000ULL;
        data[44] = 0x0000000000020000ULL;
        data[45] = 0x00000000000e0000ULL;
        data[46] = 0x0000000000020000ULL;
        data[47] = 0x0000000000060000ULL;
        data[48] = 0x0000000000020000ULL;
        data[49] = 0x00000000003e0000ULL;
        data[50] = 0x0000000000020000ULL;
        data[51] = 0x0000000000060000ULL;
        data[52] = 0x0000000000020000ULL;
        data[53] = 0x00000000000e0000ULL;
        data[54] = 0x0000000000020000ULL;
        data[55] = 0x0000000000060000ULL;
        data[56] = 0x0000000000020000ULL;
        data[57] = 0x00000000001e0000ULL;
        data[58] = 0x0000000000020000ULL;
        data[59] = 0x0000000000060000ULL;
        data[60] = 0x0000000000020000ULL;
        data[61] = 0x00000000000e0000ULL;
        data[62] = 0x0000000000020000ULL;
        data[63] = 0x0000000000060000ULL;
        data[64] = 0x0000000000020000ULL;
    }),
    ::chess::AttackTable(RightShift<18>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x0000000000fd0000ULL;
        data[2] = 0x0000000000050000ULL;
        data[3] = 0x00000000000d0000ULL;
        data[4] = 0x0000000000050000ULL;
        data[5] = 0x00000000001d0000ULL;
        data[6] = 0x0000000000050000ULL;
        data[7] = 0x00000000000d0000ULL;
        data[8] = 0x0000000000050000ULL;
        data[9] = 0x00000000003d0000ULL;
        data[10] = 0x0000000000050000ULL;
        data[11] = 0x00000000000d0000ULL;
        data[12] = 0x0000000000050000ULL;
        data[13] = 0x00000000001d0000ULL;
        data[14] = 0x0000000000050000ULL;
        data[15] = 0x00000000000d0000ULL;
        data[16] = 0x0000000000050000ULL;
        data[17] = 0x00000000007d0000ULL;
        data[18] = 0x0000000000050000ULL;
        data[19] = 0x00000000000d0000ULL;
        data[20] = 0x0000000000050000ULL;
        data[21] = 0x00000000001d0000ULL;
        data[22] = 0x0000000000050000ULL;
        data[23] = 0x00000000000d0000ULL;
        data[24] = 0x0000000000050000ULL;
        data[25] = 0x00000000003d0000ULL;
        data[26] = 0x0000000000050000ULL;
        data[27] = 0x00000000000d0000ULL;
        data[28] = 0x0000000000050000ULL;
        data[29] = 0x00000000001d0000ULL;
        data[30] = 0x0000000000050000ULL;
        data[31] = 0x00000000000d0000ULL;
        data[32] = 0x0000000000050000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x0000000000fb0000ULL;
        data[2] = 0x0000000000fa0000ULL;
        data[5] = 0x00000000000b0000ULL;
        data[6] = 0x00000000000a0000ULL;
        data[9] = 0x00000000001b0000ULL;
        data[10] = 0x00000000001a0000ULL;
        data[13] = 0x00000000000b0000ULL;
        data[14] = 0x00000000000a0000ULL;
        data[17] = 0x00000000003b0000ULL;
        data[18] = 0x00000000003a0000ULL;
        data[21] = 0x00000000000b0000ULL;
        data[22] = 0x00000000000a0000ULL;
        data[25] = 0x00000000001b0000ULL;
        data[26] = 0x00000000001a0000ULL;
        data[29] = 0x00000000000b0000ULL;
        data[30] = 0x00000000000a0000ULL;
        data[33] = 0x00000000007b0000ULL;
        data[34] = 0x00000000007a0000ULL;
        data[37] = 0x00000000000b0000ULL;
        data[38] = 0x00000000000a0000ULL;
        data[41] = 0x00000000001b0000ULL;
        data[42] = 0x00000000001a0000ULL;
        data[45] = 0x00000000000b0000ULL;
        data[46] = 0x00000000000a0000ULL;
        data[49] = 0x00000000003b0000ULL;
        data[50] = 0x00000000003a0000ULL;
        data[53] = 0x00000000000b0000ULL;
        data[54] = 0x00000000000a0000ULL;
        data[57] = 0x00000000001b0000ULL;
        data[58] = 0x00000000001a0000ULL;
        data[61] = 0x00000000000b0000ULL;
        data[62] = 0x00000000000a0000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x0000000000f70000ULL;
        data[2] = 0x0000000000f60000ULL;
        data[3] = 0x0000000000f40000ULL;
        data[4] = 0x0000000000f40000ULL;
        data[9] = 0x0000000000170000ULL;
        data[10] = 0x0000000000160000ULL;
        data[11] = 0x0000000000140000ULL;
        data[12] = 0x0000000000140000ULL;
        data[17] = 0x0000000000370000ULL;
        data[18] = 0x0000000000360000ULL;
        data[19] = 0x0000000000340000ULL;
        data[20] = 0x0000000000340000ULL;
        data[25] = 0x0000000000170000ULL;
        data[26] = 0x0000000000160000ULL;
        data[27] = 0x0000000000140000ULL;
        data[28] = 0x0000000000140000ULL;
        data[33] = 0x0000000000770000ULL;
        data[34] = 0x0000000000760000ULL;
        data[35] = 0x0000000000740000ULL;
        data[36] = 0x0000000000740000ULL;
        data[41] = 0x0000000000170000ULL;
        data[42] = 0x0000000000160000ULL;
        data[43] = 0x0000000000140000ULL;
        data[44] = 0x0000000000140000ULL;
        data[49] = 0x0000000000370000ULL;
        data[50] = 0x0000000000360000ULL;
        data[51] = 0x0000000000340000ULL;
        data[52] = 0x0000000000340000ULL;
        data[57] = 0x0000000000170000ULL;
        data[58] = 0x0000000000160000ULL;
        data[59] = 0x0000000000140000ULL;
        data[60] = 0x0000000000140000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x0000000000ef0000ULL;
        data[2] = 0x0000000000ee0000ULL;
        data[3] = 0x0000000000ec0000ULL;
        data[4] = 0x0000000000ec0000ULL;
        data[5] = 0x0000000000e80000ULL;
        data[6] = 0x0000000000e80000ULL;
        data[7] = 0x0000000000e80000ULL;
        data[8] = 0x0000000000e80000ULL;
        data[17] = 0x00000000002f0000ULL;
        data[18] = 0x00000000002e0000ULL;
        data[19] = 0x00000000002c0000ULL;
        data[20] = 0x00000000002c0000ULL;
        data[21] = 0x0000000000280000ULL;
        data[22] = 0x0000000000280000ULL;
        data[23] = 0x0000000000280000ULL;
        data[24] = 0x0000000000280000ULL;
        data[33] = 0x00000000006f0000ULL;
        data[34] = 0x00000000006e0000ULL;
        data[35] = 0x00000000006c0000ULL;
        data[36] = 0x00000000006c0000ULL;
        data[37] = 0x0000000000680000ULL;
        data[38] = 0x0000000000680000ULL;
        data[39] = 0x0000000000680000ULL;
        data[40] = 0x0000000000680000ULL;
        data[49] = 0x00000000002f0000ULL;
        data[50] = 0x00000000002e0000ULL;
        data[51] = 0x00000000002c0000ULL;
        data[52] = 0x00000000002c0000ULL;
        data[53] = 0x0000000000280000ULL;
        data[54] = 0x0000000000280000ULL;
        data[55] = 0x0000000000280000ULL;
        data[56] = 0x0000000000280000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x0000000000df0000ULL;
        data[2] = 0x0000000000de0000ULL;
        data[3] = 0x0000000000dc0000ULL;
        data[4] = 0x0000000000dc0000ULL;
        data[5] = 0x0000000000d80000ULL;
        data[6] = 0x0000000000d80000ULL;
        data[7] = 0x0000000000d80000ULL;
        data[8] = 0x0000000000d80000ULL;
        data[9] = 0x0000000000d00000ULL;
        data[10] = 0x0000000000d00000ULL;
        data[11] = 0x0000000000d00000ULL;
        data[12] = 0x0000000000d00000ULL;
        data[13] = 0x0000000000d00000ULL;
        data[14] = 0x0000000000d00000ULL;
        data[15] = 0x0000000000d00000ULL;
        data[16] = 0x0000000000d00000ULL;
        data[33] = 0x00000000005f0000ULL;
        data[34] = 0x00000000005e0000ULL;
        data[35] = 0x00000000005c0000ULL;
        data[36] = 0x00000000005c0000ULL;
        data[37] = 0x0000000000580000ULL;
        data[38] = 0x0000000000580000ULL;
        data[39] = 0x0000000000580000ULL;
        data[40] = 0x0000000000580000ULL;
        data[41] = 0x0000000000500000ULL;
        data[42] = 0x0000000000500000ULL;
        data[43] = 0x0000000000500000ULL;
        data[44] = 0x0000000000500000ULL;
        data[45] = 0x0000000000500000ULL;
        data[46] = 0x0000000000500000ULL;
        data[47] = 0x0000000000500000ULL;
        data[48] = 0x0000000000500000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x0000000000bf0000ULL;
        data[2] = 0x0000000000be0000ULL;
        data[3] = 0x0000000000bc0000ULL;
        data[4] = 0x0000000000bc0000ULL;
        data[5] = 0x0000000000b80000ULL;
        data[6] = 0x0000000000b80000ULL;
        data[7] = 0x0000000000b80000ULL;
        data[8] = 0x0000000000b80000ULL;
        data[9] = 0x0000000000b00000ULL;
        data[10] = 0x0000000000b00000ULL;
        data[11] = 0x0000000000b00000ULL;
        data[12] = 0x0000000000b00000ULL;
        data[13] = 0x0000000000b00000ULL;
        data[14] = 0x0000000000b00000ULL;
        data[15] = 0x0000000000b00000ULL;
        data[16] = 0x0000000000b00000ULL;
        data[17] = 0x0000000000a00000ULL;
        data[18] = 0x0000000000a00000ULL;
        data[19] = 0x0000000000a00000ULL;
        data[20] = 0x0000000000a00000ULL;
        data[21] = 0x0000000000a00000ULL;
        data[22] = 0x0000000000a00000ULL;
        data[23] = 0x0000000000a00000ULL;
        data[24] = 0x0000000000a00000ULL;
        data[25] = 0x0000000000a00000ULL;
        data[26] = 0x0000000000a00000ULL;
        data[27] = 0x0000000000a00000ULL;
        data[28] = 0x0000000000a00000ULL;
        data[29] = 0x0000000000a00000ULL;
        data[30] = 0x0000000000a00000ULL;
        data[31] = 0x0000000000a00000ULL;
        data[32] = 0x0000000000a00000ULL;
    }),
    ::chess::AttackTable(RightShift<17>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x00000000007f0000ULL;
        data[2] = 0x00000000007e0000ULL;
        data[3] = 0x00000000007c0000ULL;
        data[4] = 0x00000000007c0000ULL;
        data[5] = 0x0000000000780000ULL;
        data[6] = 0x0000000000780000ULL;
        data[7] = 0x0000000000780000ULL;
        data[8] = 0x0000000000780000ULL;
        data[9] = 0x0000000000700000ULL;
        data[10] = 0x0000000000700000ULL;
        data[11] = 0x0000000000700000ULL;
        data[12] = 0x0000000000700000ULL;
        data[13] = 0x0000000000700000ULL;
        data[14] = 0x0000000000700000ULL;
        data[15] = 0x0000000000700000ULL;
        data[16] = 0x0000000000700000ULL;
        data[17] = 0x0000000000600000ULL;
        data[18] = 0x0000000000600000ULL;
        data[19] = 0x0000000000600000ULL;
        data[20] = 0x0000000000600000ULL;
        data[21] = 0x0000000000600000ULL;
        data[22] = 0x0000000000600000ULL;
        data[23] = 0x0000000000600000ULL;
        data[24] = 0x0000000000600000ULL;
        data[25] = 0x0000000000600000ULL;
        data[26] = 0x0000000000600000ULL;
        data[27] = 0x0000000000600000ULL;
        data[28] = 0x0000000000600000ULL;
        data[29] = 0x0000000000600000ULL;
        data[30] = 0x0000000000600000ULL;
        data[31] = 0x0000000000600000ULL;
        data[32] = 0x0000000000600000ULL;
        data[33] = 0x0000000000400000ULL;
        data[34] = 0x0000000000400000ULL;
        data[35] = 0x0000000000400000ULL;
        data[36] = 0x0000000000400000ULL;
        data[37] = 0x0000000000400000ULL;
        data[38] = 0x0000000000400000ULL;
        data[39] = 0x0000000000400000ULL;
        data[40] = 0x0000000000400000ULL;
        data[41] = 0x0000000000400000ULL;
        data[42] = 0x0000000000400000ULL;
        data[43] = 0x0000000000400000ULL;
        data[44] = 0x0000000000400000ULL;
        data[45] = 0x0000000000400000ULL;
        data[46] = 0x0000000000400000ULL;
        data[47] = 0x0000000000400000ULL;
        data[48] = 0x0000000000400000ULL;
        data[49] = 0x0000000000400000ULL;
        data[50] = 0x0000000000400000ULL;
        data[51] = 0x0000000000400000ULL;
        data[52] = 0x0000000000400000ULL;
        data[53] = 0x0000000000400000ULL;
        data[54] = 0x0000000000400000ULL;
        data[55] = 0x0000000000400000ULL;
        data[56] = 0x0000000000400000ULL;
        data[57] = 0x0000000000400000ULL;
        data[58] = 0x0000000000400000ULL;
        data[59] = 0x0000000000400000ULL;
        data[60] = 0x0000000000400000ULL;
        data[61] = 0x0000000000400000ULL;
        data[62] = 0x0000000000400000ULL;
        data[63] = 0x0000000000400000ULL;
        data[64] = 0x0000000000400000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x00000000fe000000ULL;
        data[2] = 0x0000000002000000ULL;
        data[3] = 0x0000000006000000ULL;
        data[4] = 0x0000000002000000ULL;
        data[5] = 0x000000000e000000ULL;
        data[6] = 0x0000000002000000ULL;
        data[7] = 0x0000000006000000ULL;
        data[8] = 0x0000000002000000ULL;
        data[9] = 0x000000001e000000ULL;
        data[10] = 0x0000000002000000ULL;
        data[11] = 0x0000000006000000ULL;
        data[12] = 0x0000000002000000ULL;
        data[13] = 0x000000000e000000ULL;
        data[14] = 0x0000000002000000ULL;
        data[15] = 0x0000000006000000ULL;
        data[16] = 0x0000000002000000ULL;
        data[17] = 0x000000003e000000ULL;
        data[18] = 0x0000000002000000ULL;
        data[19] = 0x0000000006000000ULL;
        data[20] = 0x0000000002000000ULL;
        data[21] = 0x000000000e000000ULL;
        data[22] = 0x0000000002000000ULL;
        data[23] = 0x0000000006000000ULL;
        data[24] = 0x0000000002000000ULL;
        data[25] = 0x000000001e000000ULL;
        data[26] = 0x0000000002000000ULL;
        data[27] = 0x0000000006000000ULL;
        data[28] = 0x0000000002000000ULL;
        data[29] = 0x000000000e000000ULL;
        data[30] = 0x0000000002000000ULL;
        data[31] = 0x0000000006000000ULL;
        data[32] = 0x0000000002000000ULL;
        data[33] = 0x000000007e000000ULL;
        data[34] = 0x0000000002000000ULL;
        data[35] = 0x0000000006000000ULL;
        data[36] = 0x0000000002000000ULL;
        data[37] = 0x000000000e000000ULL;
        data[38] = 0x0000000002000000ULL;
        data[39] = 0x0000000006000000ULL;
        data[40] = 0x0000000002000000ULL;
        data[41] = 0x000000001e000000ULL;
        data[42] = 0x0000000002000000ULL;
        data[43] = 0x0000000006000000ULL;
        data[44] = 0x0000000002000000ULL;
        data[45] = 0x000000000e000000ULL;
        data[46] = 0x0000000002000000ULL;
        data[47] = 0x0000000006000000ULL;
        data[48] = 0x0000000002000000ULL;
        data[49] = 0x000000003e000000ULL;
        data[50] = 0x0000000002000000ULL;
        data[51] = 0x0000000006000000ULL;
        data[52] = 0x0000000002000000ULL;
        data[53] = 0x000000000e000000ULL;
        data[54] = 0x0000000002000000ULL;
        data[55] = 0x0000000006000000ULL;
        data[56] = 0x0000000002000000ULL;
        data[57] = 0x000000001e000000ULL;
        data[58] = 0x0000000002000000ULL;
        data[59] = 0x0000000006000000ULL;
        data[60] = 0x0000000002000000ULL;
        data[61] = 0x000000000e000000ULL;
        data[62] = 0x0000000002000000ULL;
        data[63] = 0x0000000006000000ULL;
        data[64] = 0x0000000002000000ULL;
    }),
    ::chess::AttackTable(RightShift<26>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00000000fd000000ULL;
        data[2] = 0x0000000005000000ULL;
        data[3] = 0x000000000d000000ULL;
        data[4] = 0x0000000005000000ULL;
        data[5] = 0x000000001d000000ULL;
        data[6] = 0x0000000005000000ULL;
        data[7] = 0x000000000d000000ULL;
        data[8] = 0x0000000005000000ULL;
        data[9] = 0x000000003d000000ULL;
        data[10] = 0x0000000005000000ULL;
        data[11] = 0x000000000d000000ULL;
        data[12] = 0x0000000005000000ULL;
        data[13] = 0x000000001d000000ULL;
        data[14] = 0x0000000005000000ULL;
        data[15] = 0x000000000d000000ULL;
        data[16] = 0x0000000005000000ULL;
        data[17] = 0x000000007d000000ULL;
        data[18] = 0x0000000005000000ULL;
        data[19] = 0x000000000d000000ULL;
        data[20] = 0x0000000005000000ULL;
        data[21] = 0x000000001d000000ULL;
        data[22] = 0x0000000005000000ULL;
        data[23] = 0x000000000d000000ULL;
        data[24] = 0x0000000005000000ULL;
        data[25] = 0x000000003d000000ULL;
        data[26] = 0x0000000005000000ULL;
        data[27] = 0x000000000d000000ULL;
        data[28] = 0x0000000005000000ULL;
        data[29] = 0x000000001d000000ULL;
        data[30] = 0x0000000005000000ULL;
        data[31] = 0x000000000d000000ULL;
        data[32] = 0x0000000005000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x00000000fb000000ULL;
        data[2] = 0x00000000fa000000ULL;
        data[5] = 0x000000000b000000ULL;
        data[6] = 0x000000000a000000ULL;
        data[9] = 0x000000001b000000ULL;
        data[10] = 0x000000001a000000ULL;
        data[13] = 0x000000000b000000ULL;
        data[14] = 0x000000000a000000ULL;
        data[17] = 0x000000003b000000ULL;
        data[18] = 0x000000003a000000ULL;
        data[21] = 0x000000000b000000ULL;
        data[22] = 0x000000000a000000ULL;
        data[25] = 0x000000001b000000ULL;
        data[26] = 0x000000001a000000ULL;
        data[29] = 0x000000000b000000ULL;
        data[30] = 0x000000000a000000ULL;
        data[33] = 0x000000007b000000ULL;
        data[34] = 0x000000007a000000ULL;
        data[37] = 0x000000000b000000ULL;
        data[38] = 0x000000000a000000ULL;
        data[41] = 0x000000001b000000ULL;
        data[42] = 0x000000001a000000ULL;
        data[45] = 0x000000000b000000ULL;
        data[46] = 0x000000000a000000ULL;
        data[49] = 0x000000003b000000ULL;
        data[50] = 0x000000003a000000ULL;
        data[53] = 0x000000000b000000ULL;
        data[54] = 0x000000000a000000ULL;
        data[57] = 0x000000001b000000ULL;
        data[58] = 0x000000001a000000ULL;
        data[61] = 0x000000000b000000ULL;
        data[62] = 0x000000000a000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x00000000f7000000ULL;
        data[2] = 0x00000000f6000000ULL;
        data[3] = 0x00000000f4000000ULL;
        data[4] = 0x00000000f4000000ULL;
        data[9] = 0x0000000017000000ULL;
        data[10] = 0x0000000016000000ULL;
        data[11] = 0x0000000014000000ULL;
        data[12] = 0x0000000014000000ULL;
        data[17] = 0x0000000037000000ULL;
        data[18] = 0x0000000036000000ULL;
        data[19] = 0x0000000034000000ULL;
        data[20] = 0x0000000034000000ULL;
        data[25] = 0x0000000017000000ULL;
        data[26] = 0x0000000016000000ULL;
        data[27] = 0x0000000014000000ULL;
        data[28] = 0x0000000014000000ULL;
        data[33] = 0x0000000077000000ULL;
        data[34] = 0x0000000076000000ULL;
        data[35] = 0x0000000074000000ULL;
        data[36] = 0x0000000074000000ULL;
        data[41] = 0x0000000017000000ULL;
        data[42] = 0x0000000016000000ULL;
        data[43] = 0x0000000014000000ULL;
        data[44] = 0x0000000014000000ULL;
        data[49] = 0x0000000037000000ULL;
        data[50] = 0x0000000036000000ULL;
        data[51] = 0x0000000034000000ULL;
        data[52] = 0x0000000034000000ULL;
        data[57] = 0x0000000017000000ULL;
        data[58] = 0x0000000016000000ULL;
        data[59] = 0x0000000014000000ULL;
        data[60] = 0x0000000014000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x00000000ef000000ULL;
        data[2] = 0x00000000ee000000ULL;
        data[3] = 0x00000000ec000000ULL;
        data[4] = 0x00000000ec000000ULL;
        data[5] = 0x00000000e8000000ULL;
        data[6] = 0x00000000e8000000ULL;
        data[7] = 0x00000000e8000000ULL;
        data[8] = 0x00000000e8000000ULL;
        data[17] = 0x000000002f000000ULL;
        data[18] = 0x000000002e000000ULL;
        data[19] = 0x000000002c000000ULL;
        data[20] = 0x000000002c000000ULL;
        data[21] = 0x0000000028000000ULL;
        data[22] = 0x0000000028000000ULL;
        data[23] = 0x0000000028000000ULL;
        data[24] = 0x0000000028000000ULL;
        data[33] = 0x000000006f000000ULL;
        data[34] = 0x000000006e000000ULL;
        data[35] = 0x000000006c000000ULL;
        data[36] = 0x000000006c000000ULL;
        data[37] = 0x0000000068000000ULL;
        data[38] = 0x0000000068000000ULL;
        data[39] = 0x0000000068000000ULL;
        data[40] = 0x0000000068000000ULL;
        data[49] = 0x000000002f000000ULL;
        data[50] = 0x000000002e000000ULL;
        data[51] = 0x000000002c000000ULL;
        data[52] = 0x000000002c000000ULL;
        data[53] = 0x0000000028000000ULL;
        data[54] = 0x0000000028000000ULL;
        data[55] = 0x0000000028000000ULL;
        data[56] = 0x0000000028000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x00000000df000000ULL;
        data[2] = 0x00000000de000000ULL;
        data[3] = 0x00000000dc000000ULL;
        data[4] = 0x00000000dc000000ULL;
        data[5] = 0x00000000d8000000ULL;
        data[6] = 0x00000000d8000000ULL;
        data[7] = 0x00000000d8000000ULL;
        data[8] = 0x00000000d8000000ULL;
        data[9] = 0x00000000d0000000ULL;
        data[10] = 0x00000000d0000000ULL;
        data[11] = 0x00000000d0000000ULL;
        data[12] = 0x00000000d0000000ULL;
        data[13] = 0x00000000d0000000ULL;
        data[14] = 0x00000000d0000000ULL;
        data[15] = 0x00000000d0000000ULL;
        data[16] = 0x00000000d0000000ULL;
        data[33] = 0x000000005f000000ULL;
        data[34] = 0x000000005e000000ULL;
        data[35] = 0x000000005c000000ULL;
        data[36] = 0x000000005c000000ULL;
        data[37] = 0x0000000058000000ULL;
        data[38] = 0x0000000058000000ULL;
        data[39] = 0x0000000058000000ULL;
        data[40] = 0x0000000058000000ULL;
        data[41] = 0x0000000050000000ULL;
        data[42] = 0x0000000050000000ULL;
        data[43] = 0x0000000050000000ULL;
        data[44] = 0x0000000050000000ULL;
        data[45] = 0x0000000050000000ULL;
        data[46] = 0x0000000050000000ULL;
        data[47] = 0x0000000050000000ULL;
        data[48] = 0x0000000050000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00000000bf000000ULL;
        data[2] = 0x00000000be000000ULL;
        data[3] = 0x00000000bc000000ULL;
        data[4] = 0x00000000bc000000ULL;
        data[5] = 0x00000000b8000000ULL;
        data[6] = 0x00000000b8000000ULL;
        data[7] = 0x00000000b8000000ULL;
        data[8] = 0x00000000b8000000ULL;
        data[9] = 0x00000000b0000000ULL;
        data[10] = 0x00000000b0000000ULL;
        data[11] = 0x00000000b0000000ULL;
        data[12] = 0x00000000b0000000ULL;
        data[13] = 0x00000000b0000000ULL;
        data[14] = 0x00000000b0000000ULL;
        data[15] = 0x00000000b0000000ULL;
        data[16] = 0x00000000b0000000ULL;
        data[17] = 0x00000000a0000000ULL;
        data[18] = 0x00000000a0000000ULL;
        data[19] = 0x00000000a0000000ULL;
        data[20] = 0x00000000a0000000ULL;
        data[21] = 0x00000000a0000000ULL;
        data[22] = 0x00000000a0000000ULL;
        data[23] = 0x00000000a0000000ULL;
        data[24] = 0x00000000a0000000ULL;
        data[25] = 0x00000000a0000000ULL;
        data[26] = 0x00000000a0000000ULL;
        data[27] = 0x00000000a0000000ULL;
        data[28] = 0x00000000a0000000ULL;
        data[29] = 0x00000000a0000000ULL;
        data[30] = 0x00000000a0000000ULL;
        data[31] = 0x00000000a0000000ULL;
        data[32] = 0x00000000a0000000ULL;
    }),
    ::chess::AttackTable(RightShift<25>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x000000007f000000ULL;
        data[2] = 0x000000007e000000ULL;
        data[3] = 0x000000007c000000ULL;
        data[4] = 0x000000007c000000ULL;
        data[5] = 0x0000000078000000ULL;
        data[6] = 0x0000000078000000ULL;
        data[7] = 0x0000000078000000ULL;
        data[8] = 0x0000000078000000ULL;
        data[9] = 0x0000000070000000ULL;
        data[10] = 0x0000000070000000ULL;
        data[11] = 0x0000000070000000ULL;
        data[12] = 0x0000000070000000ULL;
        data[13] = 0x0000000070000000ULL;
        data[14] = 0x0000000070000000ULL;
        data[15] = 0x0000000070000000ULL;
        data[16] = 0x0000000070000000ULL;
        data[17] = 0x0000000060000000ULL;
        data[18] = 0x0000000060000000ULL;
        data[19] = 0x0000000060000000ULL;
        data[20] = 0x0000000060000000ULL;
        data[21] = 0x0000000060000000ULL;
        data[22] = 0x0000000060000000ULL;
        data[23] = 0x0000000060000000ULL;
        data[24] = 0x0000000060000000ULL;
        data[25] = 0x0000000060000000ULL;
        data[26] = 0x0000000060000000ULL;
        data[27] = 0x0000000060000000ULL;
        data[28] = 0x0000000060000000ULL;
        data[29] = 0x0000000060000000ULL;
        data[30] = 0x0000000060000000ULL;
        data[31] = 0x0000000060000000ULL;
        data[32] = 0x0000000060000000ULL;
        data[33] = 0x0000000040000000ULL;
        data[34] = 0x0000000040000000ULL;
        data[35] = 0x0000000040000000ULL;
        data[36] = 0x0000000040000000ULL;
        data[37] = 0x0000000040000000ULL;
        data[38] = 0x0000000040000000ULL;
        data[39] = 0x0000000040000000ULL;
        data[40] = 0x0000000040000000ULL;
        data[41] = 0x0000000040000000ULL;
        data[42] = 0x0000000040000000ULL;
        data[43] = 0x0000000040000000ULL;
        data[44] = 0x0000000040000000ULL;
        data[45] = 0x0000000040000000ULL;
        data[46] = 0x0000000040000000ULL;
        data[47] = 0x0000000040000000ULL;
        data[48] = 0x0000000040000000ULL;
        data[49] = 0x0000000040000000ULL;
        data[50] = 0x0000000040000000ULL;
        data[51] = 0x0000000040000000ULL;
        data[52] = 0x0000000040000000ULL;
        data[53] = 0x0000000040000000ULL;
        data[54] = 0x0000000040000000ULL;
        data[55] = 0x0000000040000000ULL;
        data[56] = 0x0000000040000000ULL;
        data[57] = 0x0000000040000000ULL;
        data[58] = 0x0000000040000000ULL;
        data[59] = 0x0000000040000000ULL;
        data[60] = 0x0000000040000000ULL;
        data[61] = 0x0000000040000000ULL;
        data[62] = 0x0000000040000000ULL;
        data[63] = 0x0000000040000000ULL;
        data[64] = 0x0000000040000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x000000fe00000000ULL;
        data[2] = 0x0000000200000000ULL;
        data[3] = 0x0000000600000000ULL;
        data[4] = 0x0000000200000000ULL;
        data[5] = 0x0000000e00000000ULL;
        data[6] = 0x0000000200000000ULL;
        data[7] = 0x0000000600000000ULL;
        data[8] = 0x0000000200000000ULL;
        data[9] = 0x0000001e00000000ULL;
        data[10] = 0x0000000200000000ULL;
        data[11] = 0x0000000600000000ULL;
        data[12] = 0x0000000200000000ULL;
        data[13] = 0x0000000e00000000ULL;
        data[14] = 0x0000000200000000ULL;
        data[15] = 0x0000000600000000ULL;
        data[16] = 0x0000000200000000ULL;
        data[17] = 0x0000003e00000000ULL;
        data[18] = 0x0000000200000000ULL;
        data[19] = 0x0000000600000000ULL;
        data[20] = 0x0000000200000000ULL;
        data[21] = 0x0000000e00000000ULL;
        data[22] = 0x0000000200000000ULL;
        data[23] = 0x0000000600000000ULL;
        data[24] = 0x0000000200000000ULL;
        data[25] = 0x0000001e00000000ULL;
        data[26] = 0x0000000200000000ULL;
        data[27] = 0x0000000600000000ULL;
        data[28] = 0x0000000200000000ULL;
        data[29] = 0x0000000e00000000ULL;
        data[30] = 0x0000000200000000ULL;
        data[31] = 0x0000000600000000ULL;
        data[32] = 0x0000000200000000ULL;
        data[33] = 0x0000007e00000000ULL;
        data[34] = 0x0000000200000000ULL;
        data[35] = 0x0000000600000000ULL;
        data[36] = 0x0000000200000000ULL;
        data[37] = 0x0000000e00000000ULL;
        data[38] = 0x0000000200000000ULL;
        data[39] = 0x0000000600000000ULL;
        data[40] = 0x0000000200000000ULL;
        data[41] = 0x0000001e00000000ULL;
        data[42] = 0x0000000200000000ULL;
        data[43] = 0x0000000600000000ULL;
        data[44] = 0x0000000200000000ULL;
        data[45] = 0x0000000e00000000ULL;
        data[46] = 0x0000000200000000ULL;
        data[47] = 0x0000000600000000ULL;
        data[48] = 0x0000000200000000ULL;
        data[49] = 0x0000003e00000000ULL;
        data[50] = 0x0000000200000000ULL;
        data[51] = 0x0000000600000000ULL;
        data[52] = 0x0000000200000000ULL;
        data[53] = 0x0000000e00000000ULL;
        data[54] = 0x0000000200000000ULL;
        data[55] = 0x0000000600000000ULL;
        data[56] = 0x0000000200000000ULL;
        data[57] = 0x0000001e00000000ULL;
        data[58] = 0x0000000200000000ULL;
        data[59] = 0x0000000600000000ULL;
        data[60] = 0x0000000200000000ULL;
        data[61] = 0x0000000e00000000ULL;
        data[62] = 0x0000000200000000ULL;
        data[63] = 0x0000000600000000ULL;
        data[64] = 0x0000000200000000ULL;
    }),
    ::chess::AttackTable(RightShift<34>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x000000fd00000000ULL;
        data[2] = 0x0000000500000000ULL;
        data[3] = 0x0000000d00000000ULL;
        data[4] = 0x0000000500000000ULL;
        data[5] = 0x0000001d00000000ULL;
        data[6] = 0x0000000500000000ULL;
        data[7] = 0x0000000d00000000ULL;
        data[8] = 0x0000000500000000ULL;
        data[9] = 0x0000003d00000000ULL;
        data[10] = 0x0000000500000000ULL;
        data[11] = 0x0000000d00000000ULL;
        data[12] = 0x0000000500000000ULL;
        data[13] = 0x0000001d00000000ULL;
        data[14] = 0x0000000500000000ULL;
        data[15] = 0x0000000d00000000ULL;
        data[16] = 0x0000000500000000ULL;
        data[17] = 0x0000007d00000000ULL;
        data[18] = 0x0000000500000000ULL;
        data[19] = 0x0000000d00000000ULL;
        data[20] = 0x0000000500000000ULL;
        data[21] = 0x0000001d00000000ULL;
        data[22] = 0x0000000500000000ULL;
        data[23] = 0x0000000d00000000ULL;
        data[24] = 0x0000000500000000ULL;
        data[25] = 0x0000003d00000000ULL;
        data[26] = 0x0000000500000000ULL;
        data[27] = 0x0000000d00000000ULL;
        data[28] = 0x0000000500000000ULL;
        data[29] = 0x0000001d00000000ULL;
        data[30] = 0x0000000500000000ULL;
        data[31] = 0x0000000d00000000ULL;
        data[32] = 0x0000000500000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x000000fb00000000ULL;
        data[2] = 0x000000fa00000000ULL;
        data[5] = 0x0000000b00000000ULL;
        data[6] = 0x0000000a00000000ULL;
        data[9] = 0x0000001b00000000ULL;
        data[10] = 0x0000001a00000000ULL;
        data[13] = 0x0000000b00000000ULL;
        data[14] = 0x0000000a00000000ULL;
        data[17] = 0x0000003b00000000ULL;
        data[18] = 0x0000003a00000000ULL;
        data[21] = 0x0000000b00000000ULL;
        data[22] = 0x0000000a00000000ULL;
        data[25] = 0x0000001b00000000ULL;
        data[26] = 0x0000001a00000000ULL;
        data[29] = 0x0000000b00000000ULL;
        data[30] = 0x0000000a00000000ULL;
        data[33] = 0x0000007b00000000ULL;
        data[34] = 0x0000007a00000000ULL;
        data[37] = 0x0000000b00000000ULL;
        data[38] = 0x0000000a00000000ULL;
        data[41] = 0x0000001b00000000ULL;
        data[42] = 0x0000001a00000000ULL;
        data[45] = 0x0000000b00000000ULL;
        data[46] = 0x0000000a00000000ULL;
        data[49] = 0x0000003b00000000ULL;
        data[50] = 0x0000003a00000000ULL;
        data[53] = 0x0000000b00000000ULL;
        data[54] = 0x0000000a00000000ULL;
        data[57] = 0x0000001b00000000ULL;
        data[58] = 0x0000001a00000000ULL;
        data[61] = 0x0000000b00000000ULL;
        data[62] = 0x0000000a00000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x000000f700000000ULL;
        data[2] = 0x000000f600000000ULL;
        data[3] = 0x000000f400000000ULL;
        data[4] = 0x000000f400000000ULL;
        data[9] = 0x0000001700000000ULL;
        data[10] = 0x0000001600000000ULL;
        data[11] = 0x0000001400000000ULL;
        data[12] = 0x0000001400000000ULL;
        data[17] = 0x0000003700000000ULL;
        data[18] = 0x0000003600000000ULL;
        data[19] = 0x0000003400000000ULL;
        data[20] = 0x0000003400000000ULL;
        data[25] = 0x0000001700000000ULL;
        data[26] = 0x0000001600000000ULL;
        data[27] = 0x0000001400000000ULL;
        data[28] = 0x0000001400000000ULL;
        data[33] = 0x0000007700000000ULL;
        data[34] = 0x0000007600000000ULL;
        data[35] = 0x0000007400000000ULL;
        data[36] = 0x0000007400000000ULL;
        data[41] = 0x0000001700000000ULL;
        data[42] = 0x0000001600000000ULL;
        data[43] = 0x0000001400000000ULL;
        data[44] = 0x0000001400000000ULL;
        data[49] = 0x0000003700000000ULL;
        data[50] = 0x0000003600000000ULL;
        data[51] = 0x0000003400000000ULL;
        data[52] = 0x0000003400000000ULL;
        data[57] = 0x0000001700000000ULL;
        data[58] = 0x0000001600000000ULL;
        data[59] = 0x0000001400000000ULL;
        data[60] = 0x0000001400000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x000000ef00000000ULL;
        data[2] = 0x000000ee00000000ULL;
        data[3] = 0x000000ec00000000ULL;
        data[4] = 0x000000ec00000000ULL;
        data[5] = 0x000000e800000000ULL;
        data[6] = 0x000000e800000000ULL;
        data[7] = 0x000000e800000000ULL;
        data[8] = 0x000000e800000000ULL;
        data[17] = 0x0000002f00000000ULL;
        data[18] = 0x0000002e00000000ULL;
        data[19] = 0x0000002c00000000ULL;
        data[20] = 0x0000002c00000000ULL;
        data[21] = 0x0000002800000000ULL;
        data[22] = 0x0000002800000000ULL;
        data[23] = 0x0000002800000000ULL;
        data[24] = 0x0000002800000000ULL;
        data[33] = 0x0000006f00000000ULL;
        data[34] = 0x0000006e00000000ULL;
        data[35] = 0x0000006c00000000ULL;
        data[36] = 0x0000006c00000000ULL;
        data[37] = 0x0000006800000000ULL;
        data[38] = 0x0000006800000000ULL;
        data[39] = 0x0000006800000000ULL;
        data[40] = 0x0000006800000000ULL;
        data[49] = 0x0000002f00000000ULL;
        data[50] = 0x0000002e00000000ULL;
        data[51] = 0x0000002c00000000ULL;
        data[52] = 0x0000002c00000000ULL;
        data[53] = 0x0000002800000000ULL;
        data[54] = 0x0000002800000000ULL;
        data[55] = 0x0000002800000000ULL;
        data[56] = 0x0000002800000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x000000df00000000ULL;
        data[2] = 0x000000de00000000ULL;
        data[3] = 0x000000dc00000000ULL;
        data[4] = 0x000000dc00000000ULL;
        data[5] = 0x000000d800000000ULL;
        data[6] = 0x000000d800000000ULL;
        data[7] = 0x000000d800000000ULL;
        data[8] = 0x000000d800000000ULL;
        data[9] = 0x000000d000000000ULL;
        data[10] = 0x000000d000000000ULL;
        data[11] = 0x000000d000000000ULL;
        data[12] = 0x000000d000000000ULL;
        data[13] = 0x000000d000000000ULL;
        data[14] = 0x000000d000000000ULL;
        data[15] = 0x000000d000000000ULL;
        data[16] = 0x000000d000000000ULL;
        data[33] = 0x0000005f00000000ULL;
        data[34] = 0x0000005e00000000ULL;
        data[35] = 0x0000005c00000000ULL;
        data[36] = 0x0000005c00000000ULL;
        data[37] = 0x0000005800000000ULL;
        data[38] = 0x0000005800000000ULL;
        data[39] = 0x0000005800000000ULL;
        data[40] = 0x0000005800000000ULL;
        data[41] = 0x0000005000000000ULL;
        data[42] = 0x0000005000000000ULL;
        data[43] = 0x0000005000000000ULL;
        data[44] = 0x0000005000000000ULL;
        data[45] = 0x0000005000000000ULL;
        data[46] = 0x0000005000000000ULL;
        data[47] = 0x0000005000000000ULL;
        data[48] = 0x0000005000000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x000000bf00000000ULL;
        data[2] = 0x000000be00000000ULL;
        data[3] = 0x000000bc00000000ULL;
        data[4] = 0x000000bc00000000ULL;
        data[5] = 0x000000b800000000ULL;
        data[6] = 0x000000b800000000ULL;
        data[7] = 0x000000b800000000ULL;
        data[8] = 0x000000b800000000ULL;
        data[9] = 0x000000b000000000ULL;
        data[10] = 0x000000b000000000ULL;
        data[11] = 0x000000b000000000ULL;
        data[12] = 0x000000b000000000ULL;
        data[13] = 0x000000b000000000ULL;
        data[14] = 0x000000b000000000ULL;
        data[15] = 0x000000b000000000ULL;
        data[16] = 0x000000b000000000ULL;
        data[17] = 0x000000a000000000ULL;
        data[18] = 0x000000a000000000ULL;
        data[19] = 0x000000a000000000ULL;
        data[20] = 0x000000a000000000ULL;
        data[21] = 0x000000a000000000ULL;
        data[22] = 0x000000a000000000ULL;
        data[23] = 0x000000a000000000ULL;
        data[24] = 0x000000a000000000ULL;
        data[25] = 0x000000a000000000ULL;
        data[26] = 0x000000a000000000ULL;
        data[27] = 0x000000a000000000ULL;
        data[28] = 0x000000a000000000ULL;
        data[29] = 0x000000a000000000ULL;
        data[30] = 0x000000a000000000ULL;
        data[31] = 0x000000a000000000ULL;
        data[32] = 0x000000a000000000ULL;
    }),
    ::chess::AttackTable(RightShift<33>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x0000007f00000000ULL;
        data[2] = 0x0000007e00000000ULL;
        data[3] = 0x0000007c00000000ULL;
        data[4] = 0x0000007c00000000ULL;
        data[5] = 0x0000007800000000ULL;
        data[6] = 0x0000007800000000ULL;
        data[7] = 0x0000007800000000ULL;
        data[8] = 0x0000007800000000ULL;
        data[9] = 0x0000007000000000ULL;
        data[10] = 0x0000007000000000ULL;
        data[11] = 0x0000007000000000ULL;
        data[12] = 0x0000007000000000ULL;
        data[13] = 0x0000007000000000ULL;
        data[14] = 0x0000007000000000ULL;
        data[15] = 0x0000007000000000ULL;
        data[16] = 0x0000007000000000ULL;
        data[17] = 0x0000006000000000ULL;
        data[18] = 0x0000006000000000ULL;
        data[19] = 0x0000006000000000ULL;
        data[20] = 0x0000006000000000ULL;
        data[21] = 0x0000006000000000ULL;
        data[22] = 0x0000006000000000ULL;
        data[23] = 0x0000006000000000ULL;
        data[24] = 0x0000006000000000ULL;
        data[25] = 0x0000006000000000ULL;
        data[26] = 0x0000006000000000ULL;
        data[27] = 0x0000006000000000ULL;
        data[28] = 0x0000006000000000ULL;
        data[29] = 0x0000006000000000ULL;
        data[30] = 0x0000006000000000ULL;
        data[31] = 0x0000006000000000ULL;
        data[32] = 0x0000006000000000ULL;
        data[33] = 0x0000004000000000ULL;
        data[34] = 0x0000004000000000ULL;
        data[35] = 0x0000004000000000ULL;
        data[36] = 0x0000004000000000ULL;
        data[37] = 0x0000004000000000ULL;
        data[38] = 0x0000004000000000ULL;
        data[39] = 0x0000004000000000ULL;
        data[40] = 0x0000004000000000ULL;
        data[41] = 0x0000004000000000ULL;
        data[42] = 0x0000004000000000ULL;
        data[43] = 0x0000004000000000ULL;
        data[44] = 0x0000004000000000ULL;
        data[45] = 0x0000004000000000ULL;
        data[46] = 0x0000004000000000ULL;
        data[47] = 0x0000004000000000ULL;
        data[48] = 0x0000004000000000ULL;
        data[49] = 0x0000004000000000ULL;
        data[50] = 0x0000004000000000ULL;
        data[51] = 0x0000004000000000ULL;
        data[52] = 0x0000004000000000ULL;
        data[53] = 0x0000004000000000ULL;
        data[54] = 0x0000004000000000ULL;
        data[55] = 0x0000004000000000ULL;
        data[56] = 0x0000004000000000ULL;
        data[57] = 0x0000004000000000ULL;
        data[58] = 0x0000004000000000ULL;
        data[59] = 0x0000004000000000ULL;
        data[60] = 0x0000004000000000ULL;
        data[61] = 0x0000004000000000ULL;
        data[62] = 0x0000004000000000ULL;
        data[63] = 0x0000004000000000ULL;
        data[64] = 0x0000004000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x0000fe0000000000ULL;
        data[2] = 0x0000020000000000ULL;
        data[3] = 0x0000060000000000ULL;
        data[4] = 0x0000020000000000ULL;
        data[5] = 0x00000e0000000000ULL;
        data[6] = 0x0000020000000000ULL;
        data[7] = 0x0000060000000000ULL;
        data[8] = 0x0000020000000000ULL;
        data[9] = 0x00001e0000000000ULL;
        data[10] = 0x0000020000000000ULL;
        data[11] = 0x0000060000000000ULL;
        data[12] = 0x0000020000000000ULL;
        data[13] = 0x00000e0000000000ULL;
        data[14] = 0x0000020000000000ULL;
        data[15] = 0x0000060000000000ULL;
        data[16] = 0x0000020000000000ULL;
        data[17] = 0x00003e0000000000ULL;
        data[18] = 0x0000020000000000ULL;
        data[19] = 0x0000060000000000ULL;
        data[20] = 0x0000020000000000ULL;
        data[21] = 0x00000e0000000000ULL;
        data[22] = 0x0000020000000000ULL;
        data[23] = 0x0000060000000000ULL;
        data[24] = 0x0000020000000000ULL;
        data[25] = 0x00001e0000000000ULL;
        data[26] = 0x0000020000000000ULL;
        data[27] = 0x0000060000000000ULL;
        data[28] = 0x0000020000000000ULL;
        data[29] = 0x00000e0000000000ULL;
        data[30] = 0x0000020000000000ULL;
        data[31] = 0x0000060000000000ULL;
        data[32] = 0x0000020000000000ULL;
        data[33] = 0x00007e0000000000ULL;
        data[34] = 0x0000020000000000ULL;
        data[35] = 0x0000060000000000ULL;
        data[36] = 0x0000020000000000ULL;
        data[37] = 0x00000e0000000000ULL;
        data[38] = 0x0000020000000000ULL;
        data[39] = 0x0000060000000000ULL;
        data[40] = 0x0000020000000000ULL;
        data[41] = 0x00001e0000000000ULL;
        data[42] = 0x0000020000000000ULL;
        data[43] = 0x0000060000000000ULL;
        data[44] = 0x0000020000000000ULL;
        data[45] = 0x00000e0000000000ULL;
        data[46] = 0x0000020000000000ULL;
        data[47] = 0x0000060000000000ULL;
        data[48] = 0x0000020000000000ULL;
        data[49] = 0x00003e0000000000ULL;
        data[50] = 0x0000020000000000ULL;
        data[51] = 0x0000060000000000ULL;
        data[52] = 0x0000020000000000ULL;
        data[53] = 0x00000e0000000000ULL;
        data[54] = 0x0000020000000000ULL;
        data[55] = 0x0000060000000000ULL;
        data[56] = 0x0000020000000000ULL;
        data[57] = 0x00001e0000000000ULL;
        data[58] = 0x0000020000000000ULL;
        data[59] = 0x0000060000000000ULL;
        data[60] = 0x0000020000000000ULL;
        data[61] = 0x00000e0000000000ULL;
        data[62] = 0x0000020000000000ULL;
        data[63] = 0x0000060000000000ULL;
        data[64] = 0x0000020000000000ULL;
    }),
    ::chess::AttackTable(RightShift<42>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x0000fd0000000000ULL;
        data[2] = 0x0000050000000000ULL;
        data[3] = 0x00000d0000000000ULL;
        data[4] = 0x0000050000000000ULL;
        data[5] = 0x00001d0000000000ULL;
        data[6] = 0x0000050000000000ULL;
        data[7] = 0x00000d0000000000ULL;
        data[8] = 0x0000050000000000ULL;
        data[9] = 0x00003d0000000000ULL;
        data[10] = 0x0000050000000000ULL;
        data[11] = 0x00000d0000000000ULL;
        data[12] = 0x0000050000000000ULL;
        data[13] = 0x00001d0000000000ULL;
        data[14] = 0x0000050000000000ULL;
        data[15] = 0x00000d0000000000ULL;
        data[16] = 0x0000050000000000ULL;
        data[17] = 0x00007d0000000000ULL;
        data[18] = 0x0000050000000000ULL;
        data[19] = 0x00000d0000000000ULL;
        data[20] = 0x0000050000000000ULL;
        data[21] = 0x00001d0000000000ULL;
        data[22] = 0x0000050000000000ULL;
        data[23] = 0x00000d0000000000ULL;
        data[24] = 0x0000050000000000ULL;
        data[25] = 0x00003d0000000000ULL;
        data[26] = 0x0000050000000000ULL;
        data[27] = 0x00000d0000000000ULL;
        data[28] = 0x0000050000000000ULL;
        data[29] = 0x00001d0000000000ULL;
        data[30] = 0x0000050000000000ULL;
        data[31] = 0x00000d0000000000ULL;
        data[32] = 0x0000050000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x0000fb0000000000ULL;
        data[2] = 0x0000fa0000000000ULL;
        data[5] = 0x00000b0000000000ULL;
        data[6] = 0x00000a0000000000ULL;
        data[9] = 0x00001b0000000000ULL;
        data[10] = 0x00001a0000000000ULL;
        data[13] = 0x00000b0000000000ULL;
        data[14] = 0x00000a0000000000ULL;
        data[17] = 0x00003b0000000000ULL;
        data[18] = 0x00003a0000000000ULL;
        data[21] = 0x00000b0000000000ULL;
        data[22] = 0x00000a0000000000ULL;
        data[25] = 0x00001b0000000000ULL;
        data[26] = 0x00001a0000000000ULL;
        data[29] = 0x00000b0000000000ULL;
        data[30] = 0x00000a0000000000ULL;
        data[33] = 0x00007b0000000000ULL;
        data[34] = 0x00007a0000000000ULL;
        data[37] = 0x00000b0000000000ULL;
        data[38] = 0x00000a0000000000ULL;
        data[41] = 0x00001b0000000000ULL;
        data[42] = 0x00001a0000000000ULL;
        data[45] = 0x00000b0000000000ULL;
        data[46] = 0x00000a0000000000ULL;
        data[49] = 0x00003b0000000000ULL;
        data[50] = 0x00003a0000000000ULL;
        data[53] = 0x00000b0000000000ULL;
        data[54] = 0x00000a0000000000ULL;
        data[57] = 0x00001b0000000000ULL;
        data[58] = 0x00001a0000000000ULL;
        data[61] = 0x00000b0000000000ULL;
        data[62] = 0x00000a0000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x0000f70000000000ULL;
        data[2] = 0x0000f60000000000ULL;
        data[3] = 0x0000f40000000000ULL;
        data[4] = 0x0000f40000000000ULL;
        data[9] = 0x0000170000000000ULL;
        data[10] = 0x0000160000000000ULL;
        data[11] = 0x0000140000000000ULL;
        data[12] = 0x0000140000000000ULL;
        data[17] = 0x0000370000000000ULL;
        data[18] = 0x0000360000000000ULL;
        data[19] = 0x0000340000000000ULL;
        data[20] = 0x0000340000000000ULL;
        data[25] = 0x0000170000000000ULL;
        data[26] = 0x0000160000000000ULL;
        data[27] = 0x0000140000000000ULL;
        data[28] = 0x0000140000000000ULL;
        data[33] = 0x0000770000000000ULL;
        data[34] = 0x0000760000000000ULL;
        data[35] = 0x0000740000000000ULL;
        data[36] = 0x0000740000000000ULL;
        data[41] = 0x0000170000000000ULL;
        data[42] = 0x0000160000000000ULL;
        data[43] = 0x0000140000000000ULL;
        data[44] = 0x0000140000000000ULL;
        data[49] = 0x0000370000000000ULL;
        data[50] = 0x0000360000000000ULL;
        data[51] = 0x0000340000000000ULL;
        data[52] = 0x0000340000000000ULL;
        data[57] = 0x0000170000000000ULL;
        data[58] = 0x0000160000000000ULL;
        data[59] = 0x0000140000000000ULL;
        data[60] = 0x0000140000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x0000ef0000000000ULL;
        data[2] = 0x0000ee0000000000ULL;
        data[3] = 0x0000ec0000000000ULL;
        data[4] = 0x0000ec0000000000ULL;
        data[5] = 0x0000e80000000000ULL;
        data[6] = 0x0000e80000000000ULL;
        data[7] = 0x0000e80000000000ULL;
        data[8] = 0x0000e80000000000ULL;
        data[17] = 0x00002f0000000000ULL;
        data[18] = 0x00002e0000000000ULL;
        data[19] = 0x00002c0000000000ULL;
        data[20] = 0x00002c0000000000ULL;
        data[21] = 0x0000280000000000ULL;
        data[22] = 0x0000280000000000ULL;
        data[23] = 0x0000280000000000ULL;
        data[24] = 0x0000280000000000ULL;
        data[33] = 0x00006f0000000000ULL;
        data[34] = 0x00006e0000000000ULL;
        data[35] = 0x00006c0000000000ULL;
        data[36] = 0x00006c0000000000ULL;
        data[37] = 0x0000680000000000ULL;
        data[38] = 0x0000680000000000ULL;
        data[39] = 0x0000680000000000ULL;
        data[40] = 0x0000680000000000ULL;
        data[49] = 0x00002f0000000000ULL;
        data[50] = 0x00002e0000000000ULL;
        data[51] = 0x00002c0000000000ULL;
        data[52] = 0x00002c0000000000ULL;
        data[53] = 0x0000280000000000ULL;
        data[54] = 0x0000280000000000ULL;
        data[55] = 0x0000280000000000ULL;
        data[56] = 0x0000280000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x0000df0000000000ULL;
        data[2] = 0x0000de0000000000ULL;
        data[3] = 0x0000dc0000000000ULL;
        data[4] = 0x0000dc0000000000ULL;
        data[5] = 0x0000d80000000000ULL;
        data[6] = 0x0000d80000000000ULL;
        data[7] = 0x0000d80000000000ULL;
        data[8] = 0x0000d80000000000ULL;
        data[9] = 0x0000d00000000000ULL;
        data[10] = 0x0000d00000000000ULL;
        data[11] = 0x0000d00000000000ULL;
        data[12] = 0x0000d00000000000ULL;
        data[13] = 0x0000d00000000000ULL;
        data[14] = 0x0000d00000000000ULL;
        data[15] = 0x0000d00000000000ULL;
        data[16] = 0x0000d00000000000ULL;
        data[33] = 0x00005f0000000000ULL;
        data[34] = 0x00005e0000000000ULL;
        data[35] = 0x00005c0000000000ULL;
        data[36] = 0x00005c0000000000ULL;
        data[37] = 0x0000580000000000ULL;
        data[38] = 0x0000580000000000ULL;
        data[39] = 0x0000580000000000ULL;
        data[40] = 0x0000580000000000ULL;
        data[41] = 0x0000500000000000ULL;
        data[42] = 0x0000500000000000ULL;
        data[43] = 0x0000500000000000ULL;
        data[44] = 0x0000500000000000ULL;
        data[45] = 0x0000500000000000ULL;
        data[46] = 0x0000500000000000ULL;
        data[47] = 0x0000500000000000ULL;
        data[48] = 0x0000500000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x0000bf0000000000ULL;
        data[2] = 0x0000be0000000000ULL;
        data[3] = 0x0000bc0000000000ULL;
        data[4] = 0x0000bc0000000000ULL;
        data[5] = 0x0000b80000000000ULL;
        data[6] = 0x0000b80000000000ULL;
        data[7] = 0x0000b80000000000ULL;
        data[8] = 0x0000b80000000000ULL;
        data[9] = 0x0000b00000000000ULL;
        data[10] = 0x0000b00000000000ULL;
        data[11] = 0x0000b00000000000ULL;
        data[12] = 0x0000b00000000000ULL;
        data[13] = 0x0000b00000000000ULL;
        data[14] = 0x0000b00000000000ULL;
        data[15] = 0x0000b00000000000ULL;
        data[16] = 0x0000b00000000000ULL;
        data[17] = 0x0000a00000000000ULL;
        data[18] = 0x0000a00000000000ULL;
        data[19] = 0x0000a00000000000ULL;
        data[20] = 0x0000a00000000000ULL;
        data[21] = 0x0000a00000000000ULL;
        data[22] = 0x0000a00000000000ULL;
        data[23] = 0x0000a00000000000ULL;
        data[24] = 0x0000a00000000000ULL;
        data[25] = 0x0000a00000000000ULL;
        data[26] = 0x0000a00000000000ULL;
        data[27] = 0x0000a00000000000ULL;
        data[28] = 0x0000a00000000000ULL;
        data[29] = 0x0000a00000000000ULL;
        data[30] = 0x0000a00000000000ULL;
        data[31] = 0x0000a00000000000ULL;
        data[32] = 0x0000a00000000000ULL;
    }),
    ::chess::AttackTable(RightShift<41>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x00007f0000000000ULL;
        data[2] = 0x00007e0000000000ULL;
        data[3] = 0x00007c0000000000ULL;
        data[4] = 0x00007c0000000000ULL;
        data[5] = 0x0000780000000000ULL;
        data[6] = 0x0000780000000000ULL;
        data[7] = 0x0000780000000000ULL;
        data[8] = 0x0000780000000000ULL;
        data[9] = 0x0000700000000000ULL;
        data[10] = 0x0000700000000000ULL;
        data[11] = 0x0000700000000000ULL;
        data[12] = 0x0000700000000000ULL;
        data[13] = 0x0000700000000000ULL;
        data[14] = 0x0000700000000000ULL;
        data[15] = 0x0000700000000000ULL;
        data[16] = 0x0000700000000000ULL;
        data[17] = 0x0000600000000000ULL;
        data[18] = 0x0000600000000000ULL;
        data[19] = 0x0000600000000000ULL;
        data[20] = 0x0000600000000000ULL;
        data[21] = 0x0000600000000000ULL;
        data[22] = 0x0000600000000000ULL;
        data[23] = 0x0000600000000000ULL;
        data[24] = 0x0000600000000000ULL;
        data[25] = 0x0000600000000000ULL;
        data[26] = 0x0000600000000000ULL;
        data[27] = 0x0000600000000000ULL;
        data[28] = 0x0000600000000000ULL;
        data[29] = 0x0000600000000000ULL;
        data[30] = 0x0000600000000000ULL;
        data[31] = 0x0000600000000000ULL;
        data[32] = 0x0000600000000000ULL;
        data[33] = 0x0000400000000000ULL;
        data[34] = 0x0000400000000000ULL;
        data[35] = 0x0000400000000000ULL;
        data[36] = 0x0000400000000000ULL;
        data[37] = 0x0000400000000000ULL;
        data[38] = 0x0000400000000000ULL;
        data[39] = 0x0000400000000000ULL;
        data[40] = 0x0000400000000000ULL;
        data[41] = 0x0000400000000000ULL;
        data[42] = 0x0000400000000000ULL;
        data[43] = 0x0000400000000000ULL;
        data[44] = 0x0000400000000000ULL;
        data[45] = 0x0000400000000000ULL;
        data[46] = 0x0000400000000000ULL;
        data[47] = 0x0000400000000000ULL;
        data[48] = 0x0000400000000000ULL;
        data[49] = 0x0000400000000000ULL;
        data[50] = 0x0000400000000000ULL;
        data[51] = 0x0000400000000000ULL;
        data[52] = 0x0000400000000000ULL;
        data[53] = 0x0000400000000000ULL;
        data[54] = 0x0000400000000000ULL;
        data[55] = 0x0000400000000000ULL;
        data[56] = 0x0000400000000000ULL;
        data[57] = 0x0000400000000000ULL;
        data[58] = 0x0000400000000000ULL;
        data[59] = 0x0000400000000000ULL;
        data[60] = 0x0000400000000000ULL;
        data[61] = 0x0000400000000000ULL;
        data[62] = 0x0000400000000000ULL;
        data[63] = 0x0000400000000000ULL;
        data[64] = 0x0000400000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x00fe000000000000ULL;
        data[2] = 0x0002000000000000ULL;
        data[3] = 0x0006000000000000ULL;
        data[4] = 0x0002000000000000ULL;
        data[5] = 0x000e000000000000ULL;
        data[6] = 0x0002000000000000ULL;
        data[7] = 0x0006000000000000ULL;
        data[8] = 0x0002000000000000ULL;
        data[9] = 0x001e000000000000ULL;
        data[10] = 0x0002000000000000ULL;
        data[11] = 0x0006000000000000ULL;
        data[12] = 0x0002000000000000ULL;
        data[13] = 0x000e000000000000ULL;
        data[14] = 0x0002000000000000ULL;
        data[15] = 0x0006000000000000ULL;
        data[16] = 0x0002000000000000ULL;
        data[17] = 0x003e000000000000ULL;
        data[18] = 0x0002000000000000ULL;
        data[19] = 0x0006000000000000ULL;
        data[20] = 0x0002000000000000ULL;
        data[21] = 0x000e000000000000ULL;
        data[22] = 0x0002000000000000ULL;
        data[23] = 0x0006000000000000ULL;
        data[24] = 0x0002000000000000ULL;
        data[25] = 0x001e000000000000ULL;
        data[26] = 0x0002000000000000ULL;
        data[27] = 0x0006000000000000ULL;
        data[28] = 0x0002000000000000ULL;
        data[29] = 0x000e000000000000ULL;
        data[30] = 0x0002000000000000ULL;
        data[31] = 0x0006000000000000ULL;
        data[32] = 0x0002000000000000ULL;
        data[33] = 0x007e000000000000ULL;
        data[34] = 0x0002000000000000ULL;
        data[35] = 0x0006000000000000ULL;
        data[36] = 0x0002000000000000ULL;
        data[37] = 0x000e000000000000ULL;
        data[38] = 0x0002000000000000ULL;
        data[39] = 0x0006000000000000ULL;
        data[40] = 0x0002000000000000ULL;
        data[41] = 0x001e000000000000ULL;
        data[42] = 0x0002000000000000ULL;
        data[43] = 0x0006000000000000ULL;
        data[44] = 0x0002000000000000ULL;
        data[45] = 0x000e000000000000ULL;
        data[46] = 0x0002000000000000ULL;
        data[47] = 0x0006000000000000ULL;
        data[48] = 0x0002000000000000ULL;
        data[49] = 0x003e000000000000ULL;
        data[50] = 0x0002000000000000ULL;
        data[51] = 0x0006000000000000ULL;
        data[52] = 0x0002000000000000ULL;
        data[53] = 0x000e000000000000ULL;
        data[54] = 0x0002000000000000ULL;
        data[55] = 0x0006000000000000ULL;
        data[56] = 0x0002000000000000ULL;
        data[57] = 0x001e000000000000ULL;
        data[58] = 0x0002000000000000ULL;
        data[59] = 0x0006000000000000ULL;
        data[60] = 0x0002000000000000ULL;
        data[61] = 0x000e000000000000ULL;
        data[62] = 0x0002000000000000ULL;
        data[63] = 0x0006000000000000ULL;
        data[64] = 0x0002000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<50>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00fd000000000000ULL;
        data[2] = 0x0005000000000000ULL;
        data[3] = 0x000d000000000000ULL;
        data[4] = 0x0005000000000000ULL;
        data[5] = 0x001d000000000000ULL;
        data[6] = 0x0005000000000000ULL;
        data[7] = 0x000d000000000000ULL;
        data[8] = 0x0005000000000000ULL;
        data[9] = 0x003d000000000000ULL;
        data[10] = 0x0005000000000000ULL;
        data[11] = 0x000d000000000000ULL;
        data[12] = 0x0005000000000000ULL;
        data[13] = 0x001d000000000000ULL;
        data[14] = 0x0005000000000000ULL;
        data[15] = 0x000d000000000000ULL;
        data[16] = 0x0005000000000000ULL;
        data[17] = 0x007d000000000000ULL;
        data[18] = 0x0005000000000000ULL;
        data[19] = 0x000d000000000000ULL;
        data[20] = 0x0005000000000000ULL;
        data[21] = 0x001d000000000000ULL;
        data[22] = 0x0005000000000000ULL;
        data[23] = 0x000d000000000000ULL;
        data[24] = 0x0005000000000000ULL;
        data[25] = 0x003d000000000000ULL;
        data[26] = 0x0005000000000000ULL;
        data[27] = 0x000d000000000000ULL;
        data[28] = 0x0005000000000000ULL;
        data[29] = 0x001d000000000000ULL;
        data[30] = 0x0005000000000000ULL;
        data[31] = 0x000d000000000000ULL;
        data[32] = 0x0005000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0x00fb000000000000ULL;
        data[2] = 0x00fa000000000000ULL;
        data[5] = 0x000b000000000000ULL;
        data[6] = 0x000a000000000000ULL;
        data[9] = 0x001b000000000000ULL;
        data[10] = 0x001a000000000000ULL;
        data[13] = 0x000b000000000000ULL;
        data[14] = 0x000a000000000000ULL;
        data[17] = 0x003b000000000000ULL;
        data[18] = 0x003a000000000000ULL;
        data[21] = 0x000b000000000000ULL;
        data[22] = 0x000a000000000000ULL;
        data[25] = 0x001b000000000000ULL;
        data[26] = 0x001a000000000000ULL;
        data[29] = 0x000b000000000000ULL;
        data[30] = 0x000a000000000000ULL;
        data[33] = 0x007b000000000000ULL;
        data[34] = 0x007a000000000000ULL;
        data[37] = 0x000b000000000000ULL;
        data[38] = 0x000a000000000000ULL;
        data[41] = 0x001b000000000000ULL;
        data[42] = 0x001a000000000000ULL;
        data[45] = 0x000b000000000000ULL;
        data[46] = 0x000a000000000000ULL;
        data[49] = 0x003b000000000000ULL;
        data[50] = 0x003a000000000000ULL;
        data[53] = 0x000b000000000000ULL;
        data[54] = 0x000a000000000000ULL;
        data[57] = 0x001b000000000000ULL;
        data[58] = 0x001a000000000000ULL;
        data[61] = 0x000b000000000000ULL;
        data[62] = 0x000a000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0x00f7000000000000ULL;
        data[2] = 0x00f6000000000000ULL;
        data[3] = 0x00f4000000000000ULL;
        data[4] = 0x00f4000000000000ULL;
        data[9] = 0x0017000000000000ULL;
        data[10] = 0x0016000000000000ULL;
        data[11] = 0x0014000000000000ULL;
        data[12] = 0x0014000000000000ULL;
        data[17] = 0x0037000000000000ULL;
        data[18] = 0x0036000000000000ULL;
        data[19] = 0x0034000000000000ULL;
        data[20] = 0x0034000000000000ULL;
        data[25] = 0x0017000000000000ULL;
        data[26] = 0x0016000000000000ULL;
        data[27] = 0x0014000000000000ULL;
        data[28] = 0x0014000000000000ULL;
        data[33] = 0x0077000000000000ULL;
        data[34] = 0x0076000000000000ULL;
        data[35] = 0x0074000000000000ULL;
        data[36] = 0x0074000000000000ULL;
        data[41] = 0x0017000000000000ULL;
        data[42] = 0x0016000000000000ULL;
        data[43] = 0x0014000000000000ULL;
        data[44] = 0x0014000000000000ULL;
        data[49] = 0x0037000000000000ULL;
        data[50] = 0x0036000000000000ULL;
        data[51] = 0x0034000000000000ULL;
        data[52] = 0x0034000000000000ULL;
        data[57] = 0x0017000000000000ULL;
        data[58] = 0x0016000000000000ULL;
        data[59] = 0x0014000000000000ULL;
        data[60] = 0x0014000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0x00ef000000000000ULL;
        data[2] = 0x00ee000000000000ULL;
        data[3] = 0x00ec000000000000ULL;
        data[4] = 0x00ec000000000000ULL;
        data[5] = 0x00e8000000000000ULL;
        data[6] = 0x00e8000000000000ULL;
        data[7] = 0x00e8000000000000ULL;
        data[8] = 0x00e8000000000000ULL;
        data[17] = 0x002f000000000000ULL;
        data[18] = 0x002e000000000000ULL;
        data[19] = 0x002c000000000000ULL;
        data[20] = 0x002c000000000000ULL;
        data[21] = 0x0028000000000000ULL;
        data[22] = 0x0028000000000000ULL;
        data[23] = 0x0028000000000000ULL;
        data[24] = 0x0028000000000000ULL;
        data[33] = 0x006f000000000000ULL;
        data[34] = 0x006e000000000000ULL;
        data[35] = 0x006c000000000000ULL;
        data[36] = 0x006c000000000000ULL;
        data[37] = 0x0068000000000000ULL;
        data[38] = 0x0068000000000000ULL;
        data[39] = 0x0068000000000000ULL;
        data[40] = 0x0068000000000000ULL;
        data[49] = 0x002f000000000000ULL;
        data[50] = 0x002e000000000000ULL;
        data[51] = 0x002c000000000000ULL;
        data[52] = 0x002c000000000000ULL;
        data[53] = 0x0028000000000000ULL;
        data[54] = 0x0028000000000000ULL;
        data[55] = 0x0028000000000000ULL;
        data[56] = 0x0028000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0x00df000000000000ULL;
        data[2] = 0x00de000000000000ULL;
        data[3] = 0x00dc000000000000ULL;
        data[4] = 0x00dc000000000000ULL;
        data[5] = 0x00d8000000000000ULL;
        data[6] = 0x00d8000000000000ULL;
        data[7] = 0x00d8000000000000ULL;
        data[8] = 0x00d8000000000000ULL;
        data[9] = 0x00d0000000000000ULL;
        data[10] = 0x00d0000000000000ULL;
        data[11] = 0x00d0000000000000ULL;
        data[12] = 0x00d0000000000000ULL;
        data[13] = 0x00d0000000000000ULL;
        data[14] = 0x00d0000000000000ULL;
        data[15] = 0x00d0000000000000ULL;
        data[16] = 0x00d0000000000000ULL;
        data[33] = 0x005f000000000000ULL;
        data[34] = 0x005e000000000000ULL;
        data[35] = 0x005c000000000000ULL;
        data[36] = 0x005c000000000000ULL;
        data[37] = 0x0058000000000000ULL;
        data[38] = 0x0058000000000000ULL;
        data[39] = 0x0058000000000000ULL;
        data[40] = 0x0058000000000000ULL;
        data[41] = 0x0050000000000000ULL;
        data[42] = 0x0050000000000000ULL;
        data[43] = 0x0050000000000000ULL;
        data[44] = 0x0050000000000000ULL;
        data[45] = 0x0050000000000000ULL;
        data[46] = 0x0050000000000000ULL;
        data[47] = 0x0050000000000000ULL;
        data[48] = 0x0050000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0x00bf000000000000ULL;
        data[2] = 0x00be000000000000ULL;
        data[3] = 0x00bc000000000000ULL;
        data[4] = 0x00bc000000000000ULL;
        data[5] = 0x00b8000000000000ULL;
        data[6] = 0x00b8000000000000ULL;
        data[7] = 0x00b8000000000000ULL;
        data[8] = 0x00b8000000000000ULL;
        data[9] = 0x00b0000000000000ULL;
        data[10] = 0x00b0000000000000ULL;
        data[11] = 0x00b0000000000000ULL;
        data[12] = 0x00b0000000000000ULL;
        data[13] = 0x00b0000000000000ULL;
        data[14] = 0x00b0000000000000ULL;
        data[15] = 0x00b0000000000000ULL;
        data[16] = 0x00b0000000000000ULL;
        data[17] = 0x00a0000000000000ULL;
        data[18] = 0x00a0000000000000ULL;
        data[19] = 0x00a0000000000000ULL;
        data[20] = 0x00a0000000000000ULL;
        data[21] = 0x00a0000000000000ULL;
        data[22] = 0x00a0000000000000ULL;
        data[23] = 0x00a0000000000000ULL;
        data[24] = 0x00a0000000000000ULL;
        data[25] = 0x00a0000000000000ULL;
        data[26] = 0x00a0000000000000ULL;
        data[27] = 0x00a0000000000000ULL;
        data[28] = 0x00a0000000000000ULL;
        data[29] = 0x00a0000000000000ULL;
        data[30] = 0x00a0000000000000ULL;
        data[31] = 0x00a0000000000000ULL;
        data[32] = 0x00a0000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<49>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x007f000000000000ULL;
        data[2] = 0x007e000000000000ULL;
        data[3] = 0x007c000000000000ULL;
        data[4] = 0x007c000000000000ULL;
        data[5] = 0x0078000000000000ULL;
        data[6] = 0x0078000000000000ULL;
        data[7] = 0x0078000000000000ULL;
        data[8] = 0x0078000000000000ULL;
        data[9] = 0x0070000000000000ULL;
        data[10] = 0x0070000000000000ULL;
        data[11] = 0x0070000000000000ULL;
        data[12] = 0x0070000000000000ULL;
        data[13] = 0x0070000000000000ULL;
        data[14] = 0x0070000000000000ULL;
        data[15] = 0x0070000000000000ULL;
        data[16] = 0x0070000000000000ULL;
        data[17] = 0x0060000000000000ULL;
        data[18] = 0x0060000000000000ULL;
        data[19] = 0x0060000000000000ULL;
        data[20] = 0x0060000000000000ULL;
        data[21] = 0x0060000000000000ULL;
        data[22] = 0x0060000000000000ULL;
        data[23] = 0x0060000000000000ULL;
        data[24] = 0x0060000000000000ULL;
        data[25] = 0x0060000000000000ULL;
        data[26] = 0x0060000000000000ULL;
        data[27] = 0x0060000000000000ULL;
        data[28] = 0x0060000000000000ULL;
        data[29] = 0x0060000000000000ULL;
        data[30] = 0x0060000000000000ULL;
        data[31] = 0x0060000000000000ULL;
        data[32] = 0x0060000000000000ULL;
        data[33] = 0x0040000000000000ULL;
        data[34] = 0x0040000000000000ULL;
        data[35] = 0x0040000000000000ULL;
        data[36] = 0x0040000000000000ULL;
        data[37] = 0x0040000000000000ULL;
        data[38] = 0x0040000000000000ULL;
        data[39] = 0x0040000000000000ULL;
        data[40] = 0x0040000000000000ULL;
        data[41] = 0x0040000000000000ULL;
        data[42] = 0x0040000000000000ULL;
        data[43] = 0x0040000000000000ULL;
        data[44] = 0x0040000000000000ULL;
        data[45] = 0x0040000000000000ULL;
        data[46] = 0x0040000000000000ULL;
        data[47] = 0x0040000000000000ULL;
        data[48] = 0x0040000000000000ULL;
        data[49] = 0x0040000000000000ULL;
        data[50] = 0x0040000000000000ULL;
        data[51] = 0x0040000000000000ULL;
        data[52] = 0x0040000000000000ULL;
        data[53] = 0x0040000000000000ULL;
        data[54] = 0x0040000000000000ULL;
        data[55] = 0x0040000000000000ULL;
        data[56] = 0x0040000000000000ULL;
        data[57] = 0x0040000000000000ULL;
        data[58] = 0x0040000000000000ULL;
        data[59] = 0x0040000000000000ULL;
        data[60] = 0x0040000000000000ULL;
        data[61] = 0x0040000000000000ULL;
        data[62] = 0x0040000000000000ULL;
        data[63] = 0x0040000000000000ULL;
        data[64] = 0x0040000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0xfe00000000000000ULL;
        data[2] = 0x0200000000000000ULL;
        data[3] = 0x0600000000000000ULL;
        data[4] = 0x0200000000000000ULL;
        data[5] = 0x0e00000000000000ULL;
        data[6] = 0x0200000000000000ULL;
        data[7] = 0x0600000000000000ULL;
        data[8] = 0x0200000000000000ULL;
        data[9] = 0x1e00000000000000ULL;
        data[10] = 0x0200000000000000ULL;
        data[11] = 0x0600000000000000ULL;
        data[12] = 0x0200000000000000ULL;
        data[13] = 0x0e00000000000000ULL;
        data[14] = 0x0200000000000000ULL;
        data[15] = 0x0600000000000000ULL;
        data[16] = 0x0200000000000000ULL;
        data[17] = 0x3e00000000000000ULL;
        data[18] = 0x0200000000000000ULL;
        data[19] = 0x0600000000000000ULL;
        data[20] = 0x0200000000000000ULL;
        data[21] = 0x0e00000000000000ULL;
        data[22] = 0x0200000000000000ULL;
        data[23] = 0x0600000000000000ULL;
        data[24] = 0x0200000000000000ULL;
        data[25] = 0x1e00000000000000ULL;
        data[26] = 0x0200000000000000ULL;
        data[27] = 0x0600000000000000ULL;
        data[28] = 0x0200000000000000ULL;
        data[29] = 0x0e00000000000000ULL;
        data[30] = 0x0200000000000000ULL;
        data[31] = 0x0600000000000000ULL;
        data[32] = 0x0200000000000000ULL;
        data[33] = 0x7e00000000000000ULL;
        data[34] = 0x0200000000000000ULL;
        data[35] = 0x0600000000000000ULL;
        data[36] = 0x0200000000000000ULL;
        data[37] = 0x0e00000000000000ULL;
        data[38] = 0x0200000000000000ULL;
        data[39] = 0x0600000000000000ULL;
        data[40] = 0x0200000000000000ULL;
        data[41] = 0x1e00000000000000ULL;
        data[42] = 0x0200000000000000ULL;
        data[43] = 0x0600000000000000ULL;
        data[44] = 0x0200000000000000ULL;
        data[45] = 0x0e00000000000000ULL;
        data[46] = 0x0200000000000000ULL;
        data[47] = 0x0600000000000000ULL;
        data[48] = 0x0200000000000000ULL;
        data[49] = 0x3e00000000000000ULL;
        data[50] = 0x0200000000000000ULL;
        data[51] = 0x0600000000000000ULL;
        data[52] = 0x0200000000000000ULL;
        data[53] = 0x0e00000000000000ULL;
        data[54] = 0x0200000000000000ULL;
        data[55] = 0x0600000000000000ULL;
        data[56] = 0x0200000000000000ULL;
        data[57] = 0x1e00000000000000ULL;
        data[58] = 0x0200000000000000ULL;
        data[59] = 0x0600000000000000ULL;
        data[60] = 0x0200000000000000ULL;
        data[61] = 0x0e00000000000000ULL;
        data[62] = 0x0200000000000000ULL;
        data[63] = 0x0600000000000000ULL;
        data[64] = 0x0200000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<58>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0xfd00000000000000ULL;
        data[2] = 0x0500000000000000ULL;
        data[3] = 0x0d00000000000000ULL;
        data[4] = 0x0500000000000000ULL;
        data[5] = 0x1d00000000000000ULL;
        data[6] = 0x0500000000000000ULL;
        data[7] = 0x0d00000000000000ULL;
        data[8] = 0x0500000000000000ULL;
        data[9] = 0x3d00000000000000ULL;
        data[10] = 0x0500000000000000ULL;
        data[11] = 0x0d00000000000000ULL;
        data[12] = 0x0500000000000000ULL;
        data[13] = 0x1d00000000000000ULL;
        data[14] = 0x0500000000000000ULL;
        data[15] = 0x0d00000000000000ULL;
        data[16] = 0x0500000000000000ULL;
        data[17] = 0x7d00000000000000ULL;
        data[18] = 0x0500000000000000ULL;
        data[19] = 0x0d00000000000000ULL;
        data[20] = 0x0500000000000000ULL;
        data[21] = 0x1d00000000000000ULL;
        data[22] = 0x0500000000000000ULL;
        data[23] = 0x0d00000000000000ULL;
        data[24] = 0x0500000000000000ULL;
        data[25] = 0x3d00000000000000ULL;
        data[26] = 0x0500000000000000ULL;
        data[27] = 0x0d00000000000000ULL;
        data[28] = 0x0500000000000000ULL;
        data[29] = 0x1d00000000000000ULL;
        data[30] = 0x0500000000000000ULL;
        data[31] = 0x0d00000000000000ULL;
        data[32] = 0x0500000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [63]();
        data[1] = 0xfb00000000000000ULL;
        data[2] = 0xfa00000000000000ULL;
        data[5] = 0x0b00000000000000ULL;
        data[6] = 0x0a00000000000000ULL;
        data[9] = 0x1b00000000000000ULL;
        data[10] = 0x1a00000000000000ULL;
        data[13] = 0x0b00000000000000ULL;
        data[14] = 0x0a00000000000000ULL;
        data[17] = 0x3b00000000000000ULL;
        data[18] = 0x3a00000000000000ULL;
        data[21] = 0x0b00000000000000ULL;
        data[22] = 0x0a00000000000000ULL;
        data[25] = 0x1b00000000000000ULL;
        data[26] = 0x1a00000000000000ULL;
        data[29] = 0x0b00000000000000ULL;
        data[30] = 0x0a00000000000000ULL;
        data[33] = 0x7b00000000000000ULL;
        data[34] = 0x7a00000000000000ULL;
        data[37] = 0x0b00000000000000ULL;
        data[38] = 0x0a00000000000000ULL;
        data[41] = 0x1b00000000000000ULL;
        data[42] = 0x1a00000000000000ULL;
        data[45] = 0x0b00000000000000ULL;
        data[46] = 0x0a00000000000000ULL;
        data[49] = 0x3b00000000000000ULL;
        data[50] = 0x3a00000000000000ULL;
        data[53] = 0x0b00000000000000ULL;
        data[54] = 0x0a00000000000000ULL;
        data[57] = 0x1b00000000000000ULL;
        data[58] = 0x1a00000000000000ULL;
        data[61] = 0x0b00000000000000ULL;
        data[62] = 0x0a00000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [61]();
        data[1] = 0xf700000000000000ULL;
        data[2] = 0xf600000000000000ULL;
        data[3] = 0xf400000000000000ULL;
        data[4] = 0xf400000000000000ULL;
        data[9] = 0x1700000000000000ULL;
        data[10] = 0x1600000000000000ULL;
        data[11] = 0x1400000000000000ULL;
        data[12] = 0x1400000000000000ULL;
        data[17] = 0x3700000000000000ULL;
        data[18] = 0x3600000000000000ULL;
        data[19] = 0x3400000000000000ULL;
        data[20] = 0x3400000000000000ULL;
        data[25] = 0x1700000000000000ULL;
        data[26] = 0x1600000000000000ULL;
        data[27] = 0x1400000000000000ULL;
        data[28] = 0x1400000000000000ULL;
        data[33] = 0x7700000000000000ULL;
        data[34] = 0x7600000000000000ULL;
        data[35] = 0x7400000000000000ULL;
        data[36] = 0x7400000000000000ULL;
        data[41] = 0x1700000000000000ULL;
        data[42] = 0x1600000000000000ULL;
        data[43] = 0x1400000000000000ULL;
        data[44] = 0x1400000000000000ULL;
        data[49] = 0x3700000000000000ULL;
        data[50] = 0x3600000000000000ULL;
        data[51] = 0x3400000000000000ULL;
        data[52] = 0x3400000000000000ULL;
        data[57] = 0x1700000000000000ULL;
        data[58] = 0x1600000000000000ULL;
        data[59] = 0x1400000000000000ULL;
        data[60] = 0x1400000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [57]();
        data[1] = 0xef00000000000000ULL;
        data[2] = 0xee00000000000000ULL;
        data[3] = 0xec00000000000000ULL;
        data[4] = 0xec00000000000000ULL;
        data[5] = 0xe800000000000000ULL;
        data[6] = 0xe800000000000000ULL;
        data[7] = 0xe800000000000000ULL;
        data[8] = 0xe800000000000000ULL;
        data[17] = 0x2f00000000000000ULL;
        data[18] = 0x2e00000000000000ULL;
        data[19] = 0x2c00000000000000ULL;
        data[20] = 0x2c00000000000000ULL;
        data[21] = 0x2800000000000000ULL;
        data[22] = 0x2800000000000000ULL;
        data[23] = 0x2800000000000000ULL;
        data[24] = 0x2800000000000000ULL;
        data[33] = 0x6f00000000000000ULL;
        data[34] = 0x6e00000000000000ULL;
        data[35] = 0x6c00000000000000ULL;
        data[36] = 0x6c00000000000000ULL;
        data[37] = 0x6800000000000000ULL;
        data[38] = 0x6800000000000000ULL;
        data[39] = 0x6800000000000000ULL;
        data[40] = 0x6800000000000000ULL;
        data[49] = 0x2f00000000000000ULL;
        data[50] = 0x2e00000000000000ULL;
        data[51] = 0x2c00000000000000ULL;
        data[52] = 0x2c00000000000000ULL;
        data[53] = 0x2800000000000000ULL;
        data[54] = 0x2800000000000000ULL;
        data[55] = 0x2800000000000000ULL;
        data[56] = 0x2800000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [49]();
        data[1] = 0xdf00000000000000ULL;
        data[2] = 0xde00000000000000ULL;
        data[3] = 0xdc00000000000000ULL;
        data[4] = 0xdc00000000000000ULL;
        data[5] = 0xd800000000000000ULL;
        data[6] = 0xd800000000000000ULL;
        data[7] = 0xd800000000000000ULL;
        data[8] = 0xd800000000000000ULL;
        data[9] = 0xd000000000000000ULL;
        data[10] = 0xd000000000000000ULL;
        data[11] = 0xd000000000000000ULL;
        data[12] = 0xd000000000000000ULL;
        data[13] = 0xd000000000000000ULL;
        data[14] = 0xd000000000000000ULL;
        data[15] = 0xd000000000000000ULL;
        data[16] = 0xd000000000000000ULL;
        data[33] = 0x5f00000000000000ULL;
        data[34] = 0x5e00000000000000ULL;
        data[35] = 0x5c00000000000000ULL;
        data[36] = 0x5c00000000000000ULL;
        data[37] = 0x5800000000000000ULL;
        data[38] = 0x5800000000000000ULL;
        data[39] = 0x5800000000000000ULL;
        data[40] = 0x5800000000000000ULL;
        data[41] = 0x5000000000000000ULL;
        data[42] = 0x5000000000000000ULL;
        data[43] = 0x5000000000000000ULL;
        data[44] = 0x5000000000000000ULL;
        data[45] = 0x5000000000000000ULL;
        data[46] = 0x5000000000000000ULL;
        data[47] = 0x5000000000000000ULL;
        data[48] = 0x5000000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [33]();
        data[1] = 0xbf00000000000000ULL;
        data[2] = 0xbe00000000000000ULL;
        data[3] = 0xbc00000000000000ULL;
        data[4] = 0xbc00000000000000ULL;
        data[5] = 0xb800000000000000ULL;
        data[6] = 0xb800000000000000ULL;
        data[7] = 0xb800000000000000ULL;
        data[8] = 0xb800000000000000ULL;
        data[9] = 0xb000000000000000ULL;
        data[10] = 0xb000000000000000ULL;
        data[11] = 0xb000000000000000ULL;
        data[12] = 0xb000000000000000ULL;
        data[13] = 0xb000000000000000ULL;
        data[14] = 0xb000000000000000ULL;
        data[15] = 0xb000000000000000ULL;
        data[16] = 0xb000000000000000ULL;
        data[17] = 0xa000000000000000ULL;
        data[18] = 0xa000000000000000ULL;
        data[19] = 0xa000000000000000ULL;
        data[20] = 0xa000000000000000ULL;
        data[21] = 0xa000000000000000ULL;
        data[22] = 0xa000000000000000ULL;
        data[23] = 0xa000000000000000ULL;
        data[24] = 0xa000000000000000ULL;
        data[25] = 0xa000000000000000ULL;
        data[26] = 0xa000000000000000ULL;
        data[27] = 0xa000000000000000ULL;
        data[28] = 0xa000000000000000ULL;
        data[29] = 0xa000000000000000ULL;
        data[30] = 0xa000000000000000ULL;
        data[31] = 0xa000000000000000ULL;
        data[32] = 0xa000000000000000ULL;
    }),
    ::chess::AttackTable(RightShift<57>::hash, [](uint64_t *& data) {
        data = new uint64_t [65]();
        data[1] = 0x7f00000000000000ULL;
        data[2] = 0x7e00000000000000ULL;
        data[3] = 0x7c00000000000000ULL;
        data[4] = 0x7c00000000000000ULL;
        data[5] = 0x7800000000000000ULL;
        data[6] = 0x7800000000000000ULL;
        data[7] = 0x7800000000000000ULL;
        data[8] = 0x7800000000000000ULL;
        data[9] = 0x7000000000000000ULL;
        data[10] = 0x7000000000000000ULL;
        data[11] = 0x7000000000000000ULL;
        data[12] = 0x7000000000000000ULL;
        data[13] = 0x7000000000000000ULL;
        data[14] = 0x7000000000000000ULL;
        data[15] = 0x7000000000000000ULL;
        data[16] = 0x7000000000000000ULL;
        data[17] = 0x6000000000000000ULL;
        data[18] = 0x6000000000000000ULL;
        data[19] = 0x6000000000000000ULL;
        data[20] = 0x6000000000000000ULL;
        data[21] = 0x6000000000000000ULL;
        data[22] = 0x6000000000000000ULL;
        data[23] = 0x6000000000000000ULL;
        data[24] = 0x6000000000000000ULL;
        data[25] = 0x6000000000000000ULL;
        data[26] = 0x6000000000000000ULL;
        data[27] = 0x6000000000000000ULL;
        data[28] = 0x6000000000000000ULL;
        data[29] = 0x6000000000000000ULL;
        data[30] = 0x6000000000000000ULL;
        data[31] = 0x6000000000000000ULL;
        data[32] = 0x6000000000000000ULL;
        data[33] = 0x4000000000000000ULL;
        data[34] = 0x4000000000000000ULL;
        data[35] = 0x4000000000000000ULL;
        data[36] = 0x4000000000000000ULL;
        data[37] = 0x4000000000000000ULL;
        data[38] = 0x4000000000000000ULL;
        data[39] = 0x4000000000000000ULL;
        data[40] = 0x4000000000000000ULL;
        data[41] = 0x4000000000000000ULL;
        data[42] = 0x4000000000000000ULL;
        data[43] = 0x4000000000000000ULL;
        data[44] = 0x4000000000000000ULL;
        data[45] = 0x4000000000000000ULL;
        data[46] = 0x4000000000000000ULL;
        data[47] = 0x4000000000000000ULL;
        data[48] = 0x4000000000000000ULL;
        data[49] = 0x4000000000000000ULL;
        data[50] = 0x4000000000000000ULL;
        data[51] = 0x4000000000000000ULL;
        data[52] = 0x4000000000000000ULL;
        data[53] = 0x4000000000000000ULL;
        data[54] = 0x4000000000000000ULL;
        data[55] = 0x4000000000000000ULL;
        data[56] = 0x4000000000000000ULL;
        data[57] = 0x4000000000000000ULL;
        data[58] = 0x4000000000000000ULL;
        data[59] = 0x4000000000000000ULL;
        data[60] = 0x4000000000000000ULL;
        data[61] = 0x4000000000000000ULL;
        data[62] = 0x4000000000000000ULL;
        data[63] = 0x4000000000000000ULL;
        data[64] = 0x4000000000000000ULL;
    }),
};

const ::chess::AttackTable BB_DIAG_ATTACKS[64] = {
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x8040201008040200ULL;
        data[26] = 0x0000000000000200ULL;
        data[27] = 0x0000000000000200ULL;
        data[30] = 0x0000001008040200ULL;
        data[41] = 0x0000000000000200ULL;
        data[56] = 0x0000000000000200ULL;
        data[62] = 0x0000000000040200ULL;
        data[71] = 0x0000000000000200ULL;
        data[72] = 0x0000000000000200ULL;
        data[80] = 0x0000000000000200ULL;
        data[92] = 0x0000000000040200ULL;
        data[93] = 0x0000000000040200ULL;
        data[101] = 0x0000000000000200ULL;
        data[108] = 0x0000000008040200ULL;
        data[111] = 0x0000000000000200ULL;
        data[122] = 0x0000000000040200ULL;
        data[125] = 0x0000000000000200ULL;
        data[137] = 0x0000000008040200ULL;
        data[138] = 0x0000201008040200ULL;
        data[146] = 0x0000000000040200ULL;
        data[156] = 0x0000000000000200ULL;
        data[167] = 0x0000001008040200ULL;
        data[177] = 0x0000000000040200ULL;
        data[179] = 0x0000000000000200ULL;
        data[191] = 0x0000000008040200ULL;
        data[209] = 0x0000000000000200ULL;
        data[218] = 0x0000000000000200ULL;
        data[222] = 0x0000001008040200ULL;
        data[224] = 0x0000000000000200ULL;
        data[245] = 0x0000000000040200ULL;
        data[248] = 0x0000000000000200ULL;
        data[254] = 0x0000000000000200ULL;
        data[263] = 0x0000000000000200ULL;
        data[275] = 0x0000000000040200ULL;
        data[284] = 0x0000000000040200ULL;
        data[290] = 0x0000000008040200ULL;
        data[293] = 0x0000000000000200ULL;
        data[314] = 0x0000000000040200ULL;
        data[316] = 0x0000000000000200ULL;
        data[321] = 0x0040201008040200ULL;
        data[329] = 0x0000000008040200ULL;
        data[347] = 0x0000000000000200ULL;
        data[359] = 0x0000001008040200ULL;
        data[361] = 0x0000000000000200ULL;
        data[371] = 0x0000000000000200ULL;
        data[382] = 0x0000000000040200ULL;
        data[392] = 0x0000000000000200ULL;
        data[400] = 0x0000000000000200ULL;
        data[401] = 0x0000000000000200ULL;
        data[413] = 0x0000000000040200ULL;
        data[416] = 0x0000000000000200ULL;
        data[428] = 0x0000000008040200ULL;
        data[431] = 0x0000000000000200ULL;
        data[437] = 0x0000000000040200ULL;
        data[445] = 0x0000000000000200ULL;
        data[446] = 0x0000000000000200ULL;
        data[458] = 0x0000201008040200ULL;
        data[466] = 0x0000000000040200ULL;
        data[467] = 0x0000000000040200ULL;
        data[476] = 0x0000000000000200ULL;
        data[482] = 0x0000000008040200ULL;
        data[497] = 0x0000000000040200ULL;
        data[508] = 0x0000000000000200ULL;
        data[511] = 0x0000000008040200ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0080402010080500ULL;
        data[34] = 0x0000000000080500ULL;
        data[39] = 0x0000002010080500ULL;
        data[71] = 0x0000000000000500ULL;
        data[76] = 0x0000000000000500ULL;
        data[110] = 0x0000000000000500ULL;
        data[115] = 0x0000000000000500ULL;
        data[118] = 0x0000000010080500ULL;
        data[134] = 0x0000000000080500ULL;
        data[156] = 0x0000000010080500ULL;
        data[173] = 0x0000000000080500ULL;
        data[193] = 0x0000000000000500ULL;
        data[210] = 0x0000000000000500ULL;
        data[232] = 0x0000000000000500ULL;
        data[248] = 0x0000000000000500ULL;
        data[251] = 0x0000000000080500ULL;
        data[257] = 0x0000402010080500ULL;
        data[290] = 0x0000000000080500ULL;
        data[295] = 0x0000002010080500ULL;
        data[327] = 0x0000000000000500ULL;
        data[332] = 0x0000000000000500ULL;
        data[366] = 0x0000000000000500ULL;
        data[371] = 0x0000000000000500ULL;
        data[374] = 0x0000000010080500ULL;
        data[390] = 0x0000000000080500ULL;
        data[412] = 0x0000000010080500ULL;
        data[429] = 0x0000000000080500ULL;
        data[449] = 0x0000000000000500ULL;
        data[466] = 0x0000000000000500ULL;
        data[488] = 0x0000000000000500ULL;
        data[504] = 0x0000000000000500ULL;
        data[507] = 0x0000000000080500ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x0000804020110a00ULL;
        data[52] = 0x0000000000000a00ULL;
        data[62] = 0x0000000000000a00ULL;
        data[67] = 0x0000000000110a00ULL;
        data[78] = 0x0000004020110a00ULL;
        data[129] = 0x0000000000000a00ULL;
        data[139] = 0x0000000000000a00ULL;
        data[142] = 0x0000000000010a00ULL;
        data[145] = 0x0000000020100a00ULL;
        data[152] = 0x0000000000010a00ULL;
        data[178] = 0x0000000000100a00ULL;
        data[219] = 0x0000000000010a00ULL;
        data[222] = 0x0000000020100a00ULL;
        data[229] = 0x0000000000010a00ULL;
        data[235] = 0x0000000020110a00ULL;
        data[255] = 0x0000000000100a00ULL;
        data[268] = 0x0000000000110a00ULL;
        data[296] = 0x0000000000000a00ULL;
        data[312] = 0x0000000020110a00ULL;
        data[329] = 0x0000000000000a00ULL;
        data[345] = 0x0000000000110a00ULL;
        data[373] = 0x0000000000000a00ULL;
        data[386] = 0x0000000000010a00ULL;
        data[406] = 0x0000000000000a00ULL;
        data[412] = 0x0000000000100a00ULL;
        data[419] = 0x0000000000010a00ULL;
        data[422] = 0x0000804020100a00ULL;
        data[463] = 0x0000000000010a00ULL;
        data[489] = 0x0000000000100a00ULL;
        data[496] = 0x0000000000010a00ULL;
        data[499] = 0x0000004020100a00ULL;
        data[502] = 0x0000000000110a00ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_5_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0000008041221400ULL;
        data[6] = 0x0000000040201400ULL;
        data[14] = 0x0000000001021400ULL;
        data[66] = 0x0000000000021400ULL;
        data[71] = 0x0000000000001400ULL;
        data[92] = 0x0000000001221400ULL;
        data[98] = 0x0000000000201400ULL;
        data[106] = 0x0000000001021400ULL;
        data[129] = 0x0000000040201400ULL;
        data[158] = 0x0000000000021400ULL;
        data[181] = 0x0000008040201400ULL;
        data[189] = 0x0000000001021400ULL;
        data[195] = 0x0000000000001400ULL;
        data[215] = 0x0000000040221400ULL;
        data[220] = 0x0000000000201400ULL;
        data[273] = 0x0000000000201400ULL;
        data[280] = 0x0000000001021400ULL;
        data[286] = 0x0000000000001400ULL;
        data[304] = 0x0000008040201400ULL;
        data[307] = 0x0000000000221400ULL;
        data[317] = 0x0000000000001400ULL;
        data[338] = 0x0000000041221400ULL;
        data[369] = 0x0000000000001400ULL;
        data[390] = 0x0000008040221400ULL;
        data[395] = 0x0000000000201400ULL;
        data[404] = 0x0000000000021400ULL;
        data[409] = 0x0000000000001400ULL;
        data[429] = 0x0000000001221400ULL;
        data[461] = 0x0000000000001400ULL;
        data[482] = 0x0000000000221400ULL;
        data[492] = 0x0000000000001400ULL;
        data[495] = 0x0000000000021400ULL;
    }),
    ::chess::AttackTable(RightShift<11>::hash, [](uint64_t *& data) {
        data = new uint64_t [18567]();
        data[1] = 0x0000000182442800ULL;
        data[2] = 0x0000000080402800ULL;
        data[5] = 0x0000000102042800ULL;
        data[6] = 0x0000000000002800ULL;
        data[129] = 0x0000000080442800ULL;
        data[130] = 0x0000000080402800ULL;
        data[133] = 0x0000000000042800ULL;
        data[134] = 0x0000000000002800ULL;
        data[2049] = 0x0000000102442800ULL;
        data[2050] = 0x0000000000402800ULL;
        data[2053] = 0x0000000102042800ULL;
        data[2054] = 0x0000000000002800ULL;
        data[2177] = 0x0000000000442800ULL;
        data[2178] = 0x0000000000402800ULL;
        data[2181] = 0x0000000000042800ULL;
        data[2182] = 0x0000000000002800ULL;
        data[16385] = 0x0000000082442800ULL;
        data[16386] = 0x0000000080402800ULL;
        data[16389] = 0x0000000002042800ULL;
        data[16390] = 0x0000000000002800ULL;
        data[16513] = 0x0000000080442800ULL;
        data[16514] = 0x0000000080402800ULL;
        data[16517] = 0x0000000000042800ULL;
        data[16518] = 0x0000000000002800ULL;
        data[18433] = 0x0000000002442800ULL;
        data[18434] = 0x0000000000402800ULL;
        data[18437] = 0x0000000002042800ULL;
        data[18438] = 0x0000000000002800ULL;
        data[18561] = 0x0000000000442800ULL;
        data[18562] = 0x0000000000402800ULL;
        data[18565] = 0x0000000000042800ULL;
        data[18566] = 0x0000000000002800ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0000010204885000ULL;
        data[26] = 0x0000000000085000ULL;
        data[31] = 0x0000000000085000ULL;
        data[39] = 0x0000000204885000ULL;
        data[48] = 0x0000000000885000ULL;
        data[70] = 0x0000000000085000ULL;
        data[87] = 0x0000000000885000ULL;
        data[92] = 0x0000000000885000ULL;
        data[131] = 0x0000000000885000ULL;
        data[136] = 0x0000000000005000ULL;
        data[175] = 0x0000000000005000ULL;
        data[180] = 0x0000000000005000ULL;
        data[198] = 0x0000000000805000ULL;
        data[219] = 0x0000000000005000ULL;
        data[228] = 0x0000000000005000ULL;
        data[236] = 0x0000000000805000ULL;
        data[241] = 0x0000000000805000ULL;
        data[267] = 0x0000000000005000ULL;
        data[272] = 0x0000000000005000ULL;
        data[280] = 0x0000000000805000ULL;
        data[289] = 0x0000000000805000ULL;
        data[310] = 0x0000000000005000ULL;
        data[328] = 0x0000000000805000ULL;
        data[333] = 0x0000000000805000ULL;
        data[371] = 0x0000000000805000ULL;
        data[408] = 0x0000000004085000ULL;
        data[446] = 0x0000000004085000ULL;
        data[451] = 0x0000010204085000ULL;
        data[469] = 0x0000000004885000ULL;
        data[490] = 0x0000000204085000ULL;
        data[499] = 0x0000000000085000ULL;
        data[507] = 0x0000000004885000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x000102040810a000ULL;
        data[11] = 0x000000000000a000ULL;
        data[41] = 0x000000000810a000ULL;
        data[47] = 0x000000000000a000ULL;
        data[66] = 0x000000000000a000ULL;
        data[78] = 0x000000040810a000ULL;
        data[88] = 0x000000000000a000ULL;
        data[96] = 0x000000000010a000ULL;
        data[98] = 0x000000000000a000ULL;
        data[118] = 0x000000000810a000ULL;
        data[129] = 0x000002040810a000ULL;
        data[143] = 0x000000000000a000ULL;
        data[153] = 0x000000000000a000ULL;
        data[173] = 0x000000000010a000ULL;
        data[175] = 0x000000000000a000ULL;
        data[184] = 0x000000000010a000ULL;
        data[194] = 0x000000000000a000ULL;
        data[206] = 0x000000040810a000ULL;
        data[224] = 0x000000000010a000ULL;
        data[230] = 0x000000000000a000ULL;
        data[261] = 0x000000000010a000ULL;
        data[271] = 0x000000000000a000ULL;
        data[281] = 0x000000000000a000ULL;
        data[301] = 0x000000000010a000ULL;
        data[312] = 0x000000000010a000ULL;
        data[358] = 0x000000000000a000ULL;
        data[389] = 0x000000000010a000ULL;
        data[395] = 0x000000000000a000ULL;
        data[425] = 0x000000000810a000ULL;
        data[472] = 0x000000000000a000ULL;
        data[482] = 0x000000000000a000ULL;
        data[502] = 0x000000000810a000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0102040810204000ULL;
        data[4] = 0x0000000000004000ULL;
        data[11] = 0x0000000000204000ULL;
        data[14] = 0x0000000000004000ULL;
        data[25] = 0x0000000000004000ULL;
        data[41] = 0x0000000810204000ULL;
        data[44] = 0x0000000000004000ULL;
        data[47] = 0x0000000000204000ULL;
        data[50] = 0x0000000000004000ULL;
        data[66] = 0x0000000000204000ULL;
        data[78] = 0x0000040810204000ULL;
        data[81] = 0x0000000000004000ULL;
        data[88] = 0x0000000000204000ULL;
        data[91] = 0x0000000000004000ULL;
        data[96] = 0x0000000010204000ULL;
        data[98] = 0x0000000000204000ULL;
        data[101] = 0x0000000000004000ULL;
        data[118] = 0x0000000810204000ULL;
        data[121] = 0x0000000000004000ULL;
        data[129] = 0x0002040810204000ULL;
        data[132] = 0x0000000000004000ULL;
        data[143] = 0x0000000000204000ULL;
        data[153] = 0x0000000000204000ULL;
        data[173] = 0x0000000010204000ULL;
        data[175] = 0x0000000000204000ULL;
        data[178] = 0x0000000000004000ULL;
        data[184] = 0x0000000010204000ULL;
        data[194] = 0x0000000000204000ULL;
        data[206] = 0x0000040810204000ULL;
        data[209] = 0x0000000000004000ULL;
        data[214] = 0x0000000000004000ULL;
        data[224] = 0x0000000010204000ULL;
        data[230] = 0x0000000000204000ULL;
        data[245] = 0x0000000000004000ULL;
        data[261] = 0x0000000010204000ULL;
        data[271] = 0x0000000000204000ULL;
        data[281] = 0x0000000000204000ULL;
        data[291] = 0x0000000000004000ULL;
        data[301] = 0x0000000010204000ULL;
        data[302] = 0x0000000000004000ULL;
        data[312] = 0x0000000010204000ULL;
        data[322] = 0x0000000000004000ULL;
        data[332] = 0x0000000000004000ULL;
        data[342] = 0x0000000000004000ULL;
        data[358] = 0x0000000000204000ULL;
        data[373] = 0x0000000000004000ULL;
        data[379] = 0x0000000000004000ULL;
        data[389] = 0x0000000010204000ULL;
        data[395] = 0x0000000000204000ULL;
        data[398] = 0x0000000000004000ULL;
        data[409] = 0x0000000000004000ULL;
        data[419] = 0x0000000000004000ULL;
        data[425] = 0x0000000810204000ULL;
        data[428] = 0x0000000000004000ULL;
        data[430] = 0x0000000000004000ULL;
        data[450] = 0x0000000000004000ULL;
        data[460] = 0x0000000000004000ULL;
        data[472] = 0x0000000000204000ULL;
        data[475] = 0x0000000000004000ULL;
        data[482] = 0x0000000000204000ULL;
        data[485] = 0x0000000000004000ULL;
        data[502] = 0x0000000810204000ULL;
        data[505] = 0x0000000000004000ULL;
        data[507] = 0x0000000000004000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x4020100804020002ULL;
        data[38] = 0x0000000000020002ULL;
        data[55] = 0x0000000000020002ULL;
        data[59] = 0x0000000804020002ULL;
        data[67] = 0x0000000004020002ULL;
        data[116] = 0x0000000000020002ULL;
        data[124] = 0x0000000000020002ULL;
        data[129] = 0x0020100804020002ULL;
        data[145] = 0x0000000004020002ULL;
        data[183] = 0x0000000000020002ULL;
        data[186] = 0x0000000000020002ULL;
        data[206] = 0x0000000804020002ULL;
        data[215] = 0x0000000004020002ULL;
        data[244] = 0x0000000000020002ULL;
        data[252] = 0x0000000000020002ULL;
        data[273] = 0x0000000004020002ULL;
        data[276] = 0x0000100804020002ULL;
        data[292] = 0x0000000000020002ULL;
        data[314] = 0x0000000000020002ULL;
        data[334] = 0x0000000804020002ULL;
        data[343] = 0x0000000004020002ULL;
        data[353] = 0x0000000000020002ULL;
        data[361] = 0x0000000000020002ULL;
        data[382] = 0x0000000004020002ULL;
        data[404] = 0x0000100804020002ULL;
        data[420] = 0x0000000000020002ULL;
        data[422] = 0x0000000000020002ULL;
        data[443] = 0x0000000804020002ULL;
        data[451] = 0x0000000004020002ULL;
        data[481] = 0x0000000000020002ULL;
        data[489] = 0x0000000000020002ULL;
        data[510] = 0x0000000004020002ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x8040201008050005ULL;
        data[34] = 0x0000000008050005ULL;
        data[39] = 0x0000201008050005ULL;
        data[71] = 0x0000000000050005ULL;
        data[76] = 0x0000000000050005ULL;
        data[110] = 0x0000000000050005ULL;
        data[115] = 0x0000000000050005ULL;
        data[118] = 0x0000001008050005ULL;
        data[134] = 0x0000000008050005ULL;
        data[156] = 0x0000001008050005ULL;
        data[173] = 0x0000000008050005ULL;
        data[193] = 0x0000000000050005ULL;
        data[210] = 0x0000000000050005ULL;
        data[232] = 0x0000000000050005ULL;
        data[248] = 0x0000000000050005ULL;
        data[251] = 0x0000000008050005ULL;
        data[257] = 0x0040201008050005ULL;
        data[290] = 0x0000000008050005ULL;
        data[295] = 0x0000201008050005ULL;
        data[327] = 0x0000000000050005ULL;
        data[332] = 0x0000000000050005ULL;
        data[366] = 0x0000000000050005ULL;
        data[371] = 0x0000000000050005ULL;
        data[374] = 0x0000001008050005ULL;
        data[390] = 0x0000000008050005ULL;
        data[412] = 0x0000001008050005ULL;
        data[429] = 0x0000000008050005ULL;
        data[449] = 0x0000000000050005ULL;
        data[466] = 0x0000000000050005ULL;
        data[488] = 0x0000000000050005ULL;
        data[504] = 0x0000000000050005ULL;
        data[507] = 0x0000000008050005ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x00804020110a000aULL;
        data[3] = 0x00000000000a000aULL;
        data[8] = 0x00000020100a000aULL;
        data[34] = 0x00000000010a000aULL;
        data[39] = 0x00000020110a000aULL;
        data[87] = 0x00000000100a000aULL;
        data[104] = 0x00000000000a000aULL;
        data[118] = 0x00000000110a000aULL;
        data[126] = 0x00000000100a000aULL;
        data[134] = 0x00000000010a000aULL;
        data[142] = 0x00000000000a000aULL;
        data[156] = 0x00000000110a000aULL;
        data[173] = 0x00000000010a000aULL;
        data[221] = 0x00000000000a000aULL;
        data[226] = 0x00004020100a000aULL;
        data[251] = 0x00000000010a000aULL;
        data[257] = 0x00004020110a000aULL;
        data[259] = 0x00000000000a000aULL;
        data[264] = 0x00000020100a000aULL;
        data[290] = 0x00000000010a000aULL;
        data[295] = 0x00000020110a000aULL;
        data[343] = 0x00000000100a000aULL;
        data[360] = 0x00000000000a000aULL;
        data[374] = 0x00000000110a000aULL;
        data[382] = 0x00000000100a000aULL;
        data[390] = 0x00000000010a000aULL;
        data[398] = 0x00000000000a000aULL;
        data[412] = 0x00000000110a000aULL;
        data[429] = 0x00000000010a000aULL;
        data[477] = 0x00000000000a000aULL;
        data[482] = 0x00804020100a000aULL;
        data[507] = 0x00000000010a000aULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x0000804122140014ULL;
        data[6] = 0x0000000000140014ULL;
        data[16] = 0x0000004020140014ULL;
        data[28] = 0x0000000020140014ULL;
        data[61] = 0x0000000000140014ULL;
        data[67] = 0x0000000102140014ULL;
        data[78] = 0x0000004122140014ULL;
        data[89] = 0x0000000022140014ULL;
        data[105] = 0x0000000020140014ULL;
        data[123] = 0x0000000002140014ULL;
        data[138] = 0x0000000000140014ULL;
        data[166] = 0x0000000022140014ULL;
        data[174] = 0x0000000020140014ULL;
        data[200] = 0x0000000002140014ULL;
        data[207] = 0x0000000000140014ULL;
        data[235] = 0x0000000122140014ULL;
        data[251] = 0x0000000020140014ULL;
        data[268] = 0x0000000102140014ULL;
        data[284] = 0x0000000000140014ULL;
        data[296] = 0x0000000000140014ULL;
        data[306] = 0x0000804020140014ULL;
        data[312] = 0x0000000122140014ULL;
        data[345] = 0x0000000102140014ULL;
        data[357] = 0x0000000002140014ULL;
        data[367] = 0x0000804022140014ULL;
        data[373] = 0x0000000000140014ULL;
        data[383] = 0x0000004020140014ULL;
        data[434] = 0x0000000002140014ULL;
        data[441] = 0x0000000000140014ULL;
        data[444] = 0x0000004022140014ULL;
        data[451] = 0x0000804020140014ULL;
        data[502] = 0x0000000102140014ULL;
    }),
    ::chess::AttackTable(RightShift<19>::hash, [](uint64_t *& data) {
        data = new uint64_t [18567]();
        data[1] = 0x0000018244280028ULL;
        data[2] = 0x0000008040280028ULL;
        data[5] = 0x0000010204280028ULL;
        data[6] = 0x0000000000280028ULL;
        data[129] = 0x0000008044280028ULL;
        data[130] = 0x0000008040280028ULL;
        data[133] = 0x0000000004280028ULL;
        data[134] = 0x0000000000280028ULL;
        data[2049] = 0x0000010244280028ULL;
        data[2050] = 0x0000000040280028ULL;
        data[2053] = 0x0000010204280028ULL;
        data[2054] = 0x0000000000280028ULL;
        data[2177] = 0x0000000044280028ULL;
        data[2178] = 0x0000000040280028ULL;
        data[2181] = 0x0000000004280028ULL;
        data[2182] = 0x0000000000280028ULL;
        data[16385] = 0x0000008244280028ULL;
        data[16386] = 0x0000008040280028ULL;
        data[16389] = 0x0000000204280028ULL;
        data[16390] = 0x0000000000280028ULL;
        data[16513] = 0x0000008044280028ULL;
        data[16514] = 0x0000008040280028ULL;
        data[16517] = 0x0000000004280028ULL;
        data[16518] = 0x0000000000280028ULL;
        data[18433] = 0x0000000244280028ULL;
        data[18434] = 0x0000000040280028ULL;
        data[18437] = 0x0000000204280028ULL;
        data[18438] = 0x0000000000280028ULL;
        data[18561] = 0x0000000044280028ULL;
        data[18562] = 0x0000000040280028ULL;
        data[18565] = 0x0000000004280028ULL;
        data[18566] = 0x0000000000280028ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x0001020488500050ULL;
        data[11] = 0x0000000000500050ULL;
        data[21] = 0x0000000000500050ULL;
        data[41] = 0x0000000088500050ULL;
        data[78] = 0x0000000488500050ULL;
        data[96] = 0x0000000080500050ULL;
        data[98] = 0x0000000000500050ULL;
        data[118] = 0x0000000088500050ULL;
        data[129] = 0x0000020488500050ULL;
        data[134] = 0x0000000008500050ULL;
        data[173] = 0x0000000080500050ULL;
        data[184] = 0x0000000080500050ULL;
        data[206] = 0x0000000488500050ULL;
        data[211] = 0x0000000008500050ULL;
        data[222] = 0x0001020408500050ULL;
        data[224] = 0x0000000080500050ULL;
        data[261] = 0x0000000080500050ULL;
        data[262] = 0x0000000008500050ULL;
        data[299] = 0x0000000408500050ULL;
        data[301] = 0x0000000080500050ULL;
        data[312] = 0x0000000080500050ULL;
        data[318] = 0x0000000000500050ULL;
        data[339] = 0x0000000008500050ULL;
        data[350] = 0x0000020408500050ULL;
        data[389] = 0x0000000080500050ULL;
        data[395] = 0x0000000000500050ULL;
        data[405] = 0x0000000000500050ULL;
        data[425] = 0x0000000088500050ULL;
        data[427] = 0x0000000408500050ULL;
        data[446] = 0x0000000000500050ULL;
        data[482] = 0x0000000000500050ULL;
        data[502] = 0x0000000088500050ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x0102040810a000a0ULL;
        data[11] = 0x0000000000a000a0ULL;
        data[41] = 0x0000000810a000a0ULL;
        data[47] = 0x0000000000a000a0ULL;
        data[66] = 0x0000000000a000a0ULL;
        data[78] = 0x0000040810a000a0ULL;
        data[88] = 0x0000000000a000a0ULL;
        data[96] = 0x0000000010a000a0ULL;
        data[98] = 0x0000000000a000a0ULL;
        data[118] = 0x0000000810a000a0ULL;
        data[129] = 0x0002040810a000a0ULL;
        data[143] = 0x0000000000a000a0ULL;
        data[153] = 0x0000000000a000a0ULL;
        data[173] = 0x0000000010a000a0ULL;
        data[175] = 0x0000000000a000a0ULL;
        data[184] = 0x0000000010a000a0ULL;
        data[194] = 0x0000000000a000a0ULL;
        data[206] = 0x0000040810a000a0ULL;
        data[224] = 0x0000000010a000a0ULL;
        data[230] = 0x0000000000a000a0ULL;
        data[261] = 0x0000000010a000a0ULL;
        data[271] = 0x0000000000a000a0ULL;
        data[281] = 0x0000000000a000a0ULL;
        data[301] = 0x0000000010a000a0ULL;
        data[312] = 0x0000000010a000a0ULL;
        data[358] = 0x0000000000a000a0ULL;
        data[389] = 0x0000000010a000a0ULL;
        data[395] = 0x0000000000a000a0ULL;
        data[425] = 0x0000000810a000a0ULL;
        data[472] = 0x0000000000a000a0ULL;
        data[482] = 0x0000000000a000a0ULL;
        data[502] = 0x0000000810a000a0ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [493]();
        data[1] = 0x0204081020400040ULL;
        data[9] = 0x0000000020400040ULL;
        data[21] = 0x0000000000400040ULL;
        data[29] = 0x0000000000400040ULL;
        data[50] = 0x0000000000400040ULL;
        data[82] = 0x0000001020400040ULL;
        data[90] = 0x0000000020400040ULL;
        data[93] = 0x0000000000400040ULL;
        data[111] = 0x0000000020400040ULL;
        data[131] = 0x0000000000400040ULL;
        data[155] = 0x0000081020400040ULL;
        data[175] = 0x0000000000400040ULL;
        data[192] = 0x0000000020400040ULL;
        data[195] = 0x0000000000400040ULL;
        data[204] = 0x0000000000400040ULL;
        data[236] = 0x0000001020400040ULL;
        data[257] = 0x0004081020400040ULL;
        data[265] = 0x0000000020400040ULL;
        data[277] = 0x0000000000400040ULL;
        data[285] = 0x0000000000400040ULL;
        data[306] = 0x0000000000400040ULL;
        data[338] = 0x0000001020400040ULL;
        data[346] = 0x0000000020400040ULL;
        data[349] = 0x0000000000400040ULL;
        data[367] = 0x0000000020400040ULL;
        data[387] = 0x0000000000400040ULL;
        data[411] = 0x0000081020400040ULL;
        data[431] = 0x0000000000400040ULL;
        data[448] = 0x0000000020400040ULL;
        data[451] = 0x0000000000400040ULL;
        data[460] = 0x0000000000400040ULL;
        data[492] = 0x0000001020400040ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x2010080402000204ULL;
        data[26] = 0x0000000002000200ULL;
        data[30] = 0x0000000402000204ULL;
        data[56] = 0x0010080402000200ULL;
        data[64] = 0x0000000002000200ULL;
        data[95] = 0x0000000402000200ULL;
        data[108] = 0x0000000002000204ULL;
        data[137] = 0x0000000002000204ULL;
        data[138] = 0x0000080402000204ULL;
        data[163] = 0x0000000002000200ULL;
        data[167] = 0x0000000402000204ULL;
        data[191] = 0x0000000002000204ULL;
        data[194] = 0x0000080402000200ULL;
        data[218] = 0x0000000002000200ULL;
        data[222] = 0x0000000402000204ULL;
        data[247] = 0x0000000002000200ULL;
        data[248] = 0x2010080402000200ULL;
        data[277] = 0x0000000402000200ULL;
        data[290] = 0x0000000002000204ULL;
        data[321] = 0x0010080402000204ULL;
        data[329] = 0x0000000002000204ULL;
        data[355] = 0x0000000002000200ULL;
        data[359] = 0x0000000402000204ULL;
        data[384] = 0x0000000002000200ULL;
        data[386] = 0x0000080402000200ULL;
        data[415] = 0x0000000402000200ULL;
        data[428] = 0x0000000002000204ULL;
        data[439] = 0x0000000002000200ULL;
        data[458] = 0x0000080402000204ULL;
        data[469] = 0x0000000402000200ULL;
        data[482] = 0x0000000002000204ULL;
        data[511] = 0x0000000002000204ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x4020100805000508ULL;
        data[42] = 0x0000000805000500ULL;
        data[51] = 0x0000000005000500ULL;
        data[59] = 0x0000000805000508ULL;
        data[67] = 0x0000000005000508ULL;
        data[112] = 0x0020100805000500ULL;
        data[128] = 0x0000000005000500ULL;
        data[129] = 0x0020100805000508ULL;
        data[145] = 0x0000000005000508ULL;
        data[190] = 0x0000000805000500ULL;
        data[198] = 0x0000000005000500ULL;
        data[206] = 0x0000000805000508ULL;
        data[215] = 0x0000000005000508ULL;
        data[256] = 0x0000000005000500ULL;
        data[259] = 0x0000100805000500ULL;
        data[273] = 0x0000000005000508ULL;
        data[276] = 0x0000100805000508ULL;
        data[318] = 0x0000000805000500ULL;
        data[326] = 0x0000000005000500ULL;
        data[334] = 0x0000000805000508ULL;
        data[343] = 0x0000000005000508ULL;
        data[365] = 0x0000000005000500ULL;
        data[382] = 0x0000000005000508ULL;
        data[387] = 0x0000100805000500ULL;
        data[404] = 0x0000100805000508ULL;
        data[426] = 0x0000000805000500ULL;
        data[435] = 0x0000000005000500ULL;
        data[443] = 0x0000000805000508ULL;
        data[451] = 0x0000000005000508ULL;
        data[493] = 0x0000000005000500ULL;
        data[496] = 0x4020100805000500ULL;
        data[510] = 0x0000000005000508ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_21_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1021]();
        data[1] = 0x804020110a000a11ULL;
        data[7] = 0x000000010a000a00ULL;
        data[8] = 0x804020100a000a01ULL;
        data[40] = 0x000000000a000a10ULL;
        data[46] = 0x000000110a000a11ULL;
        data[52] = 0x000000010a000a00ULL;
        data[53] = 0x000000100a000a01ULL;
        data[57] = 0x000020110a000a10ULL;
        data[64] = 0x000020100a000a00ULL;
        data[82] = 0x000000000a000a10ULL;
        data[94] = 0x000000010a000a00ULL;
        data[103] = 0x000000110a000a10ULL;
        data[110] = 0x000000100a000a00ULL;
        data[116] = 0x000020110a000a00ULL;
        data[128] = 0x000000000a000a10ULL;
        data[140] = 0x000000010a000a00ULL;
        data[144] = 0x004020110a000a10ULL;
        data[151] = 0x004020100a000a00ULL;
        data[159] = 0x000000000a000a11ULL;
        data[162] = 0x000000110a000a00ULL;
        data[171] = 0x000000010a000a01ULL;
        data[190] = 0x000000110a000a10ULL;
        data[197] = 0x000000100a000a00ULL;
        data[204] = 0x804020110a000a00ULL;
        data[205] = 0x000000000a000a11ULL;
        data[216] = 0x000000010a000a01ULL;
        data[221] = 0x000020110a000a11ULL;
        data[228] = 0x000020100a000a01ULL;
        data[246] = 0x000000000a000a11ULL;
        data[250] = 0x000000110a000a00ULL;
        data[258] = 0x000000010a000a01ULL;
        data[267] = 0x000000110a000a11ULL;
        data[274] = 0x000000100a000a01ULL;
        data[281] = 0x000020110a000a01ULL;
        data[292] = 0x000000000a000a11ULL;
        data[303] = 0x000000000a000a10ULL;
        data[304] = 0x000000010a000a01ULL;
        data[309] = 0x004020110a000a11ULL;
        data[316] = 0x004020100a000a01ULL;
        data[326] = 0x000000110a000a01ULL;
        data[348] = 0x000000000a000a10ULL;
        data[354] = 0x000000110a000a11ULL;
        data[355] = 0x000000010a000a10ULL;
        data[361] = 0x000000100a000a01ULL;
        data[362] = 0x000000000a000a00ULL;
        data[368] = 0x804020110a000a01ULL;
        data[390] = 0x000000000a000a10ULL;
        data[401] = 0x000000010a000a10ULL;
        data[408] = 0x000000000a000a00ULL;
        data[412] = 0x000020100a000a10ULL;
        data[414] = 0x000000110a000a01ULL;
        data[424] = 0x000020110a000a00ULL;
        data[436] = 0x000000000a000a10ULL;
        data[442] = 0x000000010a000a10ULL;
        data[449] = 0x000000000a000a00ULL;
        data[458] = 0x000000100a000a10ULL;
        data[467] = 0x000000000a000a11ULL;
        data[470] = 0x000000110a000a00ULL;
        data[488] = 0x000000010a000a10ULL;
        data[495] = 0x000000000a000a00ULL;
        data[500] = 0x804020100a000a10ULL;
        data[512] = 0x004020110a000a00ULL;
        data[513] = 0x000000000a000a11ULL;
        data[519] = 0x000000010a000a11ULL;
        data[526] = 0x000000000a000a01ULL;
        data[546] = 0x000000100a000a10ULL;
        data[554] = 0x000000000a000a11ULL;
        data[558] = 0x000000110a000a00ULL;
        data[565] = 0x000000010a000a11ULL;
        data[572] = 0x000000000a000a01ULL;
        data[577] = 0x000020100a000a11ULL;
        data[589] = 0x000020110a000a01ULL;
        data[600] = 0x000000000a000a11ULL;
        data[607] = 0x000000010a000a11ULL;
        data[614] = 0x000000000a000a01ULL;
        data[622] = 0x000000100a000a11ULL;
        data[634] = 0x000000110a000a01ULL;
        data[652] = 0x000000010a000a11ULL;
        data[659] = 0x000000000a000a01ULL;
        data[663] = 0x000000010a000a10ULL;
        data[664] = 0x804020100a000a11ULL;
        data[670] = 0x000000000a000a00ULL;
        data[676] = 0x004020110a000a01ULL;
        data[709] = 0x000000010a000a10ULL;
        data[710] = 0x000000100a000a11ULL;
        data[716] = 0x000000000a000a00ULL;
        data[720] = 0x000020100a000a10ULL;
        data[722] = 0x000000110a000a01ULL;
        data[723] = 0x000000010a000a00ULL;
        data[750] = 0x000000010a000a10ULL;
        data[757] = 0x000000000a000a00ULL;
        data[766] = 0x000000100a000a10ULL;
        data[768] = 0x000000010a000a00ULL;
        data[773] = 0x000020110a000a10ULL;
        data[780] = 0x000020100a000a00ULL;
        data[796] = 0x000000010a000a10ULL;
        data[803] = 0x000000000a000a00ULL;
        data[808] = 0x004020100a000a10ULL;
        data[810] = 0x000000010a000a00ULL;
        data[819] = 0x000000110a000a10ULL;
        data[826] = 0x000000100a000a00ULL;
        data[827] = 0x000000010a000a11ULL;
        data[834] = 0x000000000a000a01ULL;
        data[854] = 0x000000100a000a10ULL;
        data[856] = 0x000000010a000a00ULL;
        data[860] = 0x804020110a000a10ULL;
        data[867] = 0x804020100a000a00ULL;
        data[873] = 0x000000010a000a11ULL;
        data[880] = 0x000000000a000a01ULL;
        data[885] = 0x000020100a000a11ULL;
        data[887] = 0x000000010a000a01ULL;
        data[906] = 0x000000110a000a10ULL;
        data[913] = 0x000000100a000a00ULL;
        data[915] = 0x000000010a000a11ULL;
        data[922] = 0x000000000a000a01ULL;
        data[930] = 0x000000100a000a11ULL;
        data[932] = 0x000000010a000a01ULL;
        data[937] = 0x000020110a000a11ULL;
        data[944] = 0x000020100a000a01ULL;
        data[960] = 0x000000010a000a11ULL;
        data[967] = 0x000000000a000a01ULL;
        data[972] = 0x004020100a000a11ULL;
        data[974] = 0x000000010a000a01ULL;
        data[983] = 0x000000110a000a11ULL;
        data[990] = 0x000000100a000a01ULL;
        data[1018] = 0x000000100a000a11ULL;
        data[1019] = 0x000000000a000a10ULL;
        data[1020] = 0x000000010a000a01ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0080412214001422ULL;
        data[4] = 0x0000002014001422ULL;
        data[13] = 0x0080402014001402ULL;
        data[21] = 0x0000002214001420ULL;
        data[23] = 0x0000010214001400ULL;
        data[24] = 0x0000000214001422ULL;
        data[28] = 0x0000000014001422ULL;
        data[30] = 0x0000402214001400ULL;
        data[33] = 0x0000002014001400ULL;
        data[36] = 0x0000000014001402ULL;
        data[39] = 0x0000012214001422ULL;
        data[42] = 0x0080402014001420ULL;
        data[48] = 0x0000412214001402ULL;
        data[51] = 0x0000002014001402ULL;
        data[62] = 0x0000000214001422ULL;
        data[65] = 0x0000000014001420ULL;
        data[68] = 0x0000002214001400ULL;
        data[71] = 0x0000000214001402ULL;
        data[75] = 0x0000000014001402ULL;
        data[76] = 0x0000412214001420ULL;
        data[80] = 0x0000002014001420ULL;
        data[83] = 0x0000000014001422ULL;
        data[86] = 0x0000012214001402ULL;
        data[89] = 0x0000402014001400ULL;
        data[100] = 0x0000000214001420ULL;
        data[104] = 0x0000000014001420ULL;
        data[110] = 0x0000000214001402ULL;
        data[112] = 0x0000000014001400ULL;
        data[115] = 0x0000012214001420ULL;
        data[118] = 0x0000010214001422ULL;
        data[121] = 0x0000000014001422ULL;
        data[123] = 0x0080412214001400ULL;
        data[127] = 0x0000002014001400ULL;
        data[128] = 0x0000402014001422ULL;
        data[130] = 0x0000000014001402ULL;
        data[138] = 0x0000000214001420ULL;
        data[147] = 0x0000000214001400ULL;
        data[151] = 0x0000000014001400ULL;
        data[156] = 0x0000010214001422ULL;
        data[159] = 0x0000000014001420ULL;
        data[162] = 0x0000012214001400ULL;
        data[163] = 0x0080402214001422ULL;
        data[165] = 0x0000010214001402ULL;
        data[167] = 0x0000002014001422ULL;
        data[168] = 0x0000000014001402ULL;
        data[175] = 0x0080402014001402ULL;
        data[185] = 0x0000000214001400ULL;
        data[193] = 0x0000010214001420ULL;
        data[197] = 0x0000000014001420ULL;
        data[201] = 0x0000002214001422ULL;
        data[203] = 0x0000010214001402ULL;
        data[204] = 0x0080402014001420ULL;
        data[206] = 0x0000000014001400ULL;
        data[210] = 0x0000402214001402ULL;
        data[214] = 0x0000002014001402ULL;
        data[222] = 0x0080402014001422ULL;
        data[232] = 0x0000010214001420ULL;
        data[239] = 0x0000402214001420ULL;
        data[240] = 0x0000010214001400ULL;
        data[242] = 0x0000002014001420ULL;
        data[244] = 0x0000000014001400ULL;
        data[245] = 0x0000000014001422ULL;
        data[248] = 0x0000002214001402ULL;
        data[251] = 0x0000402014001400ULL;
        data[257] = 0x0000412214001422ULL;
        data[260] = 0x0000002014001422ULL;
        data[269] = 0x0000402014001402ULL;
        data[277] = 0x0000002214001420ULL;
        data[279] = 0x0000010214001400ULL;
        data[280] = 0x0000000214001422ULL;
        data[284] = 0x0000000014001422ULL;
        data[286] = 0x0080402214001400ULL;
        data[289] = 0x0000002014001400ULL;
        data[292] = 0x0000000014001402ULL;
        data[295] = 0x0000012214001422ULL;
        data[298] = 0x0000402014001420ULL;
        data[304] = 0x0080412214001402ULL;
        data[307] = 0x0000002014001402ULL;
        data[318] = 0x0000000214001422ULL;
        data[321] = 0x0000000014001420ULL;
        data[324] = 0x0000002214001400ULL;
        data[327] = 0x0000000214001402ULL;
        data[331] = 0x0000000014001402ULL;
        data[332] = 0x0080412214001420ULL;
        data[336] = 0x0000002014001420ULL;
        data[339] = 0x0000000014001422ULL;
        data[342] = 0x0000012214001402ULL;
        data[345] = 0x0080402014001400ULL;
        data[356] = 0x0000000214001420ULL;
        data[360] = 0x0000000014001420ULL;
        data[366] = 0x0000000214001402ULL;
        data[368] = 0x0000000014001400ULL;
        data[371] = 0x0000012214001420ULL;
        data[374] = 0x0000010214001422ULL;
        data[377] = 0x0000000014001422ULL;
        data[379] = 0x0000412214001400ULL;
        data[383] = 0x0000002014001400ULL;
        data[384] = 0x0080402014001422ULL;
        data[386] = 0x0000000014001402ULL;
        data[394] = 0x0000000214001420ULL;
        data[403] = 0x0000000214001400ULL;
        data[407] = 0x0000000014001400ULL;
        data[412] = 0x0000010214001422ULL;
        data[415] = 0x0000000014001420ULL;
        data[418] = 0x0000012214001400ULL;
        data[419] = 0x0000402214001422ULL;
        data[421] = 0x0000010214001402ULL;
        data[423] = 0x0000002014001422ULL;
        data[424] = 0x0000000014001402ULL;
        data[431] = 0x0000402014001402ULL;
        data[441] = 0x0000000214001400ULL;
        data[449] = 0x0000010214001420ULL;
        data[453] = 0x0000000014001420ULL;
        data[457] = 0x0000002214001422ULL;
        data[459] = 0x0000010214001402ULL;
        data[460] = 0x0000402014001420ULL;
        data[462] = 0x0000000014001400ULL;
        data[466] = 0x0080402214001402ULL;
        data[470] = 0x0000002014001402ULL;
        data[478] = 0x0000402014001422ULL;
        data[488] = 0x0000010214001420ULL;
        data[495] = 0x0080402214001420ULL;
        data[496] = 0x0000010214001400ULL;
        data[498] = 0x0000002014001420ULL;
        data[500] = 0x0000000014001400ULL;
        data[501] = 0x0000000014001422ULL;
        data[504] = 0x0000002214001402ULL;
        data[507] = 0x0080402014001400ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1022]();
        data[1] = 0x0001824428002844ULL;
        data[2] = 0x0000804028002804ULL;
        data[16] = 0x0000824428002840ULL;
        data[18] = 0x0000804028002800ULL;
        data[26] = 0x0000804028002840ULL;
        data[46] = 0x0000000428002804ULL;
        data[62] = 0x0000000428002800ULL;
        data[67] = 0x0001020428002800ULL;
        data[87] = 0x0000804028002844ULL;
        data[92] = 0x0000804028002844ULL;
        data[108] = 0x0000804028002840ULL;
        data[128] = 0x0000020428002804ULL;
        data[136] = 0x0000000428002844ULL;
        data[138] = 0x0000000028002804ULL;
        data[152] = 0x0000000428002840ULL;
        data[154] = 0x0000000028002800ULL;
        data[157] = 0x0001020428002840ULL;
        data[159] = 0x0000000028002800ULL;
        data[169] = 0x0000004428002800ULL;
        data[211] = 0x0000000428002800ULL;
        data[218] = 0x0000020428002844ULL;
        data[220] = 0x0000000028002804ULL;
        data[228] = 0x0000000028002844ULL;
        data[230] = 0x0000004428002804ULL;
        data[235] = 0x0001024428002804ULL;
        data[244] = 0x0000000028002840ULL;
        data[249] = 0x0000000028002840ULL;
        data[251] = 0x0000024428002800ULL;
        data[259] = 0x0000004428002840ULL;
        data[261] = 0x0000004028002800ULL;
        data[272] = 0x0000000428002804ULL;
        data[277] = 0x0001020428002804ULL;
        data[293] = 0x0000020428002800ULL;
        data[301] = 0x0000000428002840ULL;
        data[302] = 0x0000000028002800ULL;
        data[310] = 0x0000000028002844ULL;
        data[320] = 0x0000004428002844ULL;
        data[322] = 0x0000004028002804ULL;
        data[325] = 0x0001024428002844ULL;
        data[327] = 0x0000004028002804ULL;
        data[341] = 0x0000024428002840ULL;
        data[343] = 0x0000004028002800ULL;
        data[351] = 0x0000004028002840ULL;
        data[362] = 0x0000000428002844ULL;
        data[363] = 0x0000000028002804ULL;
        data[367] = 0x0001020428002844ULL;
        data[369] = 0x0000000028002804ULL;
        data[379] = 0x0000804428002804ULL;
        data[383] = 0x0000020428002840ULL;
        data[385] = 0x0000000028002800ULL;
        data[393] = 0x0000000028002840ULL;
        data[395] = 0x0000804428002800ULL;
        data[400] = 0x0001824428002800ULL;
        data[412] = 0x0000004028002844ULL;
        data[417] = 0x0000004028002844ULL;
        data[433] = 0x0000004028002840ULL;
        data[454] = 0x0000000028002844ULL;
        data[459] = 0x0000000028002844ULL;
        data[461] = 0x0000824428002804ULL;
        data[469] = 0x0000804428002844ULL;
        data[470] = 0x0000804028002804ULL;
        data[475] = 0x0000000028002840ULL;
        data[485] = 0x0000804428002840ULL;
        data[486] = 0x0000804028002800ULL;
        data[490] = 0x0001824428002840ULL;
        data[492] = 0x0000804028002800ULL;
        data[536] = 0x0000000428002800ULL;
        data[551] = 0x0000824428002844ULL;
        data[553] = 0x0000804028002804ULL;
        data[560] = 0x0000804028002844ULL;
        data[576] = 0x0000804028002840ULL;
        data[582] = 0x0000804028002840ULL;
        data[597] = 0x0000000428002804ULL;
        data[602] = 0x0001020428002804ULL;
        data[618] = 0x0000020428002800ULL;
        data[626] = 0x0000000428002840ULL;
        data[627] = 0x0000000028002800ULL;
        data[643] = 0x0000804028002844ULL;
        data[687] = 0x0000000428002844ULL;
        data[688] = 0x0000000028002804ULL;
        data[692] = 0x0001020428002844ULL;
        data[693] = 0x0000000028002804ULL;
        data[703] = 0x0000004428002804ULL;
        data[708] = 0x0000020428002840ULL;
        data[709] = 0x0000000028002800ULL;
        data[717] = 0x0000000028002840ULL;
        data[719] = 0x0000004428002800ULL;
        data[725] = 0x0001024428002800ULL;
        data[745] = 0x0000000428002804ULL;
        data[761] = 0x0000000428002800ULL;
        data[766] = 0x0001020428002800ULL;
        data[778] = 0x0000000028002844ULL;
        data[784] = 0x0000000028002844ULL;
        data[786] = 0x0000024428002804ULL;
        data[794] = 0x0000004428002844ULL;
        data[795] = 0x0000004028002804ULL;
        data[800] = 0x0000000028002840ULL;
        data[810] = 0x0000004428002840ULL;
        data[811] = 0x0000004028002800ULL;
        data[815] = 0x0001024428002840ULL;
        data[816] = 0x0000004028002800ULL;
        data[828] = 0x0000020428002804ULL;
        data[835] = 0x0000000428002844ULL;
        data[837] = 0x0000000028002804ULL;
        data[851] = 0x0000000428002840ULL;
        data[853] = 0x0000000028002800ULL;
        data[857] = 0x0001020428002840ULL;
        data[858] = 0x0000000028002800ULL;
        data[868] = 0x0000804428002800ULL;
        data[876] = 0x0000024428002844ULL;
        data[877] = 0x0000004028002804ULL;
        data[885] = 0x0000004028002844ULL;
        data[901] = 0x0000004028002840ULL;
        data[906] = 0x0000004028002840ULL;
        data[918] = 0x0000020428002844ULL;
        data[919] = 0x0000000028002804ULL;
        data[927] = 0x0000000028002844ULL;
        data[929] = 0x0000804428002804ULL;
        data[934] = 0x0001824428002804ULL;
        data[943] = 0x0000000028002840ULL;
        data[948] = 0x0000000028002840ULL;
        data[950] = 0x0000824428002800ULL;
        data[958] = 0x0000804428002840ULL;
        data[960] = 0x0000804028002800ULL;
        data[967] = 0x0000004028002844ULL;
        data[1009] = 0x0000000028002844ULL;
        data[1019] = 0x0000804428002844ULL;
        data[1021] = 0x0000804028002804ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_17_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1018]();
        data[1] = 0x0102048850005088ULL;
        data[4] = 0x0000008050005000ULL;
        data[7] = 0x0000000050005080ULL;
        data[15] = 0x0000008050005080ULL;
        data[27] = 0x0000000050005080ULL;
        data[31] = 0x0000040850005000ULL;
        data[58] = 0x0000008050005088ULL;
        data[70] = 0x0000000050005088ULL;
        data[74] = 0x0000000850005008ULL;
        data[78] = 0x0000008050005088ULL;
        data[82] = 0x0000048850005008ULL;
        data[94] = 0x0002040850005008ULL;
        data[109] = 0x0000000050005000ULL;
        data[130] = 0x0000008850005000ULL;
        data[133] = 0x0000000850005080ULL;
        data[141] = 0x0000048850005080ULL;
        data[152] = 0x0000000050005008ULL;
        data[153] = 0x0002040850005080ULL;
        data[159] = 0x0000008050005008ULL;
        data[172] = 0x0000000050005008ULL;
        data[184] = 0x0000008850005088ULL;
        data[189] = 0x0000040850005008ULL;
        data[196] = 0x0000000850005088ULL;
        data[204] = 0x0002048850005088ULL;
        data[207] = 0x0000008050005000ULL;
        data[211] = 0x0000000050005080ULL;
        data[218] = 0x0000008050005080ULL;
        data[224] = 0x0000008850005000ULL;
        data[231] = 0x0000000050005080ULL;
        data[236] = 0x0000000850005000ULL;
        data[244] = 0x0102048850005000ULL;
        data[247] = 0x0000040850005080ULL;
        data[261] = 0x0000008050005088ULL;
        data[266] = 0x0000000050005008ULL;
        data[274] = 0x0000000050005088ULL;
        data[282] = 0x0000008050005088ULL;
        data[287] = 0x0000008850005008ULL;
        data[290] = 0x0000000850005088ULL;
        data[298] = 0x0000048850005088ULL;
        data[301] = 0x0000008050005000ULL;
        data[311] = 0x0102040850005088ULL;
        data[314] = 0x0000000050005000ULL;
        data[321] = 0x0000008050005000ULL;
        data[325] = 0x0000000050005080ULL;
        data[346] = 0x0000008850005080ULL;
        data[365] = 0x0000008050005008ULL;
        data[368] = 0x0000000050005088ULL;
        data[376] = 0x0000008050005088ULL;
        data[388] = 0x0000000050005088ULL;
        data[392] = 0x0000040850005008ULL;
        data[423] = 0x0000008050005080ULL;
        data[427] = 0x0000008850005000ULL;
        data[440] = 0x0000000850005000ULL;
        data[447] = 0x0002048850005000ULL;
        data[451] = 0x0000040850005080ULL;
        data[470] = 0x0000000050005008ULL;
        data[491] = 0x0000008850005008ULL;
        data[494] = 0x0000000850005088ULL;
        data[502] = 0x0000048850005088ULL;
        data[505] = 0x0000008050005000ULL;
        data[514] = 0x0002040850005088ULL;
        data[517] = 0x0000000050005000ULL;
        data[525] = 0x0000008050005000ULL;
        data[528] = 0x0000000050005080ULL;
        data[534] = 0x0000000850005000ULL;
        data[542] = 0x0000048850005000ULL;
        data[549] = 0x0000008850005080ULL;
        data[554] = 0x0102040850005000ULL;
        data[568] = 0x0000008050005008ULL;
        data[572] = 0x0000000050005088ULL;
        data[579] = 0x0000008050005088ULL;
        data[585] = 0x0000008850005008ULL;
        data[592] = 0x0000000050005088ULL;
        data[597] = 0x0000000850005008ULL;
        data[605] = 0x0102048850005008ULL;
        data[608] = 0x0000040850005088ULL;
        data[611] = 0x0000000050005000ULL;
        data[619] = 0x0000008050005000ULL;
        data[627] = 0x0000008050005080ULL;
        data[632] = 0x0000000050005000ULL;
        data[644] = 0x0000008850005080ULL;
        data[656] = 0x0000000850005080ULL;
        data[662] = 0x0000008050005008ULL;
        data[664] = 0x0102048850005080ULL;
        data[675] = 0x0000000050005008ULL;
        data[682] = 0x0000008050005008ULL;
        data[686] = 0x0000000050005088ULL;
        data[707] = 0x0000008850005088ULL;
        data[721] = 0x0000008050005080ULL;
        data[734] = 0x0000000050005080ULL;
        data[737] = 0x0000000850005000ULL;
        data[741] = 0x0000008050005080ULL;
        data[745] = 0x0000048850005000ULL;
        data[758] = 0x0002040850005000ULL;
        data[784] = 0x0000008050005088ULL;
        data[788] = 0x0000008850005008ULL;
        data[801] = 0x0000000850005008ULL;
        data[808] = 0x0002048850005008ULL;
        data[812] = 0x0000040850005088ULL;
        data[815] = 0x0000000050005000ULL;
        data[823] = 0x0000008050005000ULL;
        data[835] = 0x0000000050005000ULL;
        data[847] = 0x0000008850005080ULL;
        data[852] = 0x0000040850005000ULL;
        data[859] = 0x0000000850005080ULL;
        data[866] = 0x0000008050005008ULL;
        data[867] = 0x0002048850005080ULL;
        data[878] = 0x0000000050005008ULL;
        data[886] = 0x0000008050005008ULL;
        data[889] = 0x0000000050005088ULL;
        data[895] = 0x0000000850005008ULL;
        data[902] = 0x0000048850005008ULL;
        data[910] = 0x0000008850005088ULL;
        data[915] = 0x0102040850005008ULL;
        data[925] = 0x0000008050005080ULL;
        data[929] = 0x0000000050005000ULL;
        data[937] = 0x0000000050005080ULL;
        data[945] = 0x0000008050005080ULL;
        data[950] = 0x0000008850005000ULL;
        data[954] = 0x0000000850005080ULL;
        data[961] = 0x0000048850005080ULL;
        data[972] = 0x0000000050005008ULL;
        data[974] = 0x0102040850005080ULL;
        data[980] = 0x0000008050005008ULL;
        data[988] = 0x0000008050005088ULL;
        data[992] = 0x0000000050005008ULL;
        data[1004] = 0x0000008850005088ULL;
        data[1017] = 0x0000000850005088ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [513]();
        data[1] = 0x02040810a000a010ULL;
        data[9] = 0x00000000a000a010ULL;
        data[21] = 0x00000000a000a000ULL;
        data[64] = 0x00000810a000a000ULL;
        data[82] = 0x00000010a000a010ULL;
        data[90] = 0x00000000a000a010ULL;
        data[102] = 0x00000000a000a000ULL;
        data[111] = 0x00000000a000a010ULL;
        data[146] = 0x00000010a000a000ULL;
        data[155] = 0x00000810a000a010ULL;
        data[166] = 0x00040810a000a000ULL;
        data[175] = 0x00000000a000a000ULL;
        data[192] = 0x00000000a000a010ULL;
        data[236] = 0x00000010a000a010ULL;
        data[248] = 0x00000010a000a000ULL;
        data[256] = 0x00000000a000a000ULL;
        data[257] = 0x00040810a000a010ULL;
        data[265] = 0x00000000a000a010ULL;
        data[277] = 0x00000000a000a000ULL;
        data[320] = 0x00000810a000a000ULL;
        data[338] = 0x00000010a000a010ULL;
        data[346] = 0x00000000a000a010ULL;
        data[358] = 0x00000000a000a000ULL;
        data[367] = 0x00000000a000a010ULL;
        data[402] = 0x00000010a000a000ULL;
        data[411] = 0x00000810a000a010ULL;
        data[422] = 0x02040810a000a000ULL;
        data[431] = 0x00000000a000a000ULL;
        data[448] = 0x00000000a000a010ULL;
        data[492] = 0x00000010a000a010ULL;
        data[504] = 0x00000010a000a000ULL;
        data[512] = 0x00000000a000a000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0408102040004020ULL;
        data[8] = 0x0000102040004000ULL;
        data[13] = 0x0000000040004000ULL;
        data[44] = 0x0000000040004020ULL;
        data[46] = 0x0000000040004020ULL;
        data[54] = 0x0000000040004000ULL;
        data[139] = 0x0000002040004020ULL;
        data[147] = 0x0000002040004000ULL;
        data[149] = 0x0008102040004000ULL;
        data[180] = 0x0000102040004020ULL;
        data[184] = 0x0000000040004020ULL;
        data[192] = 0x0000000040004000ULL;
        data[195] = 0x0000000040004000ULL;
        data[226] = 0x0000000040004020ULL;
        data[235] = 0x0000002040004020ULL;
        data[243] = 0x0000002040004000ULL;
        data[245] = 0x0408102040004000ULL;
        data[276] = 0x0000102040004020ULL;
        data[280] = 0x0000000040004020ULL;
        data[288] = 0x0000000040004000ULL;
        data[291] = 0x0000000040004000ULL;
        data[322] = 0x0000000040004020ULL;
        data[383] = 0x0000002040004000ULL;
        data[414] = 0x0000002040004020ULL;
        data[417] = 0x0008102040004020ULL;
        data[424] = 0x0000102040004000ULL;
        data[429] = 0x0000000040004000ULL;
        data[460] = 0x0000000040004020ULL;
        data[462] = 0x0000000040004020ULL;
        data[470] = 0x0000000040004000ULL;
        data[479] = 0x0000002040004000ULL;
        data[510] = 0x0000002040004020ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [507]();
        data[1] = 0x1008040200020408ULL;
        data[67] = 0x0000000200020400ULL;
        data[73] = 0x0000000200020000ULL;
        data[84] = 0x0000000200020408ULL;
        data[90] = 0x0000000200020000ULL;
        data[122] = 0x0000040200020000ULL;
        data[139] = 0x0000040200020000ULL;
        data[163] = 0x0000000200020400ULL;
        data[164] = 0x0000000200020000ULL;
        data[180] = 0x0000000200020408ULL;
        data[181] = 0x0000000200020000ULL;
        data[213] = 0x0000040200020400ULL;
        data[218] = 0x0000040200020000ULL;
        data[229] = 0x0000040200020408ULL;
        data[235] = 0x0000040200020000ULL;
        data[254] = 0x0000000200020400ULL;
        data[260] = 0x0000000200020000ULL;
        data[271] = 0x0000000200020408ULL;
        data[277] = 0x0000000200020000ULL;
        data[309] = 0x0000040200020400ULL;
        data[310] = 0x0008040200020000ULL;
        data[325] = 0x0000040200020408ULL;
        data[326] = 0x0008040200020000ULL;
        data[350] = 0x0000000200020400ULL;
        data[367] = 0x0000000200020408ULL;
        data[400] = 0x0008040200020400ULL;
        data[406] = 0x1008040200020000ULL;
        data[417] = 0x0008040200020408ULL;
        data[422] = 0x1008040200020000ULL;
        data[489] = 0x0000000200020000ULL;
        data[496] = 0x1008040200020400ULL;
        data[506] = 0x0000000200020000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [509]();
        data[1] = 0x2010080500050810ULL;
        data[8] = 0x0000000500050000ULL;
        data[30] = 0x0000000500050810ULL;
        data[42] = 0x0000000500050000ULL;
        data[105] = 0x0000080500050800ULL;
        data[107] = 0x0010080500050000ULL;
        data[134] = 0x0000000500050800ULL;
        data[138] = 0x0000080500050810ULL;
        data[140] = 0x0010080500050000ULL;
        data[146] = 0x0000000500050000ULL;
        data[167] = 0x0000000500050810ULL;
        data[179] = 0x0000000500050000ULL;
        data[188] = 0x0000000500050800ULL;
        data[222] = 0x0000000500050810ULL;
        data[244] = 0x0000080500050000ULL;
        data[278] = 0x0000080500050000ULL;
        data[287] = 0x0010080500050800ULL;
        data[299] = 0x2010080500050000ULL;
        data[321] = 0x0010080500050810ULL;
        data[326] = 0x0000000500050800ULL;
        data[328] = 0x0000000500050000ULL;
        data[332] = 0x2010080500050000ULL;
        data[359] = 0x0000000500050810ULL;
        data[362] = 0x0000000500050000ULL;
        data[425] = 0x0000080500050800ULL;
        data[436] = 0x0000080500050000ULL;
        data[458] = 0x0000080500050810ULL;
        data[466] = 0x0000000500050000ULL;
        data[470] = 0x0000080500050000ULL;
        data[479] = 0x2010080500050800ULL;
        data[499] = 0x0000000500050000ULL;
        data[508] = 0x0000000500050800ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_17_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1025]();
        data[1] = 0x4020110a000a1120ULL;
        data[14] = 0x0000000a000a1020ULL;
        data[22] = 0x0000100a000a0000ULL;
        data[32] = 0x4020100a000a0000ULL;
        data[33] = 0x0000010a000a1120ULL;
        data[51] = 0x0000110a000a0100ULL;
        data[61] = 0x0000010a000a1000ULL;
        data[65] = 0x0000000a000a0000ULL;
        data[66] = 0x0000110a000a1020ULL;
        data[69] = 0x0020110a000a0100ULL;
        data[72] = 0x4020100a000a1100ULL;
        data[105] = 0x0000000a000a1100ULL;
        data[111] = 0x0000010a000a0000ULL;
        data[115] = 0x0000000a000a1120ULL;
        data[123] = 0x0000100a000a0100ULL;
        data[129] = 0x0000010a000a0000ULL;
        data[138] = 0x0000100a000a1000ULL;
        data[140] = 0x0020100a000a0100ULL;
        data[148] = 0x4020100a000a1020ULL;
        data[166] = 0x0000000a000a0100ULL;
        data[167] = 0x0000110a000a1120ULL;
        data[181] = 0x0000000a000a1020ULL;
        data[184] = 0x0000000a000a0100ULL;
        data[185] = 0x0020110a000a1120ULL;
        data[199] = 0x0000100a000a0000ULL;
        data[216] = 0x0020100a000a0000ULL;
        data[227] = 0x0000010a000a1000ULL;
        data[230] = 0x0000010a000a0100ULL;
        data[235] = 0x0000110a000a0100ULL;
        data[239] = 0x0000100a000a1100ULL;
        data[245] = 0x0000010a000a1000ULL;
        data[256] = 0x0020100a000a1100ULL;
        data[263] = 0x4020110a000a0000ULL;
        data[282] = 0x0000000a000a1120ULL;
        data[295] = 0x0000010a000a0000ULL;
        data[299] = 0x0000000a000a1120ULL;
        data[306] = 0x0000010a000a0000ULL;
        data[307] = 0x0000100a000a0100ULL;
        data[314] = 0x0000100a000a1020ULL;
        data[317] = 0x4020100a000a0100ULL;
        data[332] = 0x0020100a000a1020ULL;
        data[346] = 0x0000010a000a1100ULL;
        data[350] = 0x0000000a000a0100ULL;
        data[351] = 0x0000110a000a1120ULL;
        data[378] = 0x0000000a000a0000ULL;
        data[379] = 0x4020110a000a1000ULL;
        data[383] = 0x0000100a000a0000ULL;
        data[396] = 0x0000010a000a0100ULL;
        data[411] = 0x0000010a000a1000ULL;
        data[414] = 0x0000010a000a0100ULL;
        data[422] = 0x0000010a000a1020ULL;
        data[423] = 0x0000100a000a1100ULL;
        data[429] = 0x0000110a000a0000ULL;
        data[433] = 0x4020100a000a1120ULL;
        data[447] = 0x0020110a000a0000ULL;
        data[466] = 0x0000000a000a1120ULL;
        data[472] = 0x0000010a000a0000ULL;
        data[484] = 0x0000100a000a0100ULL;
        data[490] = 0x0000010a000a0000ULL;
        data[494] = 0x0000000a000a1000ULL;
        data[498] = 0x0000100a000a1020ULL;
        data[501] = 0x0020100a000a0100ULL;
        data[512] = 0x0000010a000a1100ULL;
        data[530] = 0x0000010a000a1100ULL;
        data[544] = 0x0000000a000a0000ULL;
        data[545] = 0x0000110a000a1000ULL;
        data[548] = 0x4020110a000a0100ULL;
        data[562] = 0x0000000a000a0000ULL;
        data[563] = 0x0020110a000a1000ULL;
        data[580] = 0x0000010a000a0100ULL;
        data[588] = 0x0000010a000a1020ULL;
        data[591] = 0x0000010a000a0100ULL;
        data[599] = 0x0000100a000a1120ULL;
        data[606] = 0x0000010a000a1020ULL;
        data[613] = 0x0000110a000a0000ULL;
        data[617] = 0x0020100a000a1120ULL;
        data[624] = 0x4020110a000a0000ULL;
        data[656] = 0x0000010a000a0000ULL;
        data[660] = 0x0000000a000a1000ULL;
        data[663] = 0x0000000a000a0100ULL;
        data[664] = 0x4020110a000a1100ULL;
        data[668] = 0x0000100a000a0100ULL;
        data[678] = 0x0000000a000a1000ULL;
        data[695] = 0x4020100a000a0000ULL;
        data[696] = 0x0000010a000a1100ULL;
        data[707] = 0x0000010a000a1120ULL;
        data[714] = 0x0000110a000a0100ULL;
        data[728] = 0x0000000a000a0000ULL;
        data[729] = 0x0000110a000a1000ULL;
        data[732] = 0x0020110a000a0100ULL;
        data[739] = 0x0000000a000a0000ULL;
        data[740] = 0x4020110a000a1020ULL;
        data[757] = 0x0000010a000a0100ULL;
        data[772] = 0x0000010a000a1020ULL;
        data[775] = 0x0000010a000a0100ULL;
        data[779] = 0x0000000a000a1100ULL;
        data[783] = 0x0000100a000a1120ULL;
        data[790] = 0x0000110a000a0000ULL;
        data[808] = 0x0020110a000a0000ULL;
        data[811] = 0x4020100a000a1000ULL;
        data[829] = 0x0000000a000a0100ULL;
        data[830] = 0x0000110a000a1100ULL;
        data[844] = 0x0000000a000a1000ULL;
        data[847] = 0x0000000a000a0100ULL;
        data[848] = 0x0020110a000a1100ULL;
        data[854] = 0x0000000a000a1020ULL;
        data[862] = 0x0000100a000a0000ULL;
        data[873] = 0x0000010a000a1120ULL;
        data[879] = 0x0020100a000a0000ULL;
        data[891] = 0x0000010a000a1120ULL;
        data[898] = 0x0000110a000a0100ULL;
        data[905] = 0x0000000a000a0000ULL;
        data[906] = 0x0000110a000a1020ULL;
        data[909] = 0x4020110a000a0100ULL;
        data[923] = 0x0000000a000a0000ULL;
        data[924] = 0x0020110a000a1020ULL;
        data[941] = 0x0000010a000a0100ULL;
        data[945] = 0x0000000a000a1100ULL;
        data[963] = 0x0000000a000a1100ULL;
        data[969] = 0x0000010a000a0000ULL;
        data[974] = 0x0000110a000a0000ULL;
        data[978] = 0x0000100a000a1000ULL;
        data[980] = 0x4020100a000a0100ULL;
        data[995] = 0x0020100a000a1000ULL;
        data[1013] = 0x0000000a000a0100ULL;
        data[1014] = 0x0000110a000a1100ULL;
        data[1021] = 0x0000000a000a1020ULL;
        data[1024] = 0x0000000a000a0100ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_9_mixin<0x1fff>, [](uint64_t *& data) {
        data = new uint64_t [8190]();
        data[1] = 0x8041221400142241ULL;
        data[74] = 0x0000001400142040ULL;
        data[153] = 0x0000021400142000ULL;
        data[159] = 0x8040201400140000ULL;
        data[175] = 0x0000001400142040ULL;
        data[181] = 0x0000001400140200ULL;
        data[185] = 0x0000001400142201ULL;
        data[197] = 0x0000201400142240ULL;
        data[211] = 0x0001021400140000ULL;
        data[222] = 0x0000201400142201ULL;
        data[233] = 0x0000001400140000ULL;
        data[249] = 0x0000221400140000ULL;
        data[252] = 0x0001221400142000ULL;
        data[257] = 0x0000001400140200ULL;
        data[270] = 0x0000201400140000ULL;
        data[276] = 0x8041221400142200ULL;
        data[282] = 0x0000001400140201ULL;
        data[294] = 0x8040201400140200ULL;
        data[298] = 0x8040201400142241ULL;
        data[312] = 0x0001021400140000ULL;
        data[324] = 0x0041221400140000ULL;
        data[347] = 0x0000021400140200ULL;
        data[350] = 0x8040221400140000ULL;
        data[351] = 0x0001021400142241ULL;
        data[388] = 0x0000221400142241ULL;
        data[448] = 0x0000021400140201ULL;
        data[451] = 0x0000001400142000ULL;
        data[509] = 0x0000001400140000ULL;
        data[546] = 0x0000201400140000ULL;
        data[550] = 0x0000201400142000ULL;
        data[574] = 0x8040201400142200ULL;
        data[610] = 0x0000001400140000ULL;
        data[617] = 0x0000021400142040ULL;
        data[622] = 0x0040201400140000ULL;
        data[627] = 0x0001021400142200ULL;
        data[645] = 0x0000001400140200ULL;
        data[647] = 0x8040201400140000ULL;
        data[648] = 0x0000001400142241ULL;
        data[664] = 0x0000221400142200ULL;
        data[675] = 0x0001021400140000ULL;
        data[686] = 0x0000201400142241ULL;
        data[700] = 0x0000021400140000ULL;
        data[712] = 0x0000221400140000ULL;
        data[716] = 0x0001221400142040ULL;
        data[724] = 0x0000021400140200ULL;
        data[727] = 0x0001021400142201ULL;
        data[740] = 0x0041221400142240ULL;
        data[745] = 0x0000001400140201ULL;
        data[765] = 0x8040221400142201ULL;
        data[776] = 0x0001021400140000ULL;
        data[813] = 0x0040221400140000ULL;
        data[823] = 0x0001221400140201ULL;
        data[914] = 0x0000001400142040ULL;
        data[924] = 0x0000001400142200ULL;
        data[961] = 0x0000201400142200ULL;
        data[972] = 0x0000001400140000ULL;
        data[992] = 0x0001221400142000ULL;
        data[997] = 0x0000001400140000ULL;
        data[1010] = 0x0000201400140000ULL;
        data[1013] = 0x0000201400142040ULL;
        data[1021] = 0x0000001400140200ULL;
        data[1025] = 0x0000001400142201ULL;
        data[1037] = 0x0040201400142240ULL;
        data[1051] = 0x0001021400140000ULL;
        data[1062] = 0x8040201400142201ULL;
        data[1073] = 0x0000001400140000ULL;
        data[1089] = 0x0040221400140000ULL;
        data[1090] = 0x0001021400142240ULL;
        data[1092] = 0x0041221400142000ULL;
        data[1110] = 0x0040201400140000ULL;
        data[1115] = 0x0000021400142201ULL;
        data[1120] = 0x0000201400140201ULL;
        data[1127] = 0x0000221400142240ULL;
        data[1163] = 0x0000021400140000ULL;
        data[1187] = 0x0000021400140200ULL;
        data[1191] = 0x0001021400142241ULL;
        data[1228] = 0x0040221400142241ULL;
        data[1286] = 0x0001221400140201ULL;
        data[1289] = 0x0000201400142000ULL;
        data[1349] = 0x0000001400140000ULL;
        data[1386] = 0x0040201400140000ULL;
        data[1387] = 0x0000001400142240ULL;
        data[1390] = 0x0040201400142000ULL;
        data[1413] = 0x0000001400142201ULL;
        data[1425] = 0x0000201400142240ULL;
        data[1439] = 0x0000021400140000ULL;
        data[1443] = 0x0001021400142000ULL;
        data[1455] = 0x0001221400142040ULL;
        data[1461] = 0x0000001400140000ULL;
        data[1467] = 0x0001021400142200ULL;
        data[1480] = 0x0000221400142000ULL;
        data[1485] = 0x0000001400140200ULL;
        data[1488] = 0x0000001400142241ULL;
        data[1504] = 0x0040221400142200ULL;
        data[1515] = 0x0001021400140000ULL;
        data[1526] = 0x0040201400142241ULL;
        data[1540] = 0x0000021400140000ULL;
        data[1552] = 0x8040221400140000ULL;
        data[1556] = 0x8041221400142040ULL;
        data[1562] = 0x0001221400140200ULL;
        data[1578] = 0x0000021400142241ULL;
        data[1584] = 0x0000201400140201ULL;
        data[1663] = 0x8041221400140201ULL;
        data[1736] = 0x0000001400140000ULL;
        data[1740] = 0x0000001400142000ULL;
        data[1753] = 0x0000201400142040ULL;
        data[1764] = 0x0000001400142200ULL;
        data[1778] = 0x0000201400142000ULL;
        data[1801] = 0x0040201400142200ULL;
        data[1812] = 0x0000001400140000ULL;
        data[1832] = 0x8041221400142000ULL;
        data[1837] = 0x0000001400140000ULL;
        data[1850] = 0x8040201400140000ULL;
        data[1853] = 0x8040201400142040ULL;
        data[1854] = 0x0000021400142200ULL;
        data[1859] = 0x0000201400140200ULL;
        data[1876] = 0x0000001400142241ULL;
        data[1902] = 0x0000021400140000ULL;
        data[1906] = 0x0001021400142040ULL;
        data[1930] = 0x0001021400142240ULL;
        data[1943] = 0x0000221400142040ULL;
        data[1955] = 0x0000021400142201ULL;
        data[1960] = 0x8040201400140201ULL;
        data[1967] = 0x8040221400142240ULL;
        data[2003] = 0x0000021400140000ULL;
        data[2013] = 0x0001021400140201ULL;
        data[2025] = 0x0001221400140200ULL;
        data[2050] = 0x0000221400140201ULL;
        data[2126] = 0x0041221400140201ULL;
        data[2129] = 0x8040201400142000ULL;
        data[2152] = 0x0000001400142200ULL;
        data[2182] = 0x0001021400142000ULL;
        data[2200] = 0x0000001400140000ULL;
        data[2204] = 0x0000001400142040ULL;
        data[2219] = 0x0000221400142000ULL;
        data[2227] = 0x0000001400142240ULL;
        data[2241] = 0x0000201400142040ULL;
        data[2253] = 0x0000001400142201ULL;
        data[2265] = 0x8040201400142240ULL;
        data[2279] = 0x0000021400140000ULL;
        data[2283] = 0x0001021400142000ULL;
        data[2295] = 0x0041221400142040ULL;
        data[2301] = 0x0000001400140000ULL;
        data[2311] = 0x0000001400140201ULL;
        data[2317] = 0x0000021400142240ULL;
        data[2320] = 0x8040221400142000ULL;
        data[2323] = 0x0000201400140200ULL;
        data[2348] = 0x0000201400140201ULL;
        data[2378] = 0x0001221400140000ULL;
        data[2402] = 0x0041221400140200ULL;
        data[2418] = 0x0000021400142241ULL;
        data[2424] = 0x0040201400140201ULL;
        data[2476] = 0x0001021400140201ULL;
        data[2479] = 0x0000001400142000ULL;
        data[2514] = 0x0000221400140201ULL;
        data[2517] = 0x0000201400142000ULL;
        data[2576] = 0x0000001400140000ULL;
        data[2580] = 0x0000001400142000ULL;
        data[2593] = 0x0040201400142040ULL;
        data[2615] = 0x0000001400142240ULL;
        data[2618] = 0x8040201400142000ULL;
        data[2645] = 0x0001021400142040ULL;
        data[2670] = 0x0000021400142000ULL;
        data[2676] = 0x0000201400140000ULL;
        data[2682] = 0x0000221400142040ULL;
        data[2694] = 0x0000021400142200ULL;
        data[2699] = 0x0040201400140200ULL;
        data[2716] = 0x0000001400142241ULL;
        data[2742] = 0x0000021400140000ULL;
        data[2746] = 0x0001021400142040ULL;
        data[2752] = 0x0001021400140200ULL;
        data[2774] = 0x0000001400140201ULL;
        data[2783] = 0x0040221400142040ULL;
        data[2789] = 0x0000221400140200ULL;
        data[2793] = 0x0001221400142201ULL;
        data[2811] = 0x0000201400140201ULL;
        data[2841] = 0x0001221400140000ULL;
        data[2853] = 0x0001021400140201ULL;
        data[2865] = 0x8041221400140200ULL;
        data[2890] = 0x0040221400140201ULL;
        data[2943] = 0x0000001400142040ULL;
        data[2968] = 0x0000001400142000ULL;
        data[2980] = 0x0000201400142040ULL;
        data[2992] = 0x0000001400142200ULL;
        data[3022] = 0x0001021400142000ULL;
        data[3040] = 0x0000001400140000ULL;
        data[3044] = 0x0000001400142040ULL;
        data[3050] = 0x0000001400140200ULL;
        data[3059] = 0x0040221400142000ULL;
        data[3081] = 0x0040201400142040ULL;
        data[3087] = 0x0000201400140200ULL;
        data[3091] = 0x0000201400142201ULL;
        data[3117] = 0x0001221400140000ULL;
        data[3134] = 0x0000021400142040ULL;
        data[3139] = 0x0000201400140000ULL;
        data[3151] = 0x0000001400140201ULL;
        data[3157] = 0x0000021400142240ULL;
        data[3163] = 0x8040201400140200ULL;
        data[3188] = 0x0040201400140201ULL;
        data[3215] = 0x0001021400140200ULL;
        data[3218] = 0x8041221400140000ULL;
        data[3240] = 0x0000021400140201ULL;
        data[3253] = 0x0000221400140200ULL;
        data[3257] = 0x0001221400142241ULL;
        data[3316] = 0x0001021400140201ULL;
        data[3319] = 0x0000001400142000ULL;
        data[3354] = 0x8040221400140201ULL;
        data[3357] = 0x0040201400142000ULL;
        data[3409] = 0x0000021400142000ULL;
        data[3415] = 0x0000201400140000ULL;
        data[3431] = 0x0000001400142040ULL;
        data[3455] = 0x0000001400142240ULL;
        data[3485] = 0x0001021400142040ULL;
        data[3510] = 0x0000021400142000ULL;
        data[3513] = 0x0000001400140200ULL;
        data[3516] = 0x8040201400140000ULL;
        data[3522] = 0x8040221400142040ULL;
        data[3532] = 0x0001221400142200ULL;
        data[3538] = 0x0000001400140201ULL;
        data[3550] = 0x0000201400140200ULL;
        data[3554] = 0x0000201400142241ULL;
        data[3568] = 0x0001021400140000ULL;
        data[3580] = 0x0001221400140000ULL;
        data[3592] = 0x0001021400140200ULL;
        data[3606] = 0x0000221400140000ULL;
        data[3614] = 0x0000001400140201ULL;
        data[3629] = 0x8040221400140200ULL;
        data[3633] = 0x8041221400142201ULL;
        data[3651] = 0x8040201400140201ULL;
        data[3681] = 0x0041221400140000ULL;
        data[3704] = 0x0000021400140201ULL;
        data[3707] = 0x0000001400142000ULL;
        data[3783] = 0x0000001400142040ULL;
        data[3808] = 0x0000001400142000ULL;
        data[3820] = 0x8040201400142040ULL;
        data[3830] = 0x0000201400142200ULL;
        data[3866] = 0x0000001400140000ULL;
        data[3873] = 0x0000021400142040ULL;
        data[3878] = 0x0000201400140000ULL;
        data[3890] = 0x0000001400140200ULL;
        data[3903] = 0x0000201400140000ULL;
        data[3927] = 0x8040201400140200ULL;
        data[3931] = 0x8040201400142201ULL;
        data[3957] = 0x0041221400140000ULL;
        data[3974] = 0x0000021400142040ULL;
        data[3979] = 0x0040201400140000ULL;
        data[3980] = 0x0000021400140200ULL;
        data[3983] = 0x0001021400142201ULL;
        data[3996] = 0x0001221400142240ULL;
        data[4001] = 0x0000001400140201ULL;
        data[4021] = 0x0000221400142201ULL;
        data[4032] = 0x0001021400140000ULL;
        data[4055] = 0x0001021400140200ULL;
        data[4069] = 0x0000221400140000ULL;
        data[4080] = 0x0000021400140201ULL;
        data[4093] = 0x0040221400140200ULL;
        data[4097] = 0x0041221400142241ULL;
        data[4170] = 0x0000001400142040ULL;
        data[4249] = 0x0000021400142000ULL;
        data[4255] = 0x0040201400140000ULL;
        data[4271] = 0x0000001400142040ULL;
        data[4277] = 0x0000001400140200ULL;
        data[4281] = 0x0000001400142201ULL;
        data[4293] = 0x0000201400142240ULL;
        data[4307] = 0x0001021400140000ULL;
        data[4318] = 0x0000201400142201ULL;
        data[4329] = 0x0000001400140000ULL;
        data[4345] = 0x0000221400140000ULL;
        data[4348] = 0x0001221400142000ULL;
        data[4353] = 0x0000001400140200ULL;
        data[4366] = 0x0000201400140000ULL;
        data[4372] = 0x0041221400142200ULL;
        data[4378] = 0x0000001400140201ULL;
        data[4390] = 0x0040201400140200ULL;
        data[4394] = 0x0040201400142241ULL;
        data[4408] = 0x0001021400140000ULL;
        data[4420] = 0x8041221400140000ULL;
        data[4443] = 0x0000021400140200ULL;
        data[4446] = 0x0040221400140000ULL;
        data[4447] = 0x0001021400142241ULL;
        data[4484] = 0x0000221400142241ULL;
        data[4544] = 0x0000021400140201ULL;
        data[4547] = 0x0000001400142000ULL;
        data[4605] = 0x0000001400140000ULL;
        data[4642] = 0x0000201400140000ULL;
        data[4646] = 0x0000201400142000ULL;
        data[4670] = 0x0040201400142200ULL;
        data[4706] = 0x0000001400140000ULL;
        data[4713] = 0x0000021400142040ULL;
        data[4718] = 0x8040201400140000ULL;
        data[4723] = 0x0001021400142200ULL;
        data[4741] = 0x0000001400140200ULL;
        data[4743] = 0x0040201400140000ULL;
        data[4744] = 0x0000001400142241ULL;
        data[4760] = 0x0000221400142200ULL;
        data[4771] = 0x0001021400140000ULL;
        data[4782] = 0x0000201400142241ULL;
        data[4796] = 0x0000021400140000ULL;
        data[4808] = 0x0000221400140000ULL;
        data[4812] = 0x0001221400142040ULL;
        data[4820] = 0x0000021400140200ULL;
        data[4823] = 0x0001021400142201ULL;
        data[4836] = 0x8041221400142240ULL;
        data[4841] = 0x0000001400140201ULL;
        data[4861] = 0x0040221400142201ULL;
        data[4872] = 0x0001021400140000ULL;
        data[4909] = 0x8040221400140000ULL;
        data[4919] = 0x0001221400140201ULL;
        data[5010] = 0x0000001400142040ULL;
        data[5020] = 0x0000001400142200ULL;
        data[5057] = 0x0000201400142200ULL;
        data[5068] = 0x0000001400140000ULL;
        data[5088] = 0x0001221400142000ULL;
        data[5093] = 0x0000001400140000ULL;
        data[5106] = 0x0000201400140000ULL;
        data[5109] = 0x0000201400142040ULL;
        data[5117] = 0x0000001400140200ULL;
        data[5121] = 0x0000001400142201ULL;
        data[5133] = 0x8040201400142240ULL;
        data[5147] = 0x0001021400140000ULL;
        data[5158] = 0x0040201400142201ULL;
        data[5169] = 0x0000001400140000ULL;
        data[5185] = 0x8040221400140000ULL;
        data[5186] = 0x0001021400142240ULL;
        data[5188] = 0x8041221400142000ULL;
        data[5206] = 0x8040201400140000ULL;
        data[5211] = 0x0000021400142201ULL;
        data[5216] = 0x0000201400140201ULL;
        data[5223] = 0x0000221400142240ULL;
        data[5259] = 0x0000021400140000ULL;
        data[5283] = 0x0000021400140200ULL;
        data[5287] = 0x0001021400142241ULL;
        data[5324] = 0x8040221400142241ULL;
        data[5382] = 0x0001221400140201ULL;
        data[5385] = 0x0000201400142000ULL;
        data[5445] = 0x0000001400140000ULL;
        data[5482] = 0x8040201400140000ULL;
        data[5483] = 0x0000001400142240ULL;
        data[5486] = 0x8040201400142000ULL;
        data[5509] = 0x0000001400142201ULL;
        data[5521] = 0x0000201400142240ULL;
        data[5535] = 0x0000021400140000ULL;
        data[5539] = 0x0001021400142000ULL;
        data[5551] = 0x0001221400142040ULL;
        data[5557] = 0x0000001400140000ULL;
        data[5563] = 0x0001021400142200ULL;
        data[5576] = 0x0000221400142000ULL;
        data[5581] = 0x0000001400140200ULL;
        data[5584] = 0x0000001400142241ULL;
        data[5600] = 0x8040221400142200ULL;
        data[5611] = 0x0001021400140000ULL;
        data[5622] = 0x8040201400142241ULL;
        data[5636] = 0x0000021400140000ULL;
        data[5648] = 0x0040221400140000ULL;
        data[5652] = 0x0041221400142040ULL;
        data[5658] = 0x0001221400140200ULL;
        data[5674] = 0x0000021400142241ULL;
        data[5680] = 0x0000201400140201ULL;
        data[5759] = 0x0041221400140201ULL;
        data[5832] = 0x0000001400140000ULL;
        data[5836] = 0x0000001400142000ULL;
        data[5849] = 0x0000201400142040ULL;
        data[5860] = 0x0000001400142200ULL;
        data[5874] = 0x0000201400142000ULL;
        data[5897] = 0x8040201400142200ULL;
        data[5908] = 0x0000001400140000ULL;
        data[5928] = 0x0041221400142000ULL;
        data[5933] = 0x0000001400140000ULL;
        data[5946] = 0x0040201400140000ULL;
        data[5949] = 0x0040201400142040ULL;
        data[5950] = 0x0000021400142200ULL;
        data[5955] = 0x0000201400140200ULL;
        data[5972] = 0x0000001400142241ULL;
        data[5998] = 0x0000021400140000ULL;
        data[6002] = 0x0001021400142040ULL;
        data[6026] = 0x0001021400142240ULL;
        data[6039] = 0x0000221400142040ULL;
        data[6051] = 0x0000021400142201ULL;
        data[6056] = 0x0040201400140201ULL;
        data[6063] = 0x0040221400142240ULL;
        data[6099] = 0x0000021400140000ULL;
        data[6109] = 0x0001021400140201ULL;
        data[6121] = 0x0001221400140200ULL;
        data[6146] = 0x0000221400140201ULL;
        data[6222] = 0x8041221400140201ULL;
        data[6225] = 0x0040201400142000ULL;
        data[6248] = 0x0000001400142200ULL;
        data[6278] = 0x0001021400142000ULL;
        data[6296] = 0x0000001400140000ULL;
        data[6300] = 0x0000001400142040ULL;
        data[6315] = 0x0000221400142000ULL;
        data[6323] = 0x0000001400142240ULL;
        data[6337] = 0x0000201400142040ULL;
        data[6349] = 0x0000001400142201ULL;
        data[6361] = 0x0040201400142240ULL;
        data[6375] = 0x0000021400140000ULL;
        data[6379] = 0x0001021400142000ULL;
        data[6391] = 0x8041221400142040ULL;
        data[6397] = 0x0000001400140000ULL;
        data[6407] = 0x0000001400140201ULL;
        data[6413] = 0x0000021400142240ULL;
        data[6416] = 0x0040221400142000ULL;
        data[6419] = 0x0000201400140200ULL;
        data[6444] = 0x0000201400140201ULL;
        data[6474] = 0x0001221400140000ULL;
        data[6498] = 0x8041221400140200ULL;
        data[6514] = 0x0000021400142241ULL;
        data[6520] = 0x8040201400140201ULL;
        data[6572] = 0x0001021400140201ULL;
        data[6575] = 0x0000001400142000ULL;
        data[6610] = 0x0000221400140201ULL;
        data[6613] = 0x0000201400142000ULL;
        data[6672] = 0x0000001400140000ULL;
        data[6676] = 0x0000001400142000ULL;
        data[6689] = 0x8040201400142040ULL;
        data[6711] = 0x0000001400142240ULL;
        data[6714] = 0x0040201400142000ULL;
        data[6741] = 0x0001021400142040ULL;
        data[6766] = 0x0000021400142000ULL;
        data[6772] = 0x0000201400140000ULL;
        data[6778] = 0x0000221400142040ULL;
        data[6790] = 0x0000021400142200ULL;
        data[6795] = 0x8040201400140200ULL;
        data[6812] = 0x0000001400142241ULL;
        data[6838] = 0x0000021400140000ULL;
        data[6842] = 0x0001021400142040ULL;
        data[6848] = 0x0001021400140200ULL;
        data[6870] = 0x0000001400140201ULL;
        data[6879] = 0x8040221400142040ULL;
        data[6885] = 0x0000221400140200ULL;
        data[6889] = 0x0001221400142201ULL;
        data[6907] = 0x0000201400140201ULL;
        data[6937] = 0x0001221400140000ULL;
        data[6949] = 0x0001021400140201ULL;
        data[6961] = 0x0041221400140200ULL;
        data[6986] = 0x8040221400140201ULL;
        data[7039] = 0x0000001400142040ULL;
        data[7064] = 0x0000001400142000ULL;
        data[7076] = 0x0000201400142040ULL;
        data[7088] = 0x0000001400142200ULL;
        data[7118] = 0x0001021400142000ULL;
        data[7136] = 0x0000001400140000ULL;
        data[7140] = 0x0000001400142040ULL;
        data[7146] = 0x0000001400140200ULL;
        data[7155] = 0x8040221400142000ULL;
        data[7177] = 0x8040201400142040ULL;
        data[7183] = 0x0000201400140200ULL;
        data[7187] = 0x0000201400142201ULL;
        data[7213] = 0x0001221400140000ULL;
        data[7230] = 0x0000021400142040ULL;
        data[7235] = 0x0000201400140000ULL;
        data[7247] = 0x0000001400140201ULL;
        data[7253] = 0x0000021400142240ULL;
        data[7259] = 0x0040201400140200ULL;
        data[7284] = 0x8040201400140201ULL;
        data[7311] = 0x0001021400140200ULL;
        data[7314] = 0x0041221400140000ULL;
        data[7336] = 0x0000021400140201ULL;
        data[7349] = 0x0000221400140200ULL;
        data[7353] = 0x0001221400142241ULL;
        data[7412] = 0x0001021400140201ULL;
        data[7415] = 0x0000001400142000ULL;
        data[7450] = 0x0040221400140201ULL;
        data[7453] = 0x8040201400142000ULL;
        data[7505] = 0x0000021400142000ULL;
        data[7511] = 0x0000201400140000ULL;
        data[7527] = 0x0000001400142040ULL;
        data[7551] = 0x0000001400142240ULL;
        data[7581] = 0x0001021400142040ULL;
        data[7606] = 0x0000021400142000ULL;
        data[7609] = 0x0000001400140200ULL;
        data[7612] = 0x0040201400140000ULL;
        data[7618] = 0x0040221400142040ULL;
        data[7628] = 0x0001221400142200ULL;
        data[7634] = 0x0000001400140201ULL;
        data[7646] = 0x0000201400140200ULL;
        data[7650] = 0x0000201400142241ULL;
        data[7664] = 0x0001021400140000ULL;
        data[7676] = 0x0001221400140000ULL;
        data[7688] = 0x0001021400140200ULL;
        data[7702] = 0x0000221400140000ULL;
        data[7710] = 0x0000001400140201ULL;
        data[7725] = 0x0040221400140200ULL;
        data[7729] = 0x0041221400142201ULL;
        data[7747] = 0x0040201400140201ULL;
        data[7777] = 0x8041221400140000ULL;
        data[7800] = 0x0000021400140201ULL;
        data[7803] = 0x0000001400142000ULL;
        data[7879] = 0x0000001400142040ULL;
        data[7904] = 0x0000001400142000ULL;
        data[7916] = 0x0040201400142040ULL;
        data[7926] = 0x0000201400142200ULL;
        data[7962] = 0x0000001400140000ULL;
        data[7969] = 0x0000021400142040ULL;
        data[7974] = 0x0000201400140000ULL;
        data[7986] = 0x0000001400140200ULL;
        data[7999] = 0x0000201400140000ULL;
        data[8023] = 0x0040201400140200ULL;
        data[8027] = 0x0040201400142201ULL;
        data[8053] = 0x8041221400140000ULL;
        data[8070] = 0x0000021400142040ULL;
        data[8075] = 0x8040201400140000ULL;
        data[8076] = 0x0000021400140200ULL;
        data[8079] = 0x0001021400142201ULL;
        data[8092] = 0x0001221400142240ULL;
        data[8097] = 0x0000001400140201ULL;
        data[8117] = 0x0000221400142201ULL;
        data[8128] = 0x0001021400140000ULL;
        data[8151] = 0x0001021400140200ULL;
        data[8165] = 0x0000221400140000ULL;
        data[8176] = 0x0000021400140201ULL;
        data[8189] = 0x8040221400140200ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_7_mixin<0x1fff>, [](uint64_t *& data) {
        data = new uint64_t [8171]();
        data[1] = 0x0182442800284482ULL;
        data[5] = 0x0000002800284402ULL;
        data[13] = 0x0000442800280402ULL;
        data[21] = 0x0080402800280402ULL;
        data[68] = 0x0080402800284080ULL;
        data[102] = 0x0080402800284480ULL;
        data[115] = 0x0000402800280400ULL;
        data[146] = 0x0000402800284402ULL;
        data[167] = 0x0002042800284080ULL;
        data[216] = 0x0102042800280000ULL;
        data[264] = 0x0082442800280000ULL;
        data[268] = 0x0000002800280000ULL;
        data[302] = 0x0080402800284402ULL;
        data[323] = 0x0000042800284080ULL;
        data[357] = 0x0102442800280000ULL;
        data[365] = 0x0080402800280000ULL;
        data[367] = 0x0000042800284000ULL;
        data[391] = 0x0000002800280000ULL;
        data[401] = 0x0002042800284400ULL;
        data[409] = 0x0000402800280000ULL;
        data[444] = 0x0000042800280402ULL;
        data[464] = 0x0000442800284080ULL;
        data[468] = 0x0000002800284000ULL;
        data[490] = 0x0000042800284080ULL;
        data[497] = 0x0082442800280402ULL;
        data[513] = 0x0080442800280000ULL;
        data[524] = 0x0102042800284480ULL;
        data[532] = 0x0000402800280000ULL;
        data[544] = 0x0182442800284000ULL;
        data[545] = 0x0000002800280400ULL;
        data[557] = 0x0000042800284400ULL;
        data[565] = 0x0080402800280000ULL;
        data[576] = 0x0000002800284482ULL;
        data[591] = 0x0000002800284080ULL;
        data[599] = 0x0080402800280400ULL;
        data[621] = 0x0182442800280402ULL;
        data[625] = 0x0000002800280402ULL;
        data[645] = 0x0080402800284000ULL;
        data[680] = 0x0000042800284480ULL;
        data[688] = 0x0080402800280000ULL;
        data[698] = 0x0000442800284400ULL;
        data[722] = 0x0080402800280400ULL;
        data[724] = 0x0000042800284402ULL;
        data[732] = 0x0000002800284482ULL;
        data[766] = 0x0000402800280402ULL;
        data[787] = 0x0002042800280000ULL;
        data[821] = 0x0000442800284480ULL;
        data[825] = 0x0000002800284400ULL;
        data[873] = 0x0000402800284482ULL;
        data[922] = 0x0080402800280402ULL;
        data[943] = 0x0000042800280000ULL;
        data[974] = 0x0002042800284080ULL;
        data[987] = 0x0000042800280000ULL;
        data[1021] = 0x0002042800280400ULL;
        data[1068] = 0x0102042800284000ULL;
        data[1075] = 0x0000002800284080ULL;
        data[1084] = 0x0000442800280000ULL;
        data[1088] = 0x0000002800280000ULL;
        data[1111] = 0x0000042800280000ULL;
        data[1116] = 0x0002442800284080ULL;
        data[1120] = 0x0000002800284000ULL;
        data[1144] = 0x0102042800280400ULL;
        data[1165] = 0x0182442800280000ULL;
        data[1177] = 0x0000042800280400ULL;
        data[1196] = 0x0000002800280402ULL;
        data[1208] = 0x0002042800284402ULL;
        data[1212] = 0x0000002800280000ULL;
        data[1217] = 0x0000402800284080ULL;
        data[1224] = 0x0000042800284000ULL;
        data[1243] = 0x0000002800284080ULL;
        data[1266] = 0x0080402800280000ULL;
        data[1272] = 0x0080442800284080ULL;
        data[1276] = 0x0000002800284000ULL;
        data[1300] = 0x0000042800280400ULL;
        data[1305] = 0x0082442800284480ULL;
        data[1309] = 0x0000002800284400ULL;
        data[1318] = 0x0000442800280400ULL;
        data[1331] = 0x0102042800284482ULL;
        data[1344] = 0x0000042800280402ULL;
        data[1349] = 0x0002442800284402ULL;
        data[1352] = 0x0000002800280402ULL;
        data[1365] = 0x0000442800284000ULL;
        data[1373] = 0x0080402800284080ULL;
        data[1399] = 0x0000002800284080ULL;
        data[1417] = 0x0000402800284000ULL;
        data[1432] = 0x0000002800284480ULL;
        data[1441] = 0x0000442800280400ULL;
        data[1445] = 0x0000002800280400ULL;
        data[1450] = 0x0000402800284400ULL;
        data[1473] = 0x0102442800284482ULL;
        data[1477] = 0x0000002800284402ULL;
        data[1493] = 0x0000402800280402ULL;
        data[1505] = 0x0080442800284402ULL;
        data[1540] = 0x0000402800284080ULL;
        data[1574] = 0x0000402800284480ULL;
        data[1595] = 0x0002042800280000ULL;
        data[1606] = 0x0080402800284400ULL;
        data[1629] = 0x0080442800284482ULL;
        data[1633] = 0x0000002800284402ULL;
        data[1688] = 0x0102042800280000ULL;
        data[1696] = 0x0000002800280000ULL;
        data[1730] = 0x0080402800284480ULL;
        data[1736] = 0x0002442800280000ULL;
        data[1740] = 0x0000002800280000ULL;
        data[1774] = 0x0000402800284402ULL;
        data[1795] = 0x0000042800284080ULL;
        data[1828] = 0x0002042800280402ULL;
        data[1837] = 0x0000402800280000ULL;
        data[1844] = 0x0000042800280000ULL;
        data[1849] = 0x0082442800284000ULL;
        data[1863] = 0x0000002800280000ULL;
        data[1875] = 0x0102042800284000ULL;
        data[1892] = 0x0080442800280000ULL;
        data[1896] = 0x0000002800280000ULL;
        data[1925] = 0x0082442800280400ULL;
        data[1929] = 0x0000002800280400ULL;
        data[1952] = 0x0102042800280402ULL;
        data[1969] = 0x0002442800280402ULL;
        data[1972] = 0x0182442800284080ULL;
        data[1976] = 0x0000002800284000ULL;
        data[1985] = 0x0000442800280000ULL;
        data[1993] = 0x0080402800280000ULL;
        data[2016] = 0x0102442800284000ULL;
        data[2019] = 0x0000002800280000ULL;
        data[2024] = 0x0080402800284080ULL;
        data[2029] = 0x0000042800284400ULL;
        data[2037] = 0x0000402800280000ULL;
        data[2053] = 0x0000002800280400ULL;
        data[2071] = 0x0000402800280400ULL;
        data[2093] = 0x0102442800280402ULL;
        data[2097] = 0x0000002800280402ULL;
        data[2117] = 0x0000402800284000ULL;
        data[2125] = 0x0080442800280402ULL;
        data[2152] = 0x0000042800284480ULL;
        data[2160] = 0x0000402800280000ULL;
        data[2172] = 0x0080442800284000ULL;
        data[2194] = 0x0000402800280400ULL;
        data[2204] = 0x0000002800284482ULL;
        data[2206] = 0x0182442800284400ULL;
        data[2227] = 0x0080402800280400ULL;
        data[2249] = 0x0080442800280402ULL;
        data[2253] = 0x0000002800280402ULL;
        data[2258] = 0x0080402800284402ULL;
        data[2273] = 0x0080402800284000ULL;
        data[2350] = 0x0080402800280400ULL;
        data[2381] = 0x0080402800284482ULL;
        data[2394] = 0x0000402800280402ULL;
        data[2415] = 0x0000042800280000ULL;
        data[2446] = 0x0002042800284080ULL;
        data[2469] = 0x0082442800280000ULL;
        data[2495] = 0x0102042800280000ULL;
        data[2547] = 0x0000002800284080ULL;
        data[2592] = 0x0182442800280000ULL;
        data[2596] = 0x0000002800280000ULL;
        data[2602] = 0x0000042800284080ULL;
        data[2636] = 0x0002042800284480ULL;
        data[2637] = 0x0102442800280000ULL;
        data[2644] = 0x0080402800280000ULL;
        data[2649] = 0x0000042800280400ULL;
        data[2680] = 0x0002042800284402ULL;
        data[2696] = 0x0000042800284000ULL;
        data[2703] = 0x0000002800284080ULL;
        data[2738] = 0x0000402800280000ULL;
        data[2744] = 0x0000442800284080ULL;
        data[2748] = 0x0000002800284000ULL;
        data[2772] = 0x0000042800280400ULL;
        data[2777] = 0x0002442800284480ULL;
        data[2781] = 0x0000002800284400ULL;
        data[2793] = 0x0080442800280000ULL;
        data[2803] = 0x0102042800284482ULL;
        data[2824] = 0x0000002800280402ULL;
        data[2826] = 0x0182442800280400ULL;
        data[2836] = 0x0000042800284402ULL;
        data[2845] = 0x0000402800284080ULL;
        data[2871] = 0x0000002800284080ULL;
        data[2878] = 0x0080402800280402ULL;
        data[2894] = 0x0080402800280000ULL;
        data[2904] = 0x0000002800284480ULL;
        data[2925] = 0x0080402800284000ULL;
        data[2933] = 0x0080442800284480ULL;
        data[2937] = 0x0000002800284400ULL;
        data[2959] = 0x0000042800284482ULL;
        data[2977] = 0x0000442800284402ULL;
        data[3001] = 0x0080402800280402ULL;
        data[3060] = 0x0000002800284480ULL;
        data[3067] = 0x0002042800280000ULL;
        data[3078] = 0x0000402800284400ULL;
        data[3101] = 0x0000442800284482ULL;
        data[3105] = 0x0000002800284402ULL;
        data[3168] = 0x0000002800280000ULL;
        data[3180] = 0x0002042800284000ULL;
        data[3202] = 0x0000402800284480ULL;
        data[3223] = 0x0000042800280000ULL;
        data[3256] = 0x0002042800280400ULL;
        data[3300] = 0x0002042800280402ULL;
        data[3303] = 0x0102042800284080ULL;
        data[3316] = 0x0000042800280000ULL;
        data[3321] = 0x0002442800284000ULL;
        data[3324] = 0x0000002800280000ULL;
        data[3347] = 0x0102042800284000ULL;
        data[3355] = 0x0000002800284080ULL;
        data[3364] = 0x0000442800280000ULL;
        data[3368] = 0x0000002800280000ULL;
        data[3397] = 0x0002442800280400ULL;
        data[3401] = 0x0000002800280400ULL;
        data[3424] = 0x0102042800280402ULL;
        data[3444] = 0x0102442800284080ULL;
        data[3448] = 0x0000002800284000ULL;
        data[3456] = 0x0000042800280402ULL;
        data[3465] = 0x0000402800280000ULL;
        data[3477] = 0x0080442800284000ULL;
        data[3491] = 0x0000002800280000ULL;
        data[3496] = 0x0000402800284080ULL;
        data[3503] = 0x0000042800284000ULL;
        data[3525] = 0x0000002800280400ULL;
        data[3537] = 0x0102042800284400ULL;
        data[3545] = 0x0080402800280000ULL;
        data[3553] = 0x0080442800280400ULL;
        data[3557] = 0x0000002800280400ULL;
        data[3580] = 0x0000042800280402ULL;
        data[3585] = 0x0082442800284482ULL;
        data[3589] = 0x0000002800284402ULL;
        data[3597] = 0x0000442800280402ULL;
        data[3600] = 0x0080442800284080ULL;
        data[3604] = 0x0000002800284000ULL;
        data[3644] = 0x0000442800284000ULL;
        data[3652] = 0x0080402800284080ULL;
        data[3678] = 0x0102442800284400ULL;
        data[3681] = 0x0000002800280400ULL;
        data[3686] = 0x0080402800284480ULL;
        data[3699] = 0x0000402800280400ULL;
        data[3712] = 0x0000002800284482ULL;
        data[3721] = 0x0000442800280402ULL;
        data[3725] = 0x0000002800280402ULL;
        data[3730] = 0x0000402800284402ULL;
        data[3745] = 0x0000402800284000ULL;
        data[3800] = 0x0002042800280000ULL;
        data[3822] = 0x0000402800280400ULL;
        data[3834] = 0x0080442800284400ULL;
        data[3853] = 0x0000402800284482ULL;
        data[3886] = 0x0080402800284402ULL;
        data[3923] = 0x0102042800280000ULL;
        data[3941] = 0x0002442800280000ULL;
        data[3967] = 0x0102042800280000ULL;
        data[3975] = 0x0000002800280000ULL;
        data[4009] = 0x0080402800284482ULL;
        data[4064] = 0x0102442800280000ULL;
        data[4068] = 0x0000002800280000ULL;
        data[4074] = 0x0000042800284080ULL;
        data[4097] = 0x0080442800280000ULL;
        data[4108] = 0x0002042800284480ULL;
        data[4116] = 0x0000402800280000ULL;
        data[4123] = 0x0000042800280000ULL;
        data[4128] = 0x0082442800284000ULL;
        data[4157] = 0x0102042800280400ULL;
        data[4175] = 0x0000002800284080ULL;
        data[4205] = 0x0082442800280402ULL;
        data[4209] = 0x0000002800280402ULL;
        data[4220] = 0x0080442800280000ULL;
        data[4224] = 0x0000002800280000ULL;
        data[4229] = 0x0080402800284000ULL;
        data[4252] = 0x0182442800284080ULL;
        data[4256] = 0x0000002800284000ULL;
        data[4264] = 0x0000042800284480ULL;
        data[4265] = 0x0000442800280000ULL;
        data[4272] = 0x0080402800280000ULL;
        data[4298] = 0x0102442800280400ULL;
        data[4306] = 0x0080402800280400ULL;
        data[4308] = 0x0000042800284402ULL;
        data[4332] = 0x0000002800280402ULL;
        data[4350] = 0x0000402800280402ULL;
        data[4353] = 0x0080402800284080ULL;
        data[4366] = 0x0000402800280000ULL;
        data[4397] = 0x0000402800284000ULL;
        data[4405] = 0x0000442800284480ULL;
        data[4409] = 0x0000002800284400ULL;
        data[4431] = 0x0000042800284482ULL;
        data[4454] = 0x0080442800280400ULL;
        data[4473] = 0x0000402800280402ULL;
        data[4485] = 0x0182442800284402ULL;
        data[4506] = 0x0080402800280402ULL;
        data[4532] = 0x0000002800284480ULL;
        data[4553] = 0x0080402800284000ULL;
        data[4586] = 0x0080402800284400ULL;
        data[4629] = 0x0080402800280402ULL;
        data[4652] = 0x0002042800284000ULL;
        data[4695] = 0x0000042800280000ULL;
        data[4728] = 0x0002042800280400ULL;
        data[4749] = 0x0082442800280000ULL;
        data[4775] = 0x0102042800284080ULL;
        data[4796] = 0x0000002800280000ULL;
        data[4808] = 0x0000042800284000ULL;
        data[4827] = 0x0000002800284080ULL;
        data[4850] = 0x0080402800280000ULL;
        data[4872] = 0x0182442800280000ULL;
        data[4876] = 0x0000002800280000ULL;
        data[4884] = 0x0000042800280400ULL;
        data[4915] = 0x0002042800284482ULL;
        data[4928] = 0x0000042800280402ULL;
        data[4931] = 0x0000042800284080ULL;
        data[4949] = 0x0000442800284000ULL;
        data[4973] = 0x0080402800280000ULL;
        data[4975] = 0x0000042800284000ULL;
        data[4983] = 0x0000002800284080ULL;
        data[5009] = 0x0102042800284400ULL;
        data[5016] = 0x0000002800284480ULL;
        data[5017] = 0x0000402800280000ULL;
        data[5025] = 0x0000442800280400ULL;
        data[5029] = 0x0000002800280400ULL;
        data[5052] = 0x0000042800280402ULL;
        data[5057] = 0x0002442800284482ULL;
        data[5061] = 0x0000002800284402ULL;
        data[5072] = 0x0000442800284080ULL;
        data[5076] = 0x0000002800284000ULL;
        data[5105] = 0x0182442800280402ULL;
        data[5124] = 0x0000402800284080ULL;
        data[5153] = 0x0000002800280400ULL;
        data[5158] = 0x0000402800284480ULL;
        data[5165] = 0x0000042800284400ULL;
        data[5173] = 0x0080402800280000ULL;
        data[5184] = 0x0000002800284482ULL;
        data[5207] = 0x0080402800280400ULL;
        data[5213] = 0x0080442800284482ULL;
        data[5217] = 0x0000002800284402ULL;
        data[5272] = 0x0002042800280000ULL;
        data[5306] = 0x0000442800284400ULL;
        data[5314] = 0x0080402800284480ULL;
        data[5340] = 0x0000002800284482ULL;
        data[5358] = 0x0000402800284402ULL;
        data[5395] = 0x0102042800280000ULL;
        data[5428] = 0x0000042800280000ULL;
        data[5447] = 0x0000002800280000ULL;
        data[5459] = 0x0002042800284000ULL;
        data[5481] = 0x0000402800284482ULL;
        data[5536] = 0x0002042800280402ULL;
        data[5551] = 0x0000042800280000ULL;
        data[5556] = 0x0082442800284080ULL;
        data[5560] = 0x0000002800284000ULL;
        data[5569] = 0x0000442800280000ULL;
        data[5582] = 0x0102042800284080ULL;
        data[5595] = 0x0000042800280000ULL;
        data[5600] = 0x0002442800284000ULL;
        data[5603] = 0x0000002800280000ULL;
        data[5629] = 0x0102042800280400ULL;
        data[5637] = 0x0000002800280400ULL;
        data[5677] = 0x0002442800280402ULL;
        data[5681] = 0x0000002800280402ULL;
        data[5683] = 0x0000002800284080ULL;
        data[5692] = 0x0000442800280000ULL;
        data[5696] = 0x0000002800280000ULL;
        data[5701] = 0x0000402800284000ULL;
        data[5724] = 0x0102442800284080ULL;
        data[5728] = 0x0000002800284000ULL;
        data[5736] = 0x0000042800284480ULL;
        data[5744] = 0x0000402800280000ULL;
        data[5756] = 0x0080442800284000ULL;
        data[5778] = 0x0000402800280400ULL;
        data[5785] = 0x0000042800280400ULL;
        data[5790] = 0x0082442800284400ULL;
        data[5804] = 0x0000002800280402ULL;
        data[5816] = 0x0102042800284402ULL;
        data[5825] = 0x0000402800284080ULL;
        data[5833] = 0x0080442800280402ULL;
        data[5837] = 0x0000002800280402ULL;
        data[5857] = 0x0080402800284000ULL;
        data[5880] = 0x0080442800284080ULL;
        data[5884] = 0x0000002800284000ULL;
        data[5913] = 0x0182442800284480ULL;
        data[5917] = 0x0000002800284400ULL;
        data[5926] = 0x0000442800280400ULL;
        data[5934] = 0x0080402800280400ULL;
        data[5957] = 0x0102442800284402ULL;
        data[5960] = 0x0000002800280402ULL;
        data[5965] = 0x0080402800284482ULL;
        data[5978] = 0x0000402800280402ULL;
        data[5981] = 0x0080402800284080ULL;
        data[6025] = 0x0000402800284000ULL;
        data[6058] = 0x0000402800284400ULL;
        data[6079] = 0x0002042800280000ULL;
        data[6101] = 0x0000402800280402ULL;
        data[6113] = 0x0080442800284402ULL;
        data[6176] = 0x0082442800280000ULL;
        data[6180] = 0x0000002800280000ULL;
        data[6203] = 0x0102042800280000ULL;
        data[6214] = 0x0080402800284400ULL;
        data[6221] = 0x0002442800280000ULL;
        data[6280] = 0x0000042800284000ULL;
        data[6304] = 0x0000002800280000ULL;
        data[6322] = 0x0000402800280000ULL;
        data[6344] = 0x0102442800280000ULL;
        data[6348] = 0x0000002800280000ULL;
        data[6356] = 0x0000042800280400ULL;
        data[6377] = 0x0080442800280000ULL;
        data[6387] = 0x0002042800284482ULL;
        data[6403] = 0x0000042800284080ULL;
        data[6410] = 0x0082442800280400ULL;
        data[6436] = 0x0102042800280402ULL;
        data[6445] = 0x0000402800280000ULL;
        data[6455] = 0x0000002800284080ULL;
        data[6457] = 0x0182442800284000ULL;
        data[6478] = 0x0080402800280000ULL;
        data[6488] = 0x0000002800284480ULL;
        data[6500] = 0x0080442800280000ULL;
        data[6504] = 0x0000002800280000ULL;
        data[6509] = 0x0080402800284000ULL;
        data[6533] = 0x0182442800280400ULL;
        data[6537] = 0x0000002800280400ULL;
        data[6543] = 0x0000042800284482ULL;
        data[6577] = 0x0102442800280402ULL;
        data[6585] = 0x0080402800280402ULL;
        data[6601] = 0x0080402800280000ULL;
        data[6632] = 0x0080402800284080ULL;
        data[6637] = 0x0000042800284400ULL;
        data[6644] = 0x0000002800284480ULL;
        data[6645] = 0x0000402800280000ULL;
        data[6679] = 0x0000402800280400ULL;
        data[6685] = 0x0000442800284482ULL;
        data[6689] = 0x0000002800284402ULL;
        data[6733] = 0x0080442800280402ULL;
        data[6786] = 0x0000402800284480ULL;
        data[6812] = 0x0000002800284482ULL;
        data[6835] = 0x0080402800280400ULL;
        data[6866] = 0x0080402800284402ULL;
        data[6887] = 0x0002042800284080ULL;
        data[6900] = 0x0000042800280000ULL;
        data[6931] = 0x0002042800284000ULL;
        data[7008] = 0x0002042800280402ULL;
        data[7023] = 0x0000042800280000ULL;
        data[7028] = 0x0002442800284080ULL;
        data[7032] = 0x0000002800284000ULL;
        data[7054] = 0x0102042800284080ULL;
        data[7075] = 0x0000002800280000ULL;
        data[7077] = 0x0182442800280000ULL;
        data[7087] = 0x0000042800284000ULL;
        data[7109] = 0x0000002800280400ULL;
        data[7121] = 0x0002042800284400ULL;
        data[7129] = 0x0080402800280000ULL;
        data[7155] = 0x0000002800284080ULL;
        data[7164] = 0x0000042800280402ULL;
        data[7184] = 0x0080442800284080ULL;
        data[7188] = 0x0000002800284000ULL;
        data[7210] = 0x0000042800284080ULL;
        data[7228] = 0x0000442800284000ULL;
        data[7244] = 0x0102042800284480ULL;
        data[7252] = 0x0080402800280000ULL;
        data[7257] = 0x0000042800280400ULL;
        data[7262] = 0x0002442800284400ULL;
        data[7265] = 0x0000002800280400ULL;
        data[7288] = 0x0102042800284402ULL;
        data[7296] = 0x0000002800284482ULL;
        data[7305] = 0x0000442800280402ULL;
        data[7309] = 0x0000002800280402ULL;
        data[7311] = 0x0000002800284080ULL;
        data[7329] = 0x0000402800284000ULL;
        data[7352] = 0x0000442800284080ULL;
        data[7356] = 0x0000002800284000ULL;
        data[7385] = 0x0102442800284480ULL;
        data[7389] = 0x0000002800284400ULL;
        data[7406] = 0x0000402800280400ULL;
        data[7418] = 0x0080442800284400ULL;
        data[7432] = 0x0000002800280402ULL;
        data[7437] = 0x0000402800284482ULL;
        data[7444] = 0x0000042800284402ULL;
        data[7453] = 0x0000402800284080ULL;
        data[7486] = 0x0080402800280402ULL;
        data[7507] = 0x0002042800280000ULL;
        data[7541] = 0x0080442800284480ULL;
        data[7545] = 0x0000002800284400ULL;
        data[7551] = 0x0002042800280000ULL;
        data[7585] = 0x0000442800284402ULL;
        data[7593] = 0x0080402800284482ULL;
        data[7648] = 0x0002442800280000ULL;
        data[7652] = 0x0000002800280000ULL;
        data[7675] = 0x0102042800280000ULL;
        data[7686] = 0x0000402800284400ULL;
        data[7707] = 0x0000042800280000ULL;
        data[7741] = 0x0002042800280400ULL;
        data[7776] = 0x0000002800280000ULL;
        data[7788] = 0x0102042800284000ULL;
        data[7804] = 0x0080442800280000ULL;
        data[7808] = 0x0000002800280000ULL;
        data[7831] = 0x0000042800280000ULL;
        data[7836] = 0x0082442800284080ULL;
        data[7840] = 0x0000002800284000ULL;
        data[7849] = 0x0000442800280000ULL;
        data[7864] = 0x0102042800280400ULL;
        data[7882] = 0x0002442800280400ULL;
        data[7908] = 0x0102042800280402ULL;
        data[7916] = 0x0000002800280402ULL;
        data[7929] = 0x0102442800284000ULL;
        data[7932] = 0x0000002800280000ULL;
        data[7937] = 0x0080402800284080ULL;
        data[7950] = 0x0000402800280000ULL;
        data[7963] = 0x0000002800284080ULL;
        data[7972] = 0x0000442800280000ULL;
        data[7976] = 0x0000002800280000ULL;
        data[7981] = 0x0000402800284000ULL;
        data[8005] = 0x0102442800280400ULL;
        data[8009] = 0x0000002800280400ULL;
        data[8015] = 0x0000042800284482ULL;
        data[8038] = 0x0080442800280400ULL;
        data[8057] = 0x0000402800280402ULL;
        data[8064] = 0x0000042800280402ULL;
        data[8069] = 0x0082442800284402ULL;
        data[8073] = 0x0000402800280000ULL;
        data[8085] = 0x0080442800284000ULL;
        data[8104] = 0x0000402800284080ULL;
        data[8116] = 0x0000002800284480ULL;
        data[8137] = 0x0080402800284000ULL;
        data[8161] = 0x0080442800280400ULL;
        data[8165] = 0x0000002800280400ULL;
        data[8170] = 0x0080402800284400ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0204885000508804ULL;
        data[5] = 0x0000805000500000ULL;
        data[8] = 0x0004085000500804ULL;
        data[11] = 0x0000005000508000ULL;
        data[21] = 0x0000805000500804ULL;
        data[26] = 0x0000005000508800ULL;
        data[31] = 0x0204085000508000ULL;
        data[33] = 0x0000005000508000ULL;
        data[44] = 0x0000805000508000ULL;
        data[47] = 0x0004085000508800ULL;
        data[49] = 0x0000005000508804ULL;
        data[52] = 0x0000005000500000ULL;
        data[54] = 0x0204085000508000ULL;
        data[56] = 0x0000885000500000ULL;
        data[59] = 0x0000805000508800ULL;
        data[66] = 0x0000805000508000ULL;
        data[67] = 0x0000005000500800ULL;
        data[69] = 0x0004085000508804ULL;
        data[71] = 0x0000885000500800ULL;
        data[74] = 0x0000005000500000ULL;
        data[78] = 0x0000885000500000ULL;
        data[82] = 0x0000805000508804ULL;
        data[89] = 0x0000005000500804ULL;
        data[93] = 0x0000885000500804ULL;
        data[113] = 0x0000005000508000ULL;
        data[117] = 0x0000885000508000ULL;
        data[124] = 0x0000085000500000ULL;
        data[128] = 0x0000005000508800ULL;
        data[132] = 0x0000885000508800ULL;
        data[135] = 0x0000005000508000ULL;
        data[137] = 0x0000805000500000ULL;
        data[139] = 0x0000885000508000ULL;
        data[140] = 0x0000085000500800ULL;
        data[147] = 0x0000085000500000ULL;
        data[151] = 0x0000005000508804ULL;
        data[152] = 0x0000805000500800ULL;
        data[155] = 0x0000885000508804ULL;
        data[158] = 0x0204885000500000ULL;
        data[159] = 0x0000805000500000ULL;
        data[162] = 0x0000085000500804ULL;
        data[173] = 0x0004885000500800ULL;
        data[175] = 0x0000805000500804ULL;
        data[180] = 0x0204885000500000ULL;
        data[185] = 0x0000085000508000ULL;
        data[195] = 0x0004885000500804ULL;
        data[198] = 0x0000805000508000ULL;
        data[201] = 0x0000085000508800ULL;
        data[206] = 0x0000005000500000ULL;
        data[208] = 0x0000085000508000ULL;
        data[213] = 0x0000805000508800ULL;
        data[219] = 0x0204885000508000ULL;
        data[220] = 0x0000805000508000ULL;
        data[221] = 0x0000005000500800ULL;
        data[223] = 0x0000085000508804ULL;
        data[226] = 0x0004085000500000ULL;
        data[228] = 0x0000005000500000ULL;
        data[234] = 0x0004885000508800ULL;
        data[236] = 0x0000805000508804ULL;
        data[239] = 0x0000805000500000ULL;
        data[241] = 0x0204885000508000ULL;
        data[242] = 0x0204085000500800ULL;
        data[243] = 0x0000005000500804ULL;
        data[249] = 0x0004085000500000ULL;
        data[254] = 0x0000805000500800ULL;
        data[257] = 0x0004885000508804ULL;
        data[261] = 0x0000805000500000ULL;
        data[264] = 0x0204085000500804ULL;
        data[267] = 0x0000005000508000ULL;
        data[277] = 0x0000805000500804ULL;
        data[282] = 0x0000005000508800ULL;
        data[287] = 0x0004085000508000ULL;
        data[289] = 0x0000005000508000ULL;
        data[300] = 0x0000805000508000ULL;
        data[303] = 0x0204085000508800ULL;
        data[305] = 0x0000005000508804ULL;
        data[308] = 0x0000005000500000ULL;
        data[310] = 0x0004085000508000ULL;
        data[312] = 0x0000885000500000ULL;
        data[315] = 0x0000805000508800ULL;
        data[322] = 0x0000805000508000ULL;
        data[323] = 0x0000005000500800ULL;
        data[325] = 0x0204085000508804ULL;
        data[327] = 0x0000885000500800ULL;
        data[330] = 0x0000005000500000ULL;
        data[334] = 0x0000885000500000ULL;
        data[338] = 0x0000805000508804ULL;
        data[345] = 0x0000005000500804ULL;
        data[349] = 0x0000885000500804ULL;
        data[369] = 0x0000005000508000ULL;
        data[373] = 0x0000885000508000ULL;
        data[380] = 0x0000085000500000ULL;
        data[384] = 0x0000005000508800ULL;
        data[388] = 0x0000885000508800ULL;
        data[391] = 0x0000005000508000ULL;
        data[393] = 0x0000805000500000ULL;
        data[395] = 0x0000885000508000ULL;
        data[396] = 0x0000085000500800ULL;
        data[403] = 0x0000085000500000ULL;
        data[407] = 0x0000005000508804ULL;
        data[408] = 0x0000805000500800ULL;
        data[411] = 0x0000885000508804ULL;
        data[414] = 0x0004885000500000ULL;
        data[415] = 0x0000805000500000ULL;
        data[418] = 0x0000085000500804ULL;
        data[429] = 0x0204885000500800ULL;
        data[431] = 0x0000805000500804ULL;
        data[436] = 0x0004885000500000ULL;
        data[441] = 0x0000085000508000ULL;
        data[451] = 0x0204885000500804ULL;
        data[454] = 0x0000805000508000ULL;
        data[457] = 0x0000085000508800ULL;
        data[462] = 0x0000005000500000ULL;
        data[464] = 0x0000085000508000ULL;
        data[469] = 0x0000805000508800ULL;
        data[475] = 0x0004885000508000ULL;
        data[476] = 0x0000805000508000ULL;
        data[477] = 0x0000005000500800ULL;
        data[479] = 0x0000085000508804ULL;
        data[482] = 0x0204085000500000ULL;
        data[484] = 0x0000005000500000ULL;
        data[490] = 0x0204885000508800ULL;
        data[492] = 0x0000805000508804ULL;
        data[495] = 0x0000805000500000ULL;
        data[497] = 0x0004885000508000ULL;
        data[498] = 0x0004085000500800ULL;
        data[499] = 0x0000005000500804ULL;
        data[505] = 0x0204085000500000ULL;
        data[510] = 0x0000805000500800ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x040810a000a01008ULL;
        data[25] = 0x000000a000a00000ULL;
        data[28] = 0x040810a000a00000ULL;
        data[72] = 0x000000a000a01000ULL;
        data[92] = 0x000000a000a00000ULL;
        data[95] = 0x040810a000a00000ULL;
        data[113] = 0x000010a000a01000ULL;
        data[139] = 0x000000a000a01008ULL;
        data[166] = 0x000000a000a00000ULL;
        data[168] = 0x000000a000a01000ULL;
        data[180] = 0x000010a000a01008ULL;
        data[207] = 0x000010a000a00000ULL;
        data[209] = 0x000010a000a01000ULL;
        data[233] = 0x000000a000a00000ULL;
        data[235] = 0x000000a000a01008ULL;
        data[262] = 0x000000a000a00000ULL;
        data[274] = 0x000010a000a00000ULL;
        data[276] = 0x000010a000a01008ULL;
        data[303] = 0x000010a000a00000ULL;
        data[329] = 0x000000a000a00000ULL;
        data[347] = 0x000000a000a01000ULL;
        data[350] = 0x000810a000a01000ULL;
        data[370] = 0x000010a000a00000ULL;
        data[414] = 0x000000a000a01008ULL;
        data[417] = 0x000810a000a01008ULL;
        data[441] = 0x000000a000a00000ULL;
        data[443] = 0x000000a000a01000ULL;
        data[444] = 0x000810a000a00000ULL;
        data[446] = 0x040810a000a01000ULL;
        data[508] = 0x000000a000a00000ULL;
        data[510] = 0x000000a000a01008ULL;
        data[511] = 0x000810a000a00000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [510]();
        data[1] = 0x0810204000402010ULL;
        data[11] = 0x0000004000400000ULL;
        data[35] = 0x0000204000400000ULL;
        data[39] = 0x0000204000402010ULL;
        data[50] = 0x0000004000400000ULL;
        data[55] = 0x0810204000400000ULL;
        data[94] = 0x0000204000400000ULL;
        data[143] = 0x0000004000402000ULL;
        data[145] = 0x0000004000400000ULL;
        data[182] = 0x0000004000402000ULL;
        data[183] = 0x0000004000400000ULL;
        data[187] = 0x0010204000402000ULL;
        data[189] = 0x0810204000400000ULL;
        data[225] = 0x0000204000402000ULL;
        data[227] = 0x0000204000400000ULL;
        data[277] = 0x0000004000402010ULL;
        data[315] = 0x0000004000402010ULL;
        data[321] = 0x0010204000402010ULL;
        data[331] = 0x0000004000400000ULL;
        data[335] = 0x0000004000402000ULL;
        data[359] = 0x0000204000402010ULL;
        data[370] = 0x0000004000400000ULL;
        data[374] = 0x0000004000402000ULL;
        data[375] = 0x0010204000400000ULL;
        data[379] = 0x0810204000402000ULL;
        data[414] = 0x0000204000400000ULL;
        data[417] = 0x0000204000402000ULL;
        data[465] = 0x0000004000400000ULL;
        data[469] = 0x0000004000402010ULL;
        data[503] = 0x0000004000400000ULL;
        data[507] = 0x0000004000402010ULL;
        data[509] = 0x0010204000400000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x0804020002040810ULL;
        data[28] = 0x0004020002040000ULL;
        data[99] = 0x0000020002000000ULL;
        data[127] = 0x0000020002000000ULL;
        data[129] = 0x0000020002040800ULL;
        data[132] = 0x0000020002000000ULL;
        data[145] = 0x0004020002000000ULL;
        data[157] = 0x0000020002040000ULL;
        data[160] = 0x0000020002000000ULL;
        data[163] = 0x0000020002040810ULL;
        data[175] = 0x0004020002040800ULL;
        data[178] = 0x0004020002000000ULL;
        data[191] = 0x0000020002040000ULL;
        data[209] = 0x0004020002040810ULL;
        data[268] = 0x0804020002000000ULL;
        data[299] = 0x0804020002040000ULL;
        data[302] = 0x0804020002000000ULL;
        data[307] = 0x0000020002000000ULL;
        data[332] = 0x0804020002040000ULL;
        data[337] = 0x0000020002040800ULL;
        data[340] = 0x0000020002000000ULL;
        data[371] = 0x0000020002040810ULL;
        data[431] = 0x0000020002000000ULL;
        data[449] = 0x0804020002000000ULL;
        data[461] = 0x0000020002040000ULL;
        data[464] = 0x0000020002000000ULL;
        data[476] = 0x0004020002000000ULL;
        data[479] = 0x0804020002040800ULL;
        data[482] = 0x0804020002000000ULL;
        data[495] = 0x0000020002040000ULL;
        data[507] = 0x0004020002040000ULL;
        data[510] = 0x0004020002000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x1008050005081020ULL;
        data[24] = 0x1008050005000000ULL;
        data[56] = 0x0008050005080000ULL;
        data[85] = 0x1008050005080000ULL;
        data[91] = 0x1008050005000000ULL;
        data[101] = 0x0000050005000000ULL;
        data[152] = 0x1008050005080000ULL;
        data[162] = 0x0000050005081000ULL;
        data[168] = 0x0000050005000000ULL;
        data[197] = 0x0000050005000000ULL;
        data[229] = 0x0000050005081020ULL;
        data[253] = 0x0000050005000000ULL;
        data[258] = 0x0000050005081000ULL;
        data[264] = 0x0000050005000000ULL;
        data[289] = 0x0008050005000000ULL;
        data[314] = 0x0000050005080000ULL;
        data[320] = 0x0000050005000000ULL;
        data[325] = 0x0000050005081020ULL;
        data[349] = 0x0000050005000000ULL;
        data[350] = 0x0008050005081000ULL;
        data[355] = 0x0008050005000000ULL;
        data[381] = 0x0000050005080000ULL;
        data[385] = 0x1008050005000000ULL;
        data[410] = 0x0000050005080000ULL;
        data[416] = 0x0000050005000000ULL;
        data[417] = 0x0008050005081020ULL;
        data[440] = 0x0008050005000000ULL;
        data[446] = 0x1008050005081000ULL;
        data[451] = 0x1008050005000000ULL;
        data[477] = 0x0000050005080000ULL;
        data[501] = 0x0008050005080000ULL;
        data[507] = 0x0008050005000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_19_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x20110a000a112040ULL;
        data[3] = 0x00110a000a000000ULL;
        data[6] = 0x00010a000a100000ULL;
        data[7] = 0x00010a000a102040ULL;
        data[10] = 0x00000a000a010000ULL;
        data[12] = 0x00000a000a010000ULL;
        data[19] = 0x20100a000a100000ULL;
        data[25] = 0x00010a000a010000ULL;
        data[31] = 0x00100a000a112040ULL;
        data[37] = 0x00000a000a102040ULL;
        data[40] = 0x00010a000a010000ULL;
        data[44] = 0x00110a000a112000ULL;
        data[50] = 0x20110a000a100000ULL;
        data[51] = 0x00010a000a102000ULL;
        data[54] = 0x20100a000a010000ULL;
        data[55] = 0x00000a000a010000ULL;
        data[61] = 0x00000a000a000000ULL;
        data[64] = 0x20100a000a102000ULL;
        data[67] = 0x20110a000a010000ULL;
        data[74] = 0x00010a000a000000ULL;
        data[80] = 0x00100a000a100000ULL;
        data[85] = 0x00010a000a010000ULL;
        data[93] = 0x00110a000a100000ULL;
        data[95] = 0x20110a000a102040ULL;
        data[98] = 0x00100a000a010000ULL;
        data[99] = 0x20100a000a010000ULL;
        data[102] = 0x00000a000a110000ULL;
        data[104] = 0x00000a000a000000ULL;
        data[106] = 0x00000a000a000000ULL;
        data[113] = 0x20110a000a010000ULL;
        data[116] = 0x00010a000a110000ULL;
        data[119] = 0x00010a000a000000ULL;
        data[125] = 0x00100a000a102040ULL;
        data[128] = 0x00110a000a010000ULL;
        data[134] = 0x00010a000a000000ULL;
        data[138] = 0x00110a000a102000ULL;
        data[143] = 0x00100a000a010000ULL;
        data[146] = 0x00000a000a110000ULL;
        data[147] = 0x00000a000a112040ULL;
        data[148] = 0x20100a000a000000ULL;
        data[149] = 0x00000a000a000000ULL;
        data[161] = 0x00010a000a112000ULL;
        data[162] = 0x20110a000a000000ULL;
        data[173] = 0x00110a000a010000ULL;
        data[176] = 0x00010a000a110000ULL;
        data[180] = 0x00010a000a000000ULL;
        data[190] = 0x20100a000a110000ULL;
        data[191] = 0x00000a000a112000ULL;
        data[192] = 0x00100a000a000000ULL;
        data[193] = 0x20100a000a000000ULL;
        data[196] = 0x00000a000a100000ULL;
        data[203] = 0x20110a000a110000ULL;
        data[207] = 0x20110a000a000000ULL;
        data[210] = 0x00010a000a100000ULL;
        data[214] = 0x00000a000a010000ULL;
        data[221] = 0x00010a000a112040ULL;
        data[222] = 0x00110a000a000000ULL;
        data[233] = 0x00100a000a110000ULL;
        data[235] = 0x20100a000a112040ULL;
        data[237] = 0x00100a000a000000ULL;
        data[240] = 0x00000a000a100000ULL;
        data[241] = 0x00000a000a102040ULL;
        data[244] = 0x00010a000a010000ULL;
        data[248] = 0x20110a000a112000ULL;
        data[255] = 0x00010a000a102000ULL;
        data[259] = 0x00000a000a010000ULL;
        data[263] = 0x00110a000a110000ULL;
        data[267] = 0x00110a000a000000ULL;
        data[270] = 0x00010a000a100000ULL;
        data[275] = 0x00000a000a010000ULL;
        data[278] = 0x00100a000a112000ULL;
        data[284] = 0x20100a000a100000ULL;
        data[285] = 0x00000a000a102000ULL;
        data[288] = 0x00010a000a010000ULL;
        data[289] = 0x00010a000a010000ULL;
        data[297] = 0x20110a000a100000ULL;
        data[302] = 0x20100a000a010000ULL;
        data[308] = 0x00000a000a000000ULL;
        data[309] = 0x00110a000a112040ULL;
        data[315] = 0x00010a000a102040ULL;
        data[320] = 0x00000a000a010000ULL;
        data[327] = 0x00100a000a100000ULL;
        data[329] = 0x20100a000a102040ULL;
        data[332] = 0x20110a000a010000ULL;
        data[333] = 0x00010a000a010000ULL;
        data[338] = 0x00010a000a000000ULL;
        data[342] = 0x20110a000a102000ULL;
        data[347] = 0x20100a000a010000ULL;
        data[350] = 0x00000a000a110000ULL;
        data[353] = 0x00000a000a000000ULL;
        data[358] = 0x00110a000a100000ULL;
        data[362] = 0x00100a000a010000ULL;
        data[369] = 0x00000a000a000000ULL;
        data[372] = 0x00100a000a102000ULL;
        data[375] = 0x00110a000a010000ULL;
        data[377] = 0x20110a000a010000ULL;
        data[380] = 0x00010a000a110000ULL;
        data[382] = 0x00010a000a000000ULL;
        data[384] = 0x00010a000a000000ULL;
        data[395] = 0x00000a000a112000ULL;
        data[396] = 0x20100a000a000000ULL;
        data[403] = 0x00110a000a102040ULL;
        data[407] = 0x00100a000a010000ULL;
        data[410] = 0x00000a000a110000ULL;
        data[414] = 0x00000a000a000000ULL;
        data[421] = 0x00110a000a010000ULL;
        data[424] = 0x00010a000a110000ULL;
        data[425] = 0x00010a000a112040ULL;
        data[426] = 0x20110a000a000000ULL;
        data[427] = 0x00010a000a000000ULL;
        data[437] = 0x20100a000a110000ULL;
        data[441] = 0x20100a000a000000ULL;
        data[444] = 0x00000a000a100000ULL;
        data[455] = 0x00000a000a112040ULL;
        data[456] = 0x00100a000a000000ULL;
        data[467] = 0x20110a000a110000ULL;
        data[469] = 0x00010a000a112000ULL;
        data[470] = 0x00110a000a000000ULL;
        data[471] = 0x20110a000a000000ULL;
        data[474] = 0x00010a000a100000ULL;
        data[479] = 0x00000a000a010000ULL;
        data[482] = 0x20100a000a112000ULL;
        data[489] = 0x00000a000a102000ULL;
        data[492] = 0x00010a000a010000ULL;
        data[498] = 0x00100a000a110000ULL;
        data[501] = 0x00100a000a000000ULL;
        data[504] = 0x00000a000a100000ULL;
        data[511] = 0x00110a000a110000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_9_mixin<0x1fff>, [](uint64_t *& data) {
        data = new uint64_t [8186]();
        data[1] = 0x4122140014224180ULL;
        data[2] = 0x4020140014204080ULL;
        data[11] = 0x4022140014000000ULL;
        data[71] = 0x0002140014204080ULL;
        data[81] = 0x4122140014000000ULL;
        data[94] = 0x4122140014200000ULL;
        data[99] = 0x0000140014020000ULL;
        data[112] = 0x0000140014220100ULL;
        data[121] = 0x0020140014204080ULL;
        data[130] = 0x0000140014020000ULL;
        data[143] = 0x0000140014220100ULL;
        data[188] = 0x0020140014220000ULL;
        data[200] = 0x0022140014000000ULL;
        data[221] = 0x0102140014020100ULL;
        data[223] = 0x0000140014000000ULL;
        data[230] = 0x4122140014000000ULL;
        data[248] = 0x0000140014020100ULL;
        data[258] = 0x0020140014224000ULL;
        data[267] = 0x0022140014020000ULL;
        data[298] = 0x4122140014020000ULL;
        data[342] = 0x0000140014000000ULL;
        data[358] = 0x0102140014224080ULL;
        data[372] = 0x0000140014000000ULL;
        data[408] = 0x0020140014224180ULL;
        data[415] = 0x0002140014204000ULL;
        data[416] = 0x0022140014020100ULL;
        data[418] = 0x0020140014000000ULL;
        data[452] = 0x0102140014200000ULL;
        data[482] = 0x0002140014220000ULL;
        data[486] = 0x0122140014020100ULL;
        data[488] = 0x0020140014000000ULL;
        data[491] = 0x4022140014204080ULL;
        data[501] = 0x0020140014200000ULL;
        data[519] = 0x4020140014020000ULL;
        data[532] = 0x4020140014220100ULL;
        data[588] = 0x0102140014000000ULL;
        data[601] = 0x0102140014200000ULL;
        data[619] = 0x0002140014020000ULL;
        data[628] = 0x0000140014020100ULL;
        data[632] = 0x0002140014220100ULL;
        data[633] = 0x0000140014200000ULL;
        data[637] = 0x0020140014000000ULL;
        data[668] = 0x4020140014020100ULL;
        data[702] = 0x0102140014224100ULL;
        data[704] = 0x0000140014204000ULL;
        data[705] = 0x0020140014020000ULL;
        data[712] = 0x0002140014000000ULL;
        data[747] = 0x0022140014224000ULL;
        data[762] = 0x4020140014000000ULL;
        data[778] = 0x4122140014224080ULL;
        data[822] = 0x0000140014204000ULL;
        data[853] = 0x0000140014204080ULL;
        data[861] = 0x0002140014000000ULL;
        data[872] = 0x4122140014200000ULL;
        data[889] = 0x0000140014220000ULL;
        data[897] = 0x0022140014224180ULL;
        data[898] = 0x0020140014204080ULL;
        data[920] = 0x0000140014220000ULL;
        data[932] = 0x0102140014000000ULL;
        data[977] = 0x0022140014000000ULL;
        data[990] = 0x0022140014200000ULL;
        data[999] = 0x0102140014020000ULL;
        data[1008] = 0x4122140014000000ULL;
        data[1021] = 0x4122140014200000ULL;
        data[1026] = 0x0000140014020000ULL;
        data[1039] = 0x0000140014220100ULL;
        data[1048] = 0x4020140014020100ULL;
        data[1109] = 0x0000140014224100ULL;
        data[1117] = 0x0002140014020100ULL;
        data[1119] = 0x0000140014000000ULL;
        data[1126] = 0x0022140014000000ULL;
        data[1148] = 0x0102140014020100ULL;
        data[1150] = 0x0000140014000000ULL;
        data[1185] = 0x0020140014224080ULL;
        data[1193] = 0x0002140014204000ULL;
        data[1194] = 0x0022140014020000ULL;
        data[1242] = 0x4020140014204000ULL;
        data[1264] = 0x0122140014020000ULL;
        data[1268] = 0x0000140014000000ULL;
        data[1277] = 0x0122140014220100ULL;
        data[1279] = 0x0020140014200000ULL;
        data[1309] = 0x4020140014220000ULL;
        data[1339] = 0x0000140014000000ULL;
        data[1342] = 0x0002140014204080ULL;
        data[1369] = 0x0000140014020100ULL;
        data[1378] = 0x0102140014200000ULL;
        data[1406] = 0x0000140014020000ULL;
        data[1409] = 0x0002140014220000ULL;
        data[1413] = 0x0122140014020100ULL;
        data[1415] = 0x0020140014000000ULL;
        data[1428] = 0x0020140014200000ULL;
        data[1446] = 0x4020140014020000ULL;
        data[1459] = 0x4020140014220100ULL;
        data[1479] = 0x0102140014224000ULL;
        data[1507] = 0x0122140014000000ULL;
        data[1529] = 0x4020140014224100ULL;
        data[1537] = 0x4022140014020100ULL;
        data[1539] = 0x4020140014000000ULL;
        data[1555] = 0x0000140014020100ULL;
        data[1598] = 0x0002140014224100ULL;
        data[1600] = 0x0000140014204000ULL;
        data[1629] = 0x0102140014224180ULL;
        data[1630] = 0x0000140014204080ULL;
        data[1639] = 0x0002140014000000ULL;
        data[1674] = 0x0022140014224080ULL;
        data[1688] = 0x4020140014000000ULL;
        data[1709] = 0x0102140014000000ULL;
        data[1722] = 0x0102140014200000ULL;
        data[1749] = 0x0000140014204080ULL;
        data[1759] = 0x4020140014000000ULL;
        data[1768] = 0x0022140014200000ULL;
        data[1798] = 0x4122140014200000ULL;
        data[1816] = 0x0000140014220000ULL;
        data[1826] = 0x4020140014020000ULL;
        data[1828] = 0x0002140014000000ULL;
        data[1858] = 0x0102140014000000ULL;
        data[1886] = 0x0000140014224000ULL;
        data[1895] = 0x0002140014020000ULL;
        data[1904] = 0x0022140014000000ULL;
        data[1917] = 0x0022140014200000ULL;
        data[1926] = 0x0102140014020000ULL;
        data[1944] = 0x0020140014020100ULL;
        data[1975] = 0x4020140014020100ULL;
        data[1987] = 0x0122140014204000ULL;
        data[2018] = 0x4022140014224100ULL;
        data[2020] = 0x4020140014204000ULL;
        data[2036] = 0x0000140014224180ULL;
        data[2044] = 0x0002140014020100ULL;
        data[2046] = 0x0000140014000000ULL;
        data[2054] = 0x0122140014220000ULL;
        data[2114] = 0x0102140014020100ULL;
        data[2116] = 0x0000140014000000ULL;
        data[2119] = 0x0002140014204080ULL;
        data[2129] = 0x0000140014200000ULL;
        data[2147] = 0x0000140014020000ULL;
        data[2160] = 0x0000140014220100ULL;
        data[2169] = 0x4020140014204080ULL;
        data[2191] = 0x0122140014020000ULL;
        data[2204] = 0x0122140014220100ULL;
        data[2205] = 0x0020140014200000ULL;
        data[2236] = 0x4020140014220000ULL;
        data[2248] = 0x4022140014000000ULL;
        data[2265] = 0x0000140014000000ULL;
        data[2284] = 0x0122140014000000ULL;
        data[2296] = 0x0000140014020100ULL;
        data[2306] = 0x4020140014224000ULL;
        data[2315] = 0x4022140014020000ULL;
        data[2333] = 0x0000140014020000ULL;
        data[2375] = 0x0002140014224000ULL;
        data[2390] = 0x0000140014000000ULL;
        data[2406] = 0x0102140014224080ULL;
        data[2425] = 0x0020140014224100ULL;
        data[2433] = 0x0122140014000000ULL;
        data[2456] = 0x4020140014224180ULL;
        data[2464] = 0x4022140014020100ULL;
        data[2466] = 0x4020140014000000ULL;
        data[2500] = 0x0102140014200000ULL;
        data[2525] = 0x0002140014224180ULL;
        data[2526] = 0x0000140014204080ULL;
        data[2534] = 0x4122140014020100ULL;
        data[2536] = 0x4020140014000000ULL;
        data[2549] = 0x4020140014200000ULL;
        data[2605] = 0x0002140014000000ULL;
        data[2618] = 0x0002140014200000ULL;
        data[2636] = 0x0102140014000000ULL;
        data[2649] = 0x0102140014200000ULL;
        data[2655] = 0x0020140014000000ULL;
        data[2676] = 0x0000140014020100ULL;
        data[2685] = 0x4020140014000000ULL;
        data[2694] = 0x0022140014200000ULL;
        data[2722] = 0x0020140014020000ULL;
        data[2753] = 0x4020140014020000ULL;
        data[2754] = 0x0002140014000000ULL;
        data[2765] = 0x0122140014204000ULL;
        data[2795] = 0x4022140014224000ULL;
        data[2813] = 0x0000140014224080ULL;
        data[2822] = 0x0002140014020000ULL;
        data[2870] = 0x0000140014204000ULL;
        data[2871] = 0x0020140014020100ULL;
        data[2892] = 0x0102140014020000ULL;
        data[2905] = 0x0102140014220100ULL;
        data[2907] = 0x0000140014200000ULL;
        data[2914] = 0x0122140014204080ULL;
        data[2937] = 0x0000140014220000ULL;
        data[2941] = 0x0020140014020100ULL;
        data[2945] = 0x4022140014224180ULL;
        data[2946] = 0x4020140014204080ULL;
        data[2981] = 0x0122140014220000ULL;
        data[3025] = 0x4022140014000000ULL;
        data[3038] = 0x4022140014200000ULL;
        data[3041] = 0x0102140014020100ULL;
        data[3043] = 0x0000140014000000ULL;
        data[3056] = 0x0000140014200000ULL;
        data[3074] = 0x0000140014020000ULL;
        data[3087] = 0x0000140014220100ULL;
        data[3135] = 0x0102140014000000ULL;
        data[3157] = 0x0000140014224100ULL;
        data[3165] = 0x0002140014020100ULL;
        data[3167] = 0x0000140014000000ULL;
        data[3174] = 0x4022140014000000ULL;
        data[3202] = 0x0020140014224000ULL;
        data[3211] = 0x0122140014000000ULL;
        data[3233] = 0x4020140014224080ULL;
        data[3242] = 0x4022140014020000ULL;
        data[3302] = 0x0002140014224080ULL;
        data[3312] = 0x4122140014020000ULL;
        data[3316] = 0x0000140014000000ULL;
        data[3325] = 0x4122140014220100ULL;
        data[3327] = 0x4020140014200000ULL;
        data[3352] = 0x0020140014224180ULL;
        data[3387] = 0x0000140014000000ULL;
        data[3396] = 0x0002140014200000ULL;
        data[3426] = 0x0102140014200000ULL;
        data[3430] = 0x0022140014020100ULL;
        data[3432] = 0x0020140014000000ULL;
        data[3445] = 0x0020140014200000ULL;
        data[3454] = 0x0000140014020000ULL;
        data[3461] = 0x4122140014020100ULL;
        data[3463] = 0x4020140014000000ULL;
        data[3476] = 0x4020140014200000ULL;
        data[3532] = 0x0002140014000000ULL;
        data[3545] = 0x0002140014200000ULL;
        data[3555] = 0x4122140014000000ULL;
        data[3572] = 0x0000140014020100ULL;
        data[3581] = 0x0020140014000000ULL;
        data[3603] = 0x0000140014020100ULL;
        data[3615] = 0x0102140014204000ULL;
        data[3646] = 0x0002140014224100ULL;
        data[3648] = 0x0000140014204000ULL;
        data[3649] = 0x0020140014020000ULL;
        data[3682] = 0x0102140014220000ULL;
        data[3691] = 0x0122140014204080ULL;
        data[3719] = 0x0020140014020000ULL;
        data[3722] = 0x4022140014224080ULL;
        data[3732] = 0x0020140014220100ULL;
        data[3797] = 0x0000140014204080ULL;
        data[3816] = 0x4022140014200000ULL;
        data[3819] = 0x0102140014020000ULL;
        data[3832] = 0x0102140014220100ULL;
        data[3833] = 0x0000140014200000ULL;
        data[3864] = 0x0000140014220000ULL;
        data[3868] = 0x0020140014020100ULL;
        data[3876] = 0x0002140014000000ULL;
        data[3912] = 0x0102140014000000ULL;
        data[3934] = 0x0000140014224000ULL;
        data[3943] = 0x0002140014020000ULL;
        data[3952] = 0x4022140014000000ULL;
        data[3962] = 0x0020140014000000ULL;
        data[3965] = 0x4022140014200000ULL;
        data[3992] = 0x4020140014020100ULL;
        data[4035] = 0x4122140014204000ULL;
        data[4053] = 0x0000140014224100ULL;
        data[4061] = 0x0102140014000000ULL;
        data[4084] = 0x0000140014224180ULL;
        data[4092] = 0x0002140014020100ULL;
        data[4094] = 0x0000140014000000ULL;
        data[4102] = 0x4122140014220000ULL;
        data[4129] = 0x0020140014224080ULL;
        data[4162] = 0x0102140014020100ULL;
        data[4164] = 0x0000140014000000ULL;
        data[4177] = 0x0000140014200000ULL;
        data[4208] = 0x0022140014020000ULL;
        data[4221] = 0x0022140014220100ULL;
        data[4223] = 0x0020140014200000ULL;
        data[4239] = 0x4122140014020000ULL;
        data[4252] = 0x4122140014220100ULL;
        data[4253] = 0x4020140014200000ULL;
        data[4283] = 0x0000140014000000ULL;
        data[4313] = 0x0000140014000000ULL;
        data[4322] = 0x0002140014200000ULL;
        data[4332] = 0x4122140014000000ULL;
        data[4350] = 0x0000140014020000ULL;
        data[4357] = 0x0022140014020100ULL;
        data[4359] = 0x0020140014000000ULL;
        data[4372] = 0x0020140014200000ULL;
        data[4381] = 0x0000140014020000ULL;
        data[4393] = 0x0102140014204000ULL;
        data[4423] = 0x0002140014224000ULL;
        data[4442] = 0x0020140014204000ULL;
        data[4451] = 0x0022140014000000ULL;
        data[4473] = 0x4020140014224100ULL;
        data[4481] = 0x4122140014000000ULL;
        data[4499] = 0x0000140014020100ULL;
        data[4509] = 0x0020140014220000ULL;
        data[4542] = 0x0102140014204080ULL;
        data[4569] = 0x0000140014020100ULL;
        data[4573] = 0x0002140014224180ULL;
        data[4574] = 0x0000140014204080ULL;
        data[4609] = 0x0102140014220000ULL;
        data[4646] = 0x0020140014020000ULL;
        data[4653] = 0x0002140014000000ULL;
        data[4659] = 0x0020140014220100ULL;
        data[4666] = 0x0002140014200000ULL;
        data[4703] = 0x4020140014000000ULL;
        data[4737] = 0x0122140014020100ULL;
        data[4739] = 0x0020140014000000ULL;
        data[4742] = 0x4022140014200000ULL;
        data[4770] = 0x4020140014020000ULL;
        data[4802] = 0x0002140014000000ULL;
        data[4813] = 0x4122140014204000ULL;
        data[4830] = 0x0000140014224000ULL;
        data[4839] = 0x0102140014000000ULL;
        data[4861] = 0x0000140014224080ULL;
        data[4870] = 0x0002140014020000ULL;
        data[4888] = 0x0020140014000000ULL;
        data[4919] = 0x4020140014020100ULL;
        data[4931] = 0x0022140014204000ULL;
        data[4940] = 0x0102140014020000ULL;
        data[4953] = 0x0102140014220100ULL;
        data[4955] = 0x0000140014200000ULL;
        data[4962] = 0x4122140014204080ULL;
        data[4980] = 0x0000140014224180ULL;
        data[4989] = 0x4020140014020100ULL;
        data[4998] = 0x0022140014220000ULL;
        data[5029] = 0x4122140014220000ULL;
        data[5058] = 0x0002140014020100ULL;
        data[5060] = 0x0000140014000000ULL;
        data[5073] = 0x0000140014200000ULL;
        data[5089] = 0x0102140014020100ULL;
        data[5091] = 0x0000140014000000ULL;
        data[5104] = 0x0000140014200000ULL;
        data[5135] = 0x0022140014020000ULL;
        data[5148] = 0x0022140014220100ULL;
        data[5149] = 0x0020140014200000ULL;
        data[5183] = 0x0102140014000000ULL;
        data[5209] = 0x0000140014000000ULL;
        data[5218] = 0x0122140014224100ULL;
        data[5220] = 0x0020140014204000ULL;
        data[5228] = 0x0022140014000000ULL;
        data[5250] = 0x4020140014224000ULL;
        data[5259] = 0x4122140014000000ULL;
        data[5277] = 0x0000140014020000ULL;
        data[5319] = 0x0102140014204080ULL;
        data[5347] = 0x0000140014020000ULL;
        data[5350] = 0x0002140014224080ULL;
        data[5360] = 0x0000140014220100ULL;
        data[5369] = 0x0020140014204080ULL;
        data[5377] = 0x0022140014000000ULL;
        data[5400] = 0x4020140014224180ULL;
        data[5436] = 0x0020140014220000ULL;
        data[5444] = 0x0002140014200000ULL;
        data[5448] = 0x0122140014000000ULL;
        data[5478] = 0x4022140014020100ULL;
        data[5480] = 0x4020140014000000ULL;
        data[5493] = 0x4020140014200000ULL;
        data[5496] = 0x0000140014020100ULL;
        data[5515] = 0x0122140014020000ULL;
        data[5580] = 0x0002140014000000ULL;
        data[5590] = 0x0000140014000000ULL;
        data[5593] = 0x0002140014200000ULL;
        data[5620] = 0x0000140014020100ULL;
        data[5629] = 0x4020140014000000ULL;
        data[5663] = 0x0102140014204000ULL;
        data[5664] = 0x0122140014020100ULL;
        data[5666] = 0x0020140014000000ULL;
        data[5697] = 0x4020140014020000ULL;
        data[5709] = 0x0022140014204000ULL;
        data[5730] = 0x0102140014220000ULL;
        data[5739] = 0x4122140014204080ULL;
        data[5757] = 0x0000140014224080ULL;
        data[5767] = 0x4020140014020000ULL;
        data[5780] = 0x4020140014220100ULL;
        data[5836] = 0x0002140014020000ULL;
        data[5849] = 0x0002140014220100ULL;
        data[5851] = 0x0000140014200000ULL;
        data[5858] = 0x0022140014204080ULL;
        data[5867] = 0x0102140014020000ULL;
        data[5880] = 0x0102140014220100ULL;
        data[5881] = 0x0000140014200000ULL;
        data[5885] = 0x0020140014020100ULL;
        data[5916] = 0x4020140014020100ULL;
        data[5925] = 0x0022140014220000ULL;
        data[5960] = 0x0102140014000000ULL;
        data[5985] = 0x0002140014020100ULL;
        data[5987] = 0x0000140014000000ULL;
        data[5995] = 0x0122140014224000ULL;
        data[6000] = 0x0000140014200000ULL;
        data[6010] = 0x4020140014000000ULL;
        data[6070] = 0x0000140014204000ULL;
        data[6079] = 0x0002140014000000ULL;
        data[6101] = 0x0000140014224100ULL;
        data[6109] = 0x0102140014000000ULL;
        data[6137] = 0x0000140014220000ULL;
        data[6145] = 0x0122140014224180ULL;
        data[6146] = 0x0020140014204080ULL;
        data[6155] = 0x0022140014000000ULL;
        data[6177] = 0x4020140014224080ULL;
        data[6225] = 0x0122140014000000ULL;
        data[6238] = 0x0122140014200000ULL;
        data[6256] = 0x4022140014020000ULL;
        data[6269] = 0x4022140014220100ULL;
        data[6271] = 0x4020140014200000ULL;
        data[6274] = 0x0000140014020000ULL;
        data[6287] = 0x0000140014220100ULL;
        data[6331] = 0x0000140014000000ULL;
        data[6365] = 0x0102140014020100ULL;
        data[6367] = 0x0000140014000000ULL;
        data[6370] = 0x0002140014200000ULL;
        data[6374] = 0x0122140014000000ULL;
        data[6398] = 0x0000140014020000ULL;
        data[6405] = 0x4022140014020100ULL;
        data[6407] = 0x4020140014000000ULL;
        data[6420] = 0x4020140014200000ULL;
        data[6441] = 0x0102140014204000ULL;
        data[6442] = 0x0122140014020000ULL;
        data[6490] = 0x4020140014204000ULL;
        data[6499] = 0x4022140014000000ULL;
        data[6516] = 0x0000140014000000ULL;
        data[6547] = 0x0000140014020100ULL;
        data[6557] = 0x4020140014220000ULL;
        data[6559] = 0x0002140014204000ULL;
        data[6590] = 0x0102140014204080ULL;
        data[6617] = 0x0000140014020100ULL;
        data[6626] = 0x0002140014220000ULL;
        data[6635] = 0x0022140014204080ULL;
        data[6657] = 0x0102140014220000ULL;
        data[6663] = 0x0020140014020000ULL;
        data[6676] = 0x0020140014220100ULL;
        data[6694] = 0x4020140014020000ULL;
        data[6707] = 0x4020140014220100ULL;
        data[6763] = 0x0002140014020000ULL;
        data[6776] = 0x0002140014220100ULL;
        data[6777] = 0x0000140014200000ULL;
        data[6785] = 0x4122140014020100ULL;
        data[6787] = 0x4020140014000000ULL;
        data[6812] = 0x0020140014020100ULL;
        data[6846] = 0x0102140014224100ULL;
        data[6848] = 0x0000140014204000ULL;
        data[6856] = 0x0002140014000000ULL;
        data[6878] = 0x0000140014224000ULL;
        data[6887] = 0x0102140014000000ULL;
        data[6906] = 0x0020140014000000ULL;
        data[6922] = 0x0122140014224080ULL;
        data[6936] = 0x4020140014000000ULL;
        data[6979] = 0x4022140014204000ULL;
        data[6997] = 0x0000140014204080ULL;
        data[7005] = 0x0002140014000000ULL;
        data[7016] = 0x0122140014200000ULL;
        data[7028] = 0x0000140014224180ULL;
        data[7046] = 0x4022140014220000ULL;
        data[7064] = 0x0000140014220000ULL;
        data[7076] = 0x0102140014000000ULL;
        data[7106] = 0x0002140014020100ULL;
        data[7108] = 0x0000140014000000ULL;
        data[7121] = 0x0000140014200000ULL;
        data[7143] = 0x0102140014020000ULL;
        data[7152] = 0x0122140014000000ULL;
        data[7165] = 0x0122140014200000ULL;
        data[7183] = 0x4022140014020000ULL;
        data[7192] = 0x0020140014020100ULL;
        data[7196] = 0x4022140014220100ULL;
        data[7197] = 0x4020140014200000ULL;
        data[7257] = 0x0000140014000000ULL;
        data[7266] = 0x4122140014224100ULL;
        data[7268] = 0x4020140014204000ULL;
        data[7276] = 0x4022140014000000ULL;
        data[7292] = 0x0102140014020100ULL;
        data[7294] = 0x0000140014000000ULL;
        data[7325] = 0x0000140014020000ULL;
        data[7337] = 0x0002140014204000ULL;
        data[7367] = 0x0102140014204080ULL;
        data[7386] = 0x0020140014204000ULL;
        data[7395] = 0x0000140014020000ULL;
        data[7408] = 0x0000140014220100ULL;
        data[7417] = 0x4020140014204080ULL;
        data[7425] = 0x4022140014000000ULL;
        data[7453] = 0x0020140014220000ULL;
        data[7484] = 0x4020140014220000ULL;
        data[7486] = 0x0002140014204080ULL;
        data[7496] = 0x4122140014000000ULL;
        data[7513] = 0x0000140014020100ULL;
        data[7544] = 0x0000140014020100ULL;
        data[7553] = 0x0002140014220000ULL;
        data[7563] = 0x4122140014020000ULL;
        data[7590] = 0x0020140014020000ULL;
        data[7603] = 0x0020140014220100ULL;
        data[7623] = 0x0102140014224000ULL;
        data[7638] = 0x0000140014000000ULL;
        data[7673] = 0x0020140014224100ULL;
        data[7681] = 0x0022140014020100ULL;
        data[7683] = 0x0020140014000000ULL;
        data[7712] = 0x4122140014020100ULL;
        data[7714] = 0x4020140014000000ULL;
        data[7757] = 0x4022140014204000ULL;
        data[7773] = 0x0102140014224180ULL;
        data[7774] = 0x0000140014204080ULL;
        data[7783] = 0x0002140014000000ULL;
        data[7805] = 0x0000140014224080ULL;
        data[7832] = 0x0020140014000000ULL;
        data[7853] = 0x0102140014000000ULL;
        data[7866] = 0x0102140014200000ULL;
        data[7884] = 0x0002140014020000ULL;
        data[7897] = 0x0002140014220100ULL;
        data[7899] = 0x0000140014200000ULL;
        data[7903] = 0x0020140014000000ULL;
        data[7906] = 0x4022140014204080ULL;
        data[7933] = 0x4020140014020100ULL;
        data[7942] = 0x0122140014200000ULL;
        data[7970] = 0x0020140014020000ULL;
        data[7973] = 0x4022140014220000ULL;
        data[8002] = 0x0102140014000000ULL;
        data[8033] = 0x0002140014020100ULL;
        data[8035] = 0x0000140014000000ULL;
        data[8043] = 0x4122140014224000ULL;
        data[8048] = 0x0000140014200000ULL;
        data[8070] = 0x0102140014020000ULL;
        data[8118] = 0x0000140014204000ULL;
        data[8119] = 0x0020140014020100ULL;
        data[8127] = 0x0002140014000000ULL;
        data[8162] = 0x0022140014224100ULL;
        data[8164] = 0x0020140014204000ULL;
        data[8185] = 0x0000140014220000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_15_mixin<0x1fff>, [](uint64_t *& data) {
        data = new uint64_t [8190]();
        data[1] = 0x8244280028448201ULL;
        data[5] = 0x0000280028440201ULL;
        data[13] = 0x0044280028040201ULL;
        data[31] = 0x0004280028040000ULL;
        data[52] = 0x8044280028000000ULL;
        data[63] = 0x0204280028448200ULL;
        data[68] = 0x8040280028408000ULL;
        data[85] = 0x8244280028040000ULL;
        data[102] = 0x8040280028448000ULL;
        data[115] = 0x0040280028040000ULL;
        data[131] = 0x0000280028408000ULL;
        data[146] = 0x0040280028440201ULL;
        data[153] = 0x8040280028000000ULL;
        data[164] = 0x0000280028448000ULL;
        data[185] = 0x8040280028400000ULL;
        data[216] = 0x0204280028000000ULL;
        data[219] = 0x0004280028448200ULL;
        data[261] = 0x8040280028040200ULL;
        data[302] = 0x8040280028440201ULL;
        data[320] = 0x0000280028448000ULL;
        data[357] = 0x0244280028000000ULL;
        data[360] = 0x0044280028448200ULL;
        data[364] = 0x0000280028440200ULL;
        data[391] = 0x0000280028000000ULL;
        data[461] = 0x0040280028448000ULL;
        data[490] = 0x0004280028408000ULL;
        data[513] = 0x8044280028000000ULL;
        data[524] = 0x0204280028448000ULL;
        data[532] = 0x0040280028000000ULL;
        data[544] = 0x8244280028400000ULL;
        data[562] = 0x0204280028408000ULL;
        data[575] = 0x0004280028000000ULL;
        data[591] = 0x0000280028408000ULL;
        data[607] = 0x0204280028400000ULL;
        data[621] = 0x8244280028040201ULL;
        data[625] = 0x0000280028040201ULL;
        data[645] = 0x8040280028400000ULL;
        data[680] = 0x0004280028448000ULL;
        data[683] = 0x0204280028040200ULL;
        data[688] = 0x8040280028000000ULL;
        data[703] = 0x0244280028408000ULL;
        data[708] = 0x0000280028400000ULL;
        data[722] = 0x8040280028040000ULL;
        data[724] = 0x0004280028440201ULL;
        data[751] = 0x0000280028000000ULL;
        data[763] = 0x0004280028400000ULL;
        data[766] = 0x0040280028040201ULL;
        data[784] = 0x0000280028040000ULL;
        data[796] = 0x0204280028440000ULL;
        data[805] = 0x8040280028000000ULL;
        data[821] = 0x0044280028448000ULL;
        data[825] = 0x0000280028440000ULL;
        data[839] = 0x0004280028040200ULL;
        data[859] = 0x8044280028408000ULL;
        data[864] = 0x0000280028400000ULL;
        data[904] = 0x0044280028400000ULL;
        data[922] = 0x8040280028040201ULL;
        data[937] = 0x0244280028440000ULL;
        data[940] = 0x0000280028040000ULL;
        data[972] = 0x0000280028448200ULL;
        data[980] = 0x0044280028040200ULL;
        data[985] = 0x0000280028040200ULL;
        data[1005] = 0x0040280028400000ULL;
        data[1068] = 0x0204280028400000ULL;
        data[1081] = 0x0040280028040000ULL;
        data[1093] = 0x8044280028440000ULL;
        data[1111] = 0x0004280028000000ULL;
        data[1113] = 0x0040280028448200ULL;
        data[1144] = 0x0204280028040000ULL;
        data[1165] = 0x8244280028000000ULL;
        data[1182] = 0x0204280028000000ULL;
        data[1212] = 0x0000280028000000ULL;
        data[1224] = 0x0004280028400000ULL;
        data[1227] = 0x0204280028000000ULL;
        data[1243] = 0x0000280028408000ULL;
        data[1266] = 0x8040280028000000ULL;
        data[1269] = 0x8040280028448200ULL;
        data[1300] = 0x0004280028040000ULL;
        data[1324] = 0x0244280028000000ULL;
        data[1328] = 0x0000280028000000ULL;
        data[1331] = 0x0204280028448201ULL;
        data[1344] = 0x0004280028040201ULL;
        data[1365] = 0x0044280028400000ULL;
        data[1383] = 0x0004280028000000ULL;
        data[1399] = 0x0000280028408000ULL;
        data[1416] = 0x0204280028040000ULL;
        data[1432] = 0x0000280028448000ULL;
        data[1441] = 0x0044280028040000ULL;
        data[1445] = 0x0000280028040000ULL;
        data[1473] = 0x0244280028448201ULL;
        data[1477] = 0x0000280028440201ULL;
        data[1480] = 0x8044280028000000ULL;
        data[1484] = 0x0000280028000000ULL;
        data[1511] = 0x8244280028408000ULL;
        data[1516] = 0x0000280028400000ULL;
        data[1524] = 0x0044280028000000ULL;
        data[1540] = 0x0040280028408000ULL;
        data[1557] = 0x0244280028040000ULL;
        data[1574] = 0x0040280028448000ULL;
        data[1592] = 0x0000280028040200ULL;
        data[1612] = 0x8040280028408000ULL;
        data[1625] = 0x0040280028000000ULL;
        data[1629] = 0x8044280028448201ULL;
        data[1633] = 0x0000280028440201ULL;
        data[1657] = 0x0040280028400000ULL;
        data[1688] = 0x0204280028000000ULL;
        data[1691] = 0x0004280028448200ULL;
        data[1713] = 0x8044280028040000ULL;
        data[1730] = 0x8040280028448000ULL;
        data[1733] = 0x0040280028040200ULL;
        data[1745] = 0x8244280028440200ULL;
        data[1774] = 0x0040280028440201ULL;
        data[1792] = 0x0000280028448000ULL;
        data[1813] = 0x8040280028400000ULL;
        data[1844] = 0x0004280028000000ULL;
        data[1846] = 0x8040280028440000ULL;
        data[1863] = 0x0000280028000000ULL;
        data[1875] = 0x0204280028400000ULL;
        data[1889] = 0x8040280028040200ULL;
        data[1952] = 0x0204280028040201ULL;
        data[1972] = 0x8244280028408000ULL;
        data[1976] = 0x0000280028400000ULL;
        data[1985] = 0x0044280028000000ULL;
        data[2016] = 0x0244280028400000ULL;
        data[2019] = 0x0000280028000000ULL;
        data[2034] = 0x0204280028408000ULL;
        data[2053] = 0x0000280028040000ULL;
        data[2093] = 0x0244280028040201ULL;
        data[2097] = 0x0000280028040201ULL;
        data[2117] = 0x0040280028400000ULL;
        data[2131] = 0x8244280028000000ULL;
        data[2136] = 0x0000280028000000ULL;
        data[2152] = 0x0004280028448000ULL;
        data[2160] = 0x0040280028000000ULL;
        data[2172] = 0x8044280028400000ULL;
        data[2190] = 0x0004280028408000ULL;
        data[2194] = 0x0040280028040000ULL;
        data[2206] = 0x8244280028440000ULL;
        data[2232] = 0x8040280028000000ULL;
        data[2235] = 0x0004280028400000ULL;
        data[2249] = 0x8044280028040201ULL;
        data[2253] = 0x0000280028040201ULL;
        data[2268] = 0x0204280028440000ULL;
        data[2273] = 0x8040280028400000ULL;
        data[2277] = 0x0040280028000000ULL;
        data[2311] = 0x0004280028040200ULL;
        data[2331] = 0x0044280028408000ULL;
        data[2336] = 0x0000280028400000ULL;
        data[2350] = 0x8040280028040000ULL;
        data[2365] = 0x8244280028040200ULL;
        data[2381] = 0x8040280028448201ULL;
        data[2394] = 0x0040280028040201ULL;
        data[2412] = 0x0000280028040000ULL;
        data[2424] = 0x0004280028440000ULL;
        data[2433] = 0x8040280028000000ULL;
        data[2444] = 0x0000280028448200ULL;
        data[2466] = 0x8040280028040000ULL;
        data[2495] = 0x0204280028000000ULL;
        data[2565] = 0x0044280028440000ULL;
        data[2592] = 0x8244280028000000ULL;
        data[2596] = 0x0000280028000000ULL;
        data[2600] = 0x0000280028448200ULL;
        data[2637] = 0x0244280028000000ULL;
        data[2654] = 0x0204280028000000ULL;
        data[2696] = 0x0004280028400000ULL;
        data[2738] = 0x0040280028000000ULL;
        data[2741] = 0x0040280028448200ULL;
        data[2772] = 0x0004280028040000ULL;
        data[2793] = 0x8044280028000000ULL;
        data[2803] = 0x0204280028448201ULL;
        data[2810] = 0x0004280028000000ULL;
        data[2826] = 0x8244280028040000ULL;
        data[2842] = 0x0204280028408000ULL;
        data[2855] = 0x0004280028000000ULL;
        data[2871] = 0x0000280028408000ULL;
        data[2888] = 0x0204280028040000ULL;
        data[2894] = 0x8040280028000000ULL;
        data[2904] = 0x0000280028448000ULL;
        data[2925] = 0x8040280028400000ULL;
        data[2943] = 0x0000280028408000ULL;
        data[2952] = 0x0044280028000000ULL;
        data[2956] = 0x0000280028000000ULL;
        data[2959] = 0x0004280028448201ULL;
        data[2983] = 0x0244280028408000ULL;
        data[2988] = 0x0000280028400000ULL;
        data[3001] = 0x8040280028040201ULL;
        data[3044] = 0x0004280028040000ULL;
        data[3060] = 0x0000280028448000ULL;
        data[3064] = 0x0000280028040200ULL;
        data[3076] = 0x0204280028440200ULL;
        data[3084] = 0x0040280028408000ULL;
        data[3101] = 0x0044280028448201ULL;
        data[3105] = 0x0000280028440201ULL;
        data[3139] = 0x8044280028408000ULL;
        data[3144] = 0x0000280028400000ULL;
        data[3172] = 0x8244280028448000ULL;
        data[3177] = 0x0000280028440000ULL;
        data[3185] = 0x0044280028040000ULL;
        data[3202] = 0x0040280028448000ULL;
        data[3217] = 0x0244280028440200ULL;
        data[3220] = 0x0000280028040200ULL;
        data[3240] = 0x8040280028408000ULL;
        data[3285] = 0x0040280028400000ULL;
        data[3303] = 0x0204280028408000ULL;
        data[3316] = 0x0004280028000000ULL;
        data[3318] = 0x0040280028440000ULL;
        data[3347] = 0x0204280028400000ULL;
        data[3361] = 0x0040280028040200ULL;
        data[3373] = 0x8044280028440200ULL;
        data[3424] = 0x0204280028040201ULL;
        data[3444] = 0x0244280028408000ULL;
        data[3448] = 0x0000280028400000ULL;
        data[3462] = 0x0204280028000000ULL;
        data[3474] = 0x8040280028440000ULL;
        data[3491] = 0x0000280028000000ULL;
        data[3503] = 0x0004280028400000ULL;
        data[3525] = 0x0000280028040000ULL;
        data[3537] = 0x0204280028440000ULL;
        data[3545] = 0x8040280028000000ULL;
        data[3563] = 0x0000280028000000ULL;
        data[3580] = 0x0004280028040201ULL;
        data[3600] = 0x8044280028408000ULL;
        data[3603] = 0x0244280028000000ULL;
        data[3604] = 0x0000280028400000ULL;
        data[3608] = 0x0000280028000000ULL;
        data[3644] = 0x0044280028400000ULL;
        data[3662] = 0x0004280028408000ULL;
        data[3678] = 0x0244280028440000ULL;
        data[3681] = 0x0000280028040000ULL;
        data[3696] = 0x0204280028040200ULL;
        data[3704] = 0x0040280028000000ULL;
        data[3712] = 0x0000280028448201ULL;
        data[3716] = 0x8244280028400000ULL;
        data[3721] = 0x0044280028040201ULL;
        data[3725] = 0x0000280028040201ULL;
        data[3745] = 0x0040280028400000ULL;
        data[3759] = 0x8044280028000000ULL;
        data[3764] = 0x0000280028000000ULL;
        data[3792] = 0x8244280028040000ULL;
        data[3797] = 0x0000280028040000ULL;
        data[3822] = 0x0040280028040000ULL;
        data[3834] = 0x8044280028440000ULL;
        data[3837] = 0x0244280028040200ULL;
        data[3853] = 0x0040280028448201ULL;
        data[3860] = 0x8040280028000000ULL;
        data[3892] = 0x8040280028408000ULL;
        data[3896] = 0x0004280028440000ULL;
        data[3905] = 0x0040280028000000ULL;
        data[3923] = 0x0204280028000000ULL;
        data[3938] = 0x0040280028040000ULL;
        data[3967] = 0x0204280028000000ULL;
        data[3993] = 0x8044280028040200ULL;
        data[4009] = 0x8040280028448201ULL;
        data[4064] = 0x0244280028000000ULL;
        data[4068] = 0x0000280028000000ULL;
        data[4072] = 0x0000280028448200ULL;
        data[4094] = 0x8040280028040000ULL;
        data[4123] = 0x0004280028000000ULL;
        data[4126] = 0x8040280028440200ULL;
        data[4157] = 0x0204280028040000ULL;
        data[4220] = 0x8044280028000000ULL;
        data[4224] = 0x0000280028000000ULL;
        data[4252] = 0x8244280028408000ULL;
        data[4256] = 0x0000280028400000ULL;
        data[4265] = 0x0044280028000000ULL;
        data[4282] = 0x0004280028000000ULL;
        data[4298] = 0x0244280028040000ULL;
        data[4314] = 0x0204280028408000ULL;
        data[4332] = 0x0000280028040201ULL;
        data[4336] = 0x8244280028000000ULL;
        data[4353] = 0x8040280028408000ULL;
        data[4366] = 0x0040280028000000ULL;
        data[4397] = 0x0040280028400000ULL;
        data[4415] = 0x0000280028408000ULL;
        data[4431] = 0x0004280028448201ULL;
        data[4454] = 0x8044280028040000ULL;
        data[4470] = 0x0004280028408000ULL;
        data[4473] = 0x0040280028040201ULL;
        data[4485] = 0x8244280028440201ULL;
        data[4503] = 0x0204280028448000ULL;
        data[4512] = 0x8040280028000000ULL;
        data[4516] = 0x0004280028040000ULL;
        data[4532] = 0x0000280028448000ULL;
        data[4548] = 0x0204280028440200ULL;
        data[4553] = 0x8040280028400000ULL;
        data[4571] = 0x0000280028408000ULL;
        data[4586] = 0x8040280028440000ULL;
        data[4611] = 0x0044280028408000ULL;
        data[4616] = 0x0000280028400000ULL;
        data[4629] = 0x8040280028040201ULL;
        data[4644] = 0x0244280028448000ULL;
        data[4649] = 0x0000280028440000ULL;
        data[4692] = 0x0000280028040200ULL;
        data[4704] = 0x0004280028440200ULL;
        data[4712] = 0x0040280028408000ULL;
        data[4746] = 0x8040280028040200ULL;
        data[4775] = 0x0204280028408000ULL;
        data[4800] = 0x8044280028448000ULL;
        data[4805] = 0x0000280028440000ULL;
        data[4845] = 0x0044280028440200ULL;
        data[4872] = 0x8244280028000000ULL;
        data[4876] = 0x0000280028000000ULL;
        data[4931] = 0x0004280028408000ULL;
        data[4934] = 0x0204280028000000ULL;
        data[4946] = 0x0040280028440000ULL;
        data[4973] = 0x8040280028000000ULL;
        data[4975] = 0x0004280028400000ULL;
        data[5009] = 0x0204280028440000ULL;
        data[5017] = 0x0040280028000000ULL;
        data[5035] = 0x0000280028000000ULL;
        data[5047] = 0x0204280028400000ULL;
        data[5052] = 0x0004280028040201ULL;
        data[5072] = 0x0044280028408000ULL;
        data[5076] = 0x0000280028400000ULL;
        data[5090] = 0x0004280028000000ULL;
        data[5105] = 0x8244280028040201ULL;
        data[5123] = 0x0204280028040000ULL;
        data[5153] = 0x0000280028040000ULL;
        data[5165] = 0x0004280028440000ULL;
        data[5168] = 0x0204280028040200ULL;
        data[5173] = 0x8040280028000000ULL;
        data[5184] = 0x0000280028448201ULL;
        data[5188] = 0x0244280028400000ULL;
        data[5191] = 0x0000280028000000ULL;
        data[5207] = 0x8040280028040000ULL;
        data[5223] = 0x0000280028408000ULL;
        data[5231] = 0x0044280028000000ULL;
        data[5236] = 0x0000280028000000ULL;
        data[5264] = 0x0244280028040000ULL;
        data[5269] = 0x0000280028040000ULL;
        data[5306] = 0x0044280028440000ULL;
        data[5324] = 0x0004280028040200ULL;
        data[5332] = 0x0040280028000000ULL;
        data[5340] = 0x0000280028448201ULL;
        data[5344] = 0x8044280028400000ULL;
        data[5364] = 0x0040280028408000ULL;
        data[5395] = 0x0204280028000000ULL;
        data[5420] = 0x8044280028040000ULL;
        data[5425] = 0x0000280028040000ULL;
        data[5452] = 0x8244280028448200ULL;
        data[5456] = 0x0000280028440200ULL;
        data[5465] = 0x0044280028040200ULL;
        data[5481] = 0x0040280028448201ULL;
        data[5520] = 0x8040280028408000ULL;
        data[5551] = 0x0004280028000000ULL;
        data[5553] = 0x8040280028448000ULL;
        data[5566] = 0x0040280028040000ULL;
        data[5582] = 0x0204280028408000ULL;
        data[5595] = 0x0004280028000000ULL;
        data[5598] = 0x0040280028440200ULL;
        data[5629] = 0x0204280028040000ULL;
        data[5667] = 0x0204280028000000ULL;
        data[5683] = 0x0000280028408000ULL;
        data[5692] = 0x0044280028000000ULL;
        data[5696] = 0x0000280028000000ULL;
        data[5724] = 0x0244280028408000ULL;
        data[5728] = 0x0000280028400000ULL;
        data[5754] = 0x8040280028440200ULL;
        data[5785] = 0x0004280028040000ULL;
        data[5804] = 0x0000280028040201ULL;
        data[5808] = 0x0244280028000000ULL;
        data[5816] = 0x0204280028440201ULL;
        data[5825] = 0x0040280028408000ULL;
        data[5843] = 0x0000280028000000ULL;
        data[5880] = 0x8044280028408000ULL;
        data[5884] = 0x0000280028400000ULL;
        data[5913] = 0x8244280028448000ULL;
        data[5917] = 0x0000280028440000ULL;
        data[5926] = 0x0044280028040000ULL;
        data[5942] = 0x0004280028408000ULL;
        data[5957] = 0x0244280028440201ULL;
        data[5960] = 0x0000280028040201ULL;
        data[5964] = 0x8044280028000000ULL;
        data[5975] = 0x0204280028448000ULL;
        data[5981] = 0x8040280028408000ULL;
        data[5984] = 0x0040280028000000ULL;
        data[5996] = 0x8244280028400000ULL;
        data[6025] = 0x0040280028400000ULL;
        data[6043] = 0x0000280028408000ULL;
        data[6058] = 0x0040280028440000ULL;
        data[6072] = 0x8244280028040200ULL;
        data[6077] = 0x0000280028040200ULL;
        data[6097] = 0x8040280028400000ULL;
        data[6101] = 0x0040280028040201ULL;
        data[6113] = 0x8044280028440201ULL;
        data[6131] = 0x0004280028448000ULL;
        data[6140] = 0x8040280028000000ULL;
        data[6173] = 0x8040280028040000ULL;
        data[6176] = 0x0004280028440200ULL;
        data[6203] = 0x0204280028000000ULL;
        data[6214] = 0x8040280028440000ULL;
        data[6218] = 0x0040280028040200ULL;
        data[6272] = 0x0044280028448000ULL;
        data[6277] = 0x0000280028440000ULL;
        data[6304] = 0x0000280028000000ULL;
        data[6344] = 0x0244280028000000ULL;
        data[6348] = 0x0000280028000000ULL;
        data[6374] = 0x8040280028040200ULL;
        data[6403] = 0x0004280028408000ULL;
        data[6436] = 0x0204280028040201ULL;
        data[6445] = 0x0040280028000000ULL;
        data[6457] = 0x8244280028400000ULL;
        data[6500] = 0x8044280028000000ULL;
        data[6504] = 0x0000280028000000ULL;
        data[6519] = 0x0204280028400000ULL;
        data[6533] = 0x8244280028040000ULL;
        data[6537] = 0x0000280028040000ULL;
        data[6562] = 0x0004280028000000ULL;
        data[6577] = 0x0244280028040201ULL;
        data[6595] = 0x0204280028040000ULL;
        data[6601] = 0x8040280028000000ULL;
        data[6616] = 0x8244280028000000ULL;
        data[6632] = 0x8040280028408000ULL;
        data[6637] = 0x0004280028440000ULL;
        data[6645] = 0x0040280028000000ULL;
        data[6663] = 0x0000280028000000ULL;
        data[6675] = 0x0004280028400000ULL;
        data[6679] = 0x0040280028040000ULL;
        data[6695] = 0x0000280028408000ULL;
        data[6717] = 0x8040280028000000ULL;
        data[6733] = 0x8044280028040201ULL;
        data[6751] = 0x0004280028040000ULL;
        data[6783] = 0x0204280028448200ULL;
        data[6796] = 0x0004280028040200ULL;
        data[6812] = 0x0000280028448201ULL;
        data[6816] = 0x0044280028400000ULL;
        data[6835] = 0x8040280028040000ULL;
        data[6851] = 0x0000280028408000ULL;
        data[6866] = 0x8040280028440201ULL;
        data[6884] = 0x0000280028448000ULL;
        data[6892] = 0x0044280028040000ULL;
        data[6897] = 0x0000280028040000ULL;
        data[6924] = 0x0244280028448200ULL;
        data[6928] = 0x0000280028440200ULL;
        data[6992] = 0x0040280028408000ULL;
        data[7023] = 0x0004280028000000ULL;
        data[7025] = 0x0040280028448000ULL;
        data[7054] = 0x0204280028408000ULL;
        data[7077] = 0x8244280028000000ULL;
        data[7080] = 0x8044280028448200ULL;
        data[7084] = 0x0000280028440200ULL;
        data[7139] = 0x0204280028000000ULL;
        data[7155] = 0x0000280028408000ULL;
        data[7181] = 0x8040280028448000ULL;
        data[7210] = 0x0004280028408000ULL;
        data[7226] = 0x0040280028440200ULL;
        data[7244] = 0x0204280028448000ULL;
        data[7252] = 0x8040280028000000ULL;
        data[7257] = 0x0004280028040000ULL;
        data[7288] = 0x0204280028440201ULL;
        data[7295] = 0x0004280028000000ULL;
        data[7311] = 0x0000280028408000ULL;
        data[7315] = 0x0000280028000000ULL;
        data[7327] = 0x0204280028400000ULL;
        data[7352] = 0x0044280028408000ULL;
        data[7356] = 0x0000280028400000ULL;
        data[7385] = 0x0244280028448000ULL;
        data[7389] = 0x0000280028440000ULL;
        data[7403] = 0x0204280028040200ULL;
        data[7423] = 0x8244280028408000ULL;
        data[7428] = 0x0000280028400000ULL;
        data[7432] = 0x0000280028040201ULL;
        data[7436] = 0x0044280028000000ULL;
        data[7444] = 0x0004280028440201ULL;
        data[7453] = 0x0040280028408000ULL;
        data[7468] = 0x0244280028400000ULL;
        data[7471] = 0x0000280028000000ULL;
        data[7486] = 0x8040280028040201ULL;
        data[7504] = 0x0000280028040000ULL;
        data[7541] = 0x8044280028448000ULL;
        data[7544] = 0x0244280028040200ULL;
        data[7545] = 0x0000280028440000ULL;
        data[7549] = 0x0000280028040200ULL;
        data[7569] = 0x0040280028400000ULL;
        data[7585] = 0x0044280028440201ULL;
        data[7603] = 0x0004280028448000ULL;
        data[7612] = 0x0040280028000000ULL;
        data[7624] = 0x8044280028400000ULL;
        data[7645] = 0x0040280028040000ULL;
        data[7657] = 0x8244280028440000ULL;
        data[7675] = 0x0204280028000000ULL;
        data[7686] = 0x0040280028440000ULL;
        data[7700] = 0x8044280028040200ULL;
        data[7705] = 0x0000280028040200ULL;
        data[7725] = 0x8040280028400000ULL;
        data[7776] = 0x0000280028000000ULL;
        data[7788] = 0x0204280028400000ULL;
        data[7801] = 0x8040280028040000ULL;
        data[7831] = 0x0004280028000000ULL;
        data[7833] = 0x8040280028448200ULL;
        data[7846] = 0x0040280028040200ULL;
        data[7864] = 0x0204280028040000ULL;
        data[7908] = 0x0204280028040201ULL;
        data[7929] = 0x0244280028400000ULL;
        data[7932] = 0x0000280028000000ULL;
        data[7947] = 0x0204280028000000ULL;
        data[7963] = 0x0000280028408000ULL;
        data[7972] = 0x0044280028000000ULL;
        data[7976] = 0x0000280028000000ULL;
        data[8005] = 0x0244280028040000ULL;
        data[8009] = 0x0000280028040000ULL;
        data[8044] = 0x8244280028000000ULL;
        data[8048] = 0x0000280028000000ULL;
        data[8064] = 0x0004280028040201ULL;
        data[8073] = 0x0040280028000000ULL;
        data[8085] = 0x8044280028400000ULL;
        data[8088] = 0x0244280028000000ULL;
        data[8104] = 0x0040280028408000ULL;
        data[8147] = 0x0004280028400000ULL;
        data[8161] = 0x8044280028040000ULL;
        data[8165] = 0x0000280028040000ULL;
        data[8189] = 0x0040280028000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1014]();
        data[1] = 0x0488500050880402ULL;
        data[2] = 0x0488500050000000ULL;
        data[5] = 0x0000500050880402ULL;
        data[6] = 0x0000500050000000ULL;
        data[18] = 0x0080500050080402ULL;
        data[27] = 0x0408500050080000ULL;
        data[41] = 0x0080500050880400ULL;
        data[48] = 0x0088500050800000ULL;
        data[52] = 0x0000500050800000ULL;
        data[65] = 0x0080500050000000ULL;
        data[73] = 0x0008500050880000ULL;
        data[86] = 0x0488500050080000ULL;
        data[89] = 0x0080500050800000ULL;
        data[90] = 0x0000500050080000ULL;
        data[101] = 0x0408500050000000ULL;
        data[110] = 0x0488500050880000ULL;
        data[114] = 0x0000500050880000ULL;
        data[125] = 0x0408500050800000ULL;
        data[127] = 0x0080500050080000ULL;
        data[138] = 0x0088500050000000ULL;
        data[142] = 0x0000500050000000ULL;
        data[163] = 0x0008500050080400ULL;
        data[173] = 0x0080500050880000ULL;
        data[184] = 0x0488500050800000ULL;
        data[188] = 0x0000500050800000ULL;
        data[201] = 0x0080500050000000ULL;
        data[209] = 0x0408500050880402ULL;
        data[210] = 0x0408500050000000ULL;
        data[222] = 0x0088500050080402ULL;
        data[225] = 0x0080500050800000ULL;
        data[226] = 0x0000500050080402ULL;
        data[245] = 0x0088500050880400ULL;
        data[249] = 0x0000500050880400ULL;
        data[256] = 0x0008500050800000ULL;
        data[263] = 0x0080500050080400ULL;
        data[269] = 0x0488500050000000ULL;
        data[273] = 0x0000500050000000ULL;
        data[293] = 0x0488500050800000ULL;
        data[294] = 0x0408500050080000ULL;
        data[297] = 0x0000500050800000ULL;
        data[309] = 0x0080500050880402ULL;
        data[310] = 0x0080500050000000ULL;
        data[318] = 0x0408500050880000ULL;
        data[331] = 0x0088500050080000ULL;
        data[335] = 0x0000500050080000ULL;
        data[346] = 0x0008500050000000ULL;
        data[356] = 0x0080500050800000ULL;
        data[377] = 0x0488500050880000ULL;
        data[381] = 0x0000500050880000ULL;
        data[392] = 0x0408500050800000ULL;
        data[394] = 0x0080500050080000ULL;
        data[405] = 0x0088500050000000ULL;
        data[409] = 0x0000500050000000ULL;
        data[418] = 0x0080500050880000ULL;
        data[429] = 0x0088500050800000ULL;
        data[430] = 0x0008500050080402ULL;
        data[433] = 0x0000500050800000ULL;
        data[446] = 0x0080500050000000ULL;
        data[453] = 0x0008500050880400ULL;
        data[467] = 0x0488500050080400ULL;
        data[471] = 0x0000500050080400ULL;
        data[477] = 0x0408500050000000ULL;
        data[492] = 0x0080500050800000ULL;
        data[501] = 0x0408500050800000ULL;
        data[513] = 0x0088500050880402ULL;
        data[514] = 0x0088500050000000ULL;
        data[517] = 0x0000500050880402ULL;
        data[518] = 0x0000500050000000ULL;
        data[530] = 0x0080500050080402ULL;
        data[539] = 0x0008500050080000ULL;
        data[553] = 0x0080500050880400ULL;
        data[560] = 0x0488500050800000ULL;
        data[564] = 0x0000500050800000ULL;
        data[577] = 0x0080500050000000ULL;
        data[585] = 0x0408500050880000ULL;
        data[598] = 0x0088500050080000ULL;
        data[601] = 0x0080500050800000ULL;
        data[602] = 0x0000500050080000ULL;
        data[613] = 0x0008500050000000ULL;
        data[622] = 0x0088500050880000ULL;
        data[626] = 0x0000500050880000ULL;
        data[637] = 0x0008500050800000ULL;
        data[639] = 0x0080500050080000ULL;
        data[650] = 0x0488500050000000ULL;
        data[654] = 0x0000500050000000ULL;
        data[675] = 0x0408500050080400ULL;
        data[685] = 0x0080500050880000ULL;
        data[696] = 0x0088500050800000ULL;
        data[700] = 0x0000500050800000ULL;
        data[713] = 0x0080500050000000ULL;
        data[721] = 0x0008500050880402ULL;
        data[722] = 0x0008500050000000ULL;
        data[734] = 0x0488500050080402ULL;
        data[737] = 0x0080500050800000ULL;
        data[738] = 0x0000500050080402ULL;
        data[757] = 0x0488500050880400ULL;
        data[761] = 0x0000500050880400ULL;
        data[768] = 0x0408500050800000ULL;
        data[775] = 0x0080500050080400ULL;
        data[781] = 0x0088500050000000ULL;
        data[785] = 0x0000500050000000ULL;
        data[805] = 0x0088500050800000ULL;
        data[806] = 0x0008500050080000ULL;
        data[809] = 0x0000500050800000ULL;
        data[821] = 0x0080500050880402ULL;
        data[822] = 0x0080500050000000ULL;
        data[830] = 0x0008500050880000ULL;
        data[843] = 0x0488500050080000ULL;
        data[847] = 0x0000500050080000ULL;
        data[858] = 0x0408500050000000ULL;
        data[868] = 0x0080500050800000ULL;
        data[889] = 0x0088500050880000ULL;
        data[893] = 0x0000500050880000ULL;
        data[904] = 0x0008500050800000ULL;
        data[906] = 0x0080500050080000ULL;
        data[917] = 0x0488500050000000ULL;
        data[921] = 0x0000500050000000ULL;
        data[930] = 0x0080500050880000ULL;
        data[941] = 0x0488500050800000ULL;
        data[942] = 0x0408500050080402ULL;
        data[945] = 0x0000500050800000ULL;
        data[958] = 0x0080500050000000ULL;
        data[965] = 0x0408500050880400ULL;
        data[979] = 0x0088500050080400ULL;
        data[983] = 0x0000500050080400ULL;
        data[989] = 0x0008500050000000ULL;
        data[1004] = 0x0080500050800000ULL;
        data[1013] = 0x0008500050800000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [473]();
        data[1] = 0x0810a000a0100804ULL;
        data[16] = 0x0000a000a0000000ULL;
        data[28] = 0x0010a000a0100000ULL;
        data[44] = 0x0000a000a0000000ULL;
        data[68] = 0x0810a000a0100000ULL;
        data[82] = 0x0000a000a0100800ULL;
        data[83] = 0x0000a000a0000000ULL;
        data[86] = 0x0010a000a0000000ULL;
        data[126] = 0x0810a000a0000000ULL;
        data[138] = 0x0000a000a0100804ULL;
        data[154] = 0x0010a000a0000000ULL;
        data[166] = 0x0000a000a0100000ULL;
        data[206] = 0x0000a000a0100000ULL;
        data[209] = 0x0010a000a0100804ULL;
        data[210] = 0x0810a000a0000000ULL;
        data[224] = 0x0000a000a0000000ULL;
        data[248] = 0x0810a000a0100800ULL;
        data[264] = 0x0000a000a0000000ULL;
        data[276] = 0x0010a000a0100000ULL;
        data[291] = 0x0000a000a0000000ULL;
        data[332] = 0x0810a000a0100000ULL;
        data[334] = 0x0010a000a0000000ULL;
        data[346] = 0x0000a000a0100804ULL;
        data[348] = 0x0000a000a0000000ULL;
        data[386] = 0x0000a000a0100800ULL;
        data[390] = 0x0810a000a0000000ULL;
        data[414] = 0x0000a000a0100000ULL;
        data[418] = 0x0010a000a0000000ULL;
        data[456] = 0x0010a000a0100800ULL;
        data[458] = 0x0810a000a0000000ULL;
        data[470] = 0x0000a000a0100000ULL;
        data[472] = 0x0000a000a0000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [493]();
        data[1] = 0x1020400040201008ULL;
        data[11] = 0x0000400040201000ULL;
        data[28] = 0x1020400040200000ULL;
        data[46] = 0x1020400040000000ULL;
        data[57] = 0x0000400040000000ULL;
        data[62] = 0x0020400040201000ULL;
        data[74] = 0x1020400040000000ULL;
        data[78] = 0x0000400040201008ULL;
        data[95] = 0x1020400040200000ULL;
        data[105] = 0x0000400040200000ULL;
        data[108] = 0x0020400040000000ULL;
        data[123] = 0x0000400040000000ULL;
        data[129] = 0x0020400040201008ULL;
        data[139] = 0x0000400040201000ULL;
        data[140] = 0x1020400040000000ULL;
        data[151] = 0x0000400040000000ULL;
        data[156] = 0x0020400040200000ULL;
        data[172] = 0x0000400040200000ULL;
        data[174] = 0x0020400040000000ULL;
        data[185] = 0x0000400040000000ULL;
        data[202] = 0x0020400040000000ULL;
        data[206] = 0x0000400040201008ULL;
        data[217] = 0x0000400040000000ULL;
        data[223] = 0x0020400040200000ULL;
        data[233] = 0x0000400040200000ULL;
        data[251] = 0x0000400040000000ULL;
        data[268] = 0x0020400040000000ULL;
        data[279] = 0x0000400040000000ULL;
        data[300] = 0x0000400040200000ULL;
        data[345] = 0x0000400040000000ULL;
        data[446] = 0x1020400040201000ULL;
        data[492] = 0x1020400040000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0402000204081020ULL;
        data[7] = 0x0402000200000000ULL;
        data[24] = 0x0402000204000000ULL;
        data[38] = 0x0002000204081000ULL;
        data[43] = 0x0002000204000000ULL;
        data[44] = 0x0002000200000000ULL;
        data[50] = 0x0002000200000000ULL;
        data[85] = 0x0402000204080000ULL;
        data[91] = 0x0402000204000000ULL;
        data[105] = 0x0002000204081020ULL;
        data[111] = 0x0002000200000000ULL;
        data[128] = 0x0002000204000000ULL;
        data[152] = 0x0402000204080000ULL;
        data[189] = 0x0002000204080000ULL;
        data[195] = 0x0002000204000000ULL;
        data[239] = 0x0402000200000000ULL;
        data[256] = 0x0002000204080000ULL;
        data[300] = 0x0402000200000000ULL;
        data[306] = 0x0402000200000000ULL;
        data[343] = 0x0002000200000000ULL;
        data[367] = 0x0402000200000000ULL;
        data[385] = 0x0402000204000000ULL;
        data[391] = 0x0402000200000000ULL;
        data[404] = 0x0002000200000000ULL;
        data[410] = 0x0002000200000000ULL;
        data[446] = 0x0402000204081000ULL;
        data[451] = 0x0402000204000000ULL;
        data[452] = 0x0402000200000000ULL;
        data[458] = 0x0402000200000000ULL;
        data[471] = 0x0002000200000000ULL;
        data[489] = 0x0002000204000000ULL;
        data[495] = 0x0002000200000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [500]();
        data[1] = 0x0805000508102040ULL;
        data[2] = 0x0805000508000000ULL;
        data[33] = 0x0005000500000000ULL;
        data[48] = 0x0805000500000000ULL;
        data[77] = 0x0005000508000000ULL;
        data[92] = 0x0805000508000000ULL;
        data[107] = 0x0805000500000000ULL;
        data[123] = 0x0005000500000000ULL;
        data[151] = 0x0805000508100000ULL;
        data[166] = 0x0005000508102000ULL;
        data[198] = 0x0805000500000000ULL;
        data[199] = 0x0805000500000000ULL;
        data[213] = 0x0005000500000000ULL;
        data[214] = 0x0005000500000000ULL;
        data[241] = 0x0805000508100000ULL;
        data[243] = 0x0805000508000000ULL;
        data[257] = 0x0005000508102040ULL;
        data[258] = 0x0005000508000000ULL;
        data[289] = 0x0805000500000000ULL;
        data[304] = 0x0005000500000000ULL;
        data[333] = 0x0805000508000000ULL;
        data[348] = 0x0005000508000000ULL;
        data[363] = 0x0005000500000000ULL;
        data[379] = 0x0805000500000000ULL;
        data[407] = 0x0005000508100000ULL;
        data[422] = 0x0805000508102000ULL;
        data[454] = 0x0005000500000000ULL;
        data[455] = 0x0005000500000000ULL;
        data[469] = 0x0805000500000000ULL;
        data[470] = 0x0805000500000000ULL;
        data[497] = 0x0005000508100000ULL;
        data[499] = 0x0005000508000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_19_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x110a000a11204080ULL;
        data[2] = 0x110a000a01000000ULL;
        data[7] = 0x110a000a10204000ULL;
        data[8] = 0x110a000a00000000ULL;
        data[13] = 0x000a000a01000000ULL;
        data[20] = 0x000a000a00000000ULL;
        data[22] = 0x100a000a11204000ULL;
        data[23] = 0x110a000a10204080ULL;
        data[24] = 0x100a000a01000000ULL;
        data[25] = 0x110a000a00000000ULL;
        data[36] = 0x000a000a00000000ULL;
        data[39] = 0x100a000a11204080ULL;
        data[41] = 0x100a000a01000000ULL;
        data[45] = 0x100a000a10204000ULL;
        data[47] = 0x100a000a00000000ULL;
        data[48] = 0x010a000a11200000ULL;
        data[62] = 0x100a000a10204080ULL;
        data[63] = 0x100a000a00000000ULL;
        data[64] = 0x010a000a11200000ULL;
        data[71] = 0x010a000a10200000ULL;
        data[75] = 0x110a000a01000000ULL;
        data[86] = 0x000a000a11200000ULL;
        data[87] = 0x010a000a10200000ULL;
        data[92] = 0x110a000a01000000ULL;
        data[98] = 0x110a000a00000000ULL;
        data[103] = 0x000a000a11200000ULL;
        data[109] = 0x000a000a10200000ULL;
        data[114] = 0x100a000a01000000ULL;
        data[115] = 0x110a000a00000000ULL;
        data[126] = 0x000a000a10200000ULL;
        data[131] = 0x100a000a01000000ULL;
        data[134] = 0x110a000a11000000ULL;
        data[137] = 0x100a000a00000000ULL;
        data[138] = 0x010a000a11204000ULL;
        data[139] = 0x010a000a01000000ULL;
        data[151] = 0x110a000a11000000ULL;
        data[154] = 0x100a000a00000000ULL;
        data[155] = 0x010a000a11204080ULL;
        data[156] = 0x010a000a01000000ULL;
        data[157] = 0x110a000a10000000ULL;
        data[161] = 0x010a000a10204000ULL;
        data[162] = 0x010a000a00000000ULL;
        data[173] = 0x100a000a11000000ULL;
        data[174] = 0x110a000a10000000ULL;
        data[176] = 0x000a000a11204000ULL;
        data[177] = 0x010a000a10204080ULL;
        data[178] = 0x000a000a01000000ULL;
        data[179] = 0x010a000a00000000ULL;
        data[190] = 0x100a000a11000000ULL;
        data[193] = 0x000a000a11204080ULL;
        data[195] = 0x000a000a01000000ULL;
        data[196] = 0x100a000a10000000ULL;
        data[199] = 0x000a000a10204000ULL;
        data[201] = 0x000a000a00000000ULL;
        data[213] = 0x100a000a10000000ULL;
        data[216] = 0x000a000a10204080ULL;
        data[217] = 0x000a000a00000000ULL;
        data[225] = 0x110a000a11000000ULL;
        data[226] = 0x110a000a01000000ULL;
        data[229] = 0x010a000a01000000ULL;
        data[241] = 0x110a000a11000000ULL;
        data[243] = 0x110a000a01000000ULL;
        data[246] = 0x010a000a01000000ULL;
        data[247] = 0x110a000a10000000ULL;
        data[249] = 0x110a000a00000000ULL;
        data[252] = 0x010a000a00000000ULL;
        data[263] = 0x100a000a11000000ULL;
        data[264] = 0x110a000a10000000ULL;
        data[265] = 0x100a000a01000000ULL;
        data[266] = 0x110a000a00000000ULL;
        data[268] = 0x000a000a01000000ULL;
        data[269] = 0x010a000a00000000ULL;
        data[280] = 0x100a000a11000000ULL;
        data[281] = 0x100a000a01000000ULL;
        data[285] = 0x000a000a01000000ULL;
        data[286] = 0x100a000a10000000ULL;
        data[287] = 0x100a000a00000000ULL;
        data[288] = 0x010a000a11000000ULL;
        data[291] = 0x000a000a00000000ULL;
        data[303] = 0x100a000a10000000ULL;
        data[304] = 0x100a000a00000000ULL;
        data[305] = 0x010a000a11000000ULL;
        data[308] = 0x000a000a00000000ULL;
        data[311] = 0x010a000a10000000ULL;
        data[316] = 0x110a000a01000000ULL;
        data[327] = 0x000a000a11000000ULL;
        data[328] = 0x010a000a10000000ULL;
        data[333] = 0x110a000a01000000ULL;
        data[339] = 0x110a000a00000000ULL;
        data[344] = 0x000a000a11000000ULL;
        data[350] = 0x000a000a10000000ULL;
        data[355] = 0x100a000a01000000ULL;
        data[356] = 0x110a000a00000000ULL;
        data[367] = 0x000a000a10000000ULL;
        data[371] = 0x100a000a01000000ULL;
        data[378] = 0x100a000a00000000ULL;
        data[379] = 0x010a000a11000000ULL;
        data[380] = 0x010a000a01000000ULL;
        data[394] = 0x100a000a00000000ULL;
        data[395] = 0x010a000a11000000ULL;
        data[397] = 0x010a000a01000000ULL;
        data[401] = 0x010a000a10000000ULL;
        data[403] = 0x010a000a00000000ULL;
        data[406] = 0x110a000a11200000ULL;
        data[417] = 0x000a000a11000000ULL;
        data[418] = 0x010a000a10000000ULL;
        data[419] = 0x000a000a01000000ULL;
        data[420] = 0x010a000a00000000ULL;
        data[422] = 0x110a000a11200000ULL;
        data[429] = 0x110a000a10200000ULL;
        data[434] = 0x000a000a11000000ULL;
        data[435] = 0x000a000a01000000ULL;
        data[440] = 0x000a000a10000000ULL;
        data[441] = 0x000a000a00000000ULL;
        data[444] = 0x100a000a11200000ULL;
        data[445] = 0x110a000a10200000ULL;
        data[457] = 0x000a000a10000000ULL;
        data[458] = 0x000a000a00000000ULL;
        data[461] = 0x100a000a11200000ULL;
        data[467] = 0x100a000a10200000ULL;
        data[470] = 0x010a000a01000000ULL;
        data[484] = 0x100a000a10200000ULL;
        data[487] = 0x010a000a01000000ULL;
        data[493] = 0x010a000a00000000ULL;
        data[496] = 0x110a000a11204000ULL;
        data[497] = 0x110a000a01000000ULL;
        data[509] = 0x000a000a01000000ULL;
        data[510] = 0x010a000a00000000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [507]();
        data[1] = 0x2214001422418000ULL;
        data[5] = 0x0214001420400000ULL;
        data[11] = 0x2014001420408000ULL;
        data[13] = 0x0214001420000000ULL;
        data[14] = 0x2014001422410000ULL;
        data[16] = 0x0214001422010000ULL;
        data[25] = 0x2014001402000000ULL;
        data[27] = 0x0014001420000000ULL;
        data[42] = 0x0214001402010000ULL;
        data[45] = 0x2014001422408000ULL;
        data[46] = 0x2214001400000000ULL;
        data[47] = 0x0214001422000000ULL;
        data[52] = 0x0014001400000000ULL;
        data[55] = 0x2214001400000000ULL;
        data[56] = 0x0014001402010000ULL;
        data[57] = 0x0014001420000000ULL;
        data[58] = 0x2214001402010000ULL;
        data[60] = 0x0014001422000000ULL;
        data[68] = 0x2014001400000000ULL;
        data[75] = 0x2214001420408000ULL;
        data[78] = 0x2214001422410000ULL;
        data[86] = 0x0014001402000000ULL;
        data[88] = 0x2014001420400000ULL;
        data[89] = 0x2214001402000000ULL;
        data[91] = 0x0214001420000000ULL;
        data[99] = 0x2014001400000000ULL;
        data[102] = 0x2014001402000000ULL;
        data[109] = 0x2214001422408000ULL;
        data[116] = 0x0214001400000000ULL;
        data[119] = 0x2014001420408000ULL;
        data[120] = 0x0214001402010000ULL;
        data[121] = 0x0214001420000000ULL;
        data[122] = 0x2014001422400000ULL;
        data[124] = 0x0214001422000000ULL;
        data[130] = 0x0014001400000000ULL;
        data[131] = 0x2014001422010000ULL;
        data[132] = 0x2214001400000000ULL;
        data[135] = 0x0014001420000000ULL;
        data[150] = 0x0214001402000000ULL;
        data[152] = 0x2214001420400000ULL;
        data[161] = 0x0014001400000000ULL;
        data[163] = 0x2214001400000000ULL;
        data[164] = 0x0014001402000000ULL;
        data[166] = 0x2214001402000000ULL;
        data[172] = 0x0014001402010000ULL;
        data[176] = 0x2014001400000000ULL;
        data[183] = 0x2214001420408000ULL;
        data[186] = 0x2214001422400000ULL;
        data[193] = 0x0014001422418000ULL;
        data[194] = 0x0214001400000000ULL;
        data[195] = 0x2214001422010000ULL;
        data[197] = 0x2014001420400000ULL;
        data[199] = 0x0214001420000000ULL;
        data[205] = 0x2014001420000000ULL;
        data[208] = 0x2014001422010000ULL;
        data[225] = 0x0214001400000000ULL;
        data[228] = 0x0214001402000000ULL;
        data[234] = 0x2014001402010000ULL;
        data[236] = 0x0214001402010000ULL;
        data[238] = 0x0014001400000000ULL;
        data[239] = 0x2014001422000000ULL;
        data[240] = 0x2214001400000000ULL;
        data[247] = 0x0014001400000000ULL;
        data[250] = 0x0014001402010000ULL;
        data[257] = 0x0214001422418000ULL;
        data[261] = 0x2214001420400000ULL;
        data[267] = 0x0014001420408000ULL;
        data[269] = 0x2214001420000000ULL;
        data[270] = 0x0014001422410000ULL;
        data[272] = 0x2214001422010000ULL;
        data[281] = 0x0014001402000000ULL;
        data[283] = 0x2014001420000000ULL;
        data[298] = 0x2214001402010000ULL;
        data[301] = 0x0014001422408000ULL;
        data[302] = 0x0214001400000000ULL;
        data[303] = 0x2214001422000000ULL;
        data[308] = 0x2014001400000000ULL;
        data[311] = 0x0214001400000000ULL;
        data[312] = 0x2014001402010000ULL;
        data[313] = 0x2014001420000000ULL;
        data[314] = 0x0214001402010000ULL;
        data[316] = 0x2014001422000000ULL;
        data[324] = 0x0014001400000000ULL;
        data[331] = 0x0214001420408000ULL;
        data[334] = 0x0214001422410000ULL;
        data[342] = 0x2014001402000000ULL;
        data[344] = 0x0014001420400000ULL;
        data[345] = 0x0214001402000000ULL;
        data[347] = 0x2214001420000000ULL;
        data[355] = 0x0014001400000000ULL;
        data[358] = 0x0014001402000000ULL;
        data[365] = 0x0214001422408000ULL;
        data[372] = 0x2214001400000000ULL;
        data[375] = 0x0014001420408000ULL;
        data[376] = 0x2214001402010000ULL;
        data[377] = 0x2214001420000000ULL;
        data[378] = 0x0014001422400000ULL;
        data[380] = 0x2214001422000000ULL;
        data[386] = 0x2014001400000000ULL;
        data[387] = 0x0014001422010000ULL;
        data[388] = 0x0214001400000000ULL;
        data[391] = 0x2014001420000000ULL;
        data[406] = 0x2214001402000000ULL;
        data[408] = 0x0214001420400000ULL;
        data[417] = 0x2014001400000000ULL;
        data[419] = 0x0214001400000000ULL;
        data[420] = 0x2014001402000000ULL;
        data[422] = 0x0214001402000000ULL;
        data[428] = 0x2014001402010000ULL;
        data[432] = 0x0014001400000000ULL;
        data[439] = 0x0214001420408000ULL;
        data[442] = 0x0214001422400000ULL;
        data[449] = 0x2014001422418000ULL;
        data[450] = 0x2214001400000000ULL;
        data[451] = 0x0214001422010000ULL;
        data[453] = 0x0014001420400000ULL;
        data[455] = 0x2214001420000000ULL;
        data[461] = 0x0014001420000000ULL;
        data[464] = 0x0014001422010000ULL;
        data[481] = 0x2214001400000000ULL;
        data[484] = 0x2214001402000000ULL;
        data[490] = 0x0014001402010000ULL;
        data[492] = 0x2214001402010000ULL;
        data[494] = 0x2014001400000000ULL;
        data[495] = 0x0014001422000000ULL;
        data[496] = 0x0214001400000000ULL;
        data[503] = 0x2014001400000000ULL;
        data[506] = 0x2014001402010000ULL;
    }),
    ::chess::AttackTable(mul_shift_33_e36aa5c613612997_rshift_15_mixin<0x7ff>, [](uint64_t *& data) {
        data = new uint64_t [2048]();
        data[1] = 0x4428002844820100ULL;
        data[6] = 0x0428002844000000ULL;
        data[15] = 0x4028002840800000ULL;
        data[38] = 0x4028002840000000ULL;
        data[48] = 0x4428002840000000ULL;
        data[69] = 0x4028002844820000ULL;
        data[74] = 0x0028002844000000ULL;
        data[78] = 0x4428002844800000ULL;
        data[101] = 0x4428002844020000ULL;
        data[116] = 0x4028002840000000ULL;
        data[146] = 0x4028002844800000ULL;
        data[150] = 0x0028002804020100ULL;
        data[178] = 0x4428002844000000ULL;
        data[191] = 0x4028002800000000ULL;
        data[222] = 0x4028002804020100ULL;
        data[228] = 0x0028002804000000ULL;
        data[254] = 0x4428002804020100ULL;
        data[269] = 0x4028002800000000ULL;
        data[299] = 0x4028002804000000ULL;
        data[322] = 0x4028002804020000ULL;
        data[332] = 0x4428002804000000ULL;
        data[374] = 0x0428002840800000ULL;
        data[400] = 0x4028002804000000ULL;
        data[401] = 0x4028002844020100ULL;
        data[451] = 0x0428002840800000ULL;
        data[478] = 0x4028002844000000ULL;
        data[527] = 0x0428002800000000ULL;
        data[595] = 0x0028002800000000ULL;
        data[605] = 0x0428002800000000ULL;
        data[627] = 0x0428002800000000ULL;
        data[658] = 0x0428002804020000ULL;
        data[673] = 0x0028002800000000ULL;
        data[674] = 0x0028002840800000ULL;
        data[699] = 0x4428002800000000ULL;
        data[705] = 0x0428002800000000ULL;
        data[706] = 0x0428002840000000ULL;
        data[735] = 0x0428002804000000ULL;
        data[737] = 0x0428002844820100ULL;
        data[751] = 0x0028002840800000ULL;
        data[774] = 0x0028002840000000ULL;
        data[777] = 0x4428002800000000ULL;
        data[778] = 0x4428002840800000ULL;
        data[784] = 0x0428002840000000ULL;
        data[805] = 0x0028002844820000ULL;
        data[814] = 0x0428002844800000ULL;
        data[837] = 0x0428002844020000ULL;
        data[846] = 0x4028002840800000ULL;
        data[852] = 0x0028002840000000ULL;
        data[855] = 0x4428002840800000ULL;
        data[878] = 0x4428002840000000ULL;
        data[882] = 0x0028002844800000ULL;
        data[909] = 0x4428002844820000ULL;
        data[914] = 0x0428002844000000ULL;
        data[923] = 0x4028002840800000ULL;
        data[927] = 0x0028002800000000ULL;
        data[956] = 0x4428002840000000ULL;
        data[958] = 0x0028002804020100ULL;
        data[986] = 0x4428002844800000ULL;
        data[990] = 0x0428002804020100ULL;
        data[999] = 0x4028002800000000ULL;
        data[1005] = 0x0028002800000000ULL;
        data[1031] = 0x4428002800000000ULL;
        data[1035] = 0x0028002804000000ULL;
        data[1058] = 0x0028002804020000ULL;
        data[1062] = 0x4428002804020100ULL;
        data[1068] = 0x0428002804000000ULL;
        data[1077] = 0x4028002800000000ULL;
        data[1099] = 0x4028002800000000ULL;
        data[1109] = 0x4428002800000000ULL;
        data[1130] = 0x4028002804020000ULL;
        data[1136] = 0x0028002804000000ULL;
        data[1137] = 0x0028002844020100ULL;
        data[1139] = 0x4428002804000000ULL;
        data[1162] = 0x4428002804020000ULL;
        data[1177] = 0x4028002800000000ULL;
        data[1178] = 0x4028002840000000ULL;
        data[1207] = 0x4028002804000000ULL;
        data[1209] = 0x4028002844820100ULL;
        data[1214] = 0x0028002844000000ULL;
        data[1240] = 0x4428002804000000ULL;
        data[1241] = 0x4428002844020100ULL;
        data[1256] = 0x4028002840000000ULL;
        data[1286] = 0x4028002844800000ULL;
        data[1309] = 0x4028002844020000ULL;
        data[1318] = 0x4428002844000000ULL;
        data[1386] = 0x4028002844000000ULL;
        data[1435] = 0x0428002800000000ULL;
        data[1462] = 0x4028002804020100ULL;
        data[1513] = 0x0428002800000000ULL;
        data[1514] = 0x0428002840800000ULL;
        data[1540] = 0x4028002804000000ULL;
        data[1582] = 0x0028002840800000ULL;
        data[1591] = 0x0428002840800000ULL;
        data[1614] = 0x0428002840000000ULL;
        data[1645] = 0x0428002844820000ULL;
        data[1659] = 0x0028002840800000ULL;
        data[1686] = 0x4428002840800000ULL;
        data[1692] = 0x0428002840000000ULL;
        data[1722] = 0x0428002844800000ULL;
        data[1735] = 0x0028002800000000ULL;
        data[1763] = 0x4428002840800000ULL;
        data[1767] = 0x0428002800000000ULL;
        data[1798] = 0x0428002804020100ULL;
        data[1813] = 0x0028002800000000ULL;
        data[1835] = 0x0028002800000000ULL;
        data[1839] = 0x4428002800000000ULL;
        data[1845] = 0x0428002800000000ULL;
        data[1866] = 0x0028002804020000ULL;
        data[1875] = 0x0428002804000000ULL;
        data[1898] = 0x0428002804020000ULL;
        data[1907] = 0x4028002800000000ULL;
        data[1913] = 0x0028002800000000ULL;
        data[1914] = 0x0028002840000000ULL;
        data[1917] = 0x4428002800000000ULL;
        data[1939] = 0x4428002800000000ULL;
        data[1943] = 0x0028002804000000ULL;
        data[1945] = 0x0028002844820100ULL;
        data[1970] = 0x4428002804020000ULL;
        data[1976] = 0x0428002804000000ULL;
        data[1977] = 0x0428002844020100ULL;
        data[1985] = 0x4028002800000000ULL;
        data[1986] = 0x4028002840800000ULL;
        data[1992] = 0x0028002840000000ULL;
        data[2017] = 0x4428002800000000ULL;
        data[2018] = 0x4428002840000000ULL;
        data[2022] = 0x0028002844800000ULL;
        data[2045] = 0x0028002844020000ULL;
        data[2047] = 0x4428002804000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x3ff>, [](uint64_t *& data) {
        data = new uint64_t [1020]();
        data[1] = 0x8850005088040201ULL;
        data[7] = 0x0050005000000000ULL;
        data[12] = 0x8050005008040200ULL;
        data[16] = 0x8050005000000000ULL;
        data[19] = 0x0850005000000000ULL;
        data[24] = 0x8850005008040000ULL;
        data[27] = 0x8850005000000000ULL;
        data[65] = 0x0050005088040201ULL;
        data[66] = 0x8850005000000000ULL;
        data[76] = 0x0850005088040000ULL;
        data[82] = 0x8850005008000000ULL;
        data[88] = 0x0050005008040000ULL;
        data[91] = 0x0050005000000000ULL;
        data[97] = 0x8050005008040000ULL;
        data[118] = 0x0850005080000000ULL;
        data[127] = 0x8050005080000000ULL;
        data[130] = 0x0050005000000000ULL;
        data[134] = 0x0850005088000000ULL;
        data[138] = 0x8050005000000000ULL;
        data[141] = 0x0850005000000000ULL;
        data[146] = 0x0050005008000000ULL;
        data[150] = 0x8850005000000000ULL;
        data[155] = 0x8050005008000000ULL;
        data[158] = 0x0850005008000000ULL;
        data[166] = 0x8850005008000000ULL;
        data[199] = 0x0850005000000000ULL;
        data[204] = 0x8850005008040200ULL;
        data[208] = 0x8850005000000000ULL;
        data[214] = 0x0050005000000000ULL;
        data[230] = 0x0050005008000000ULL;
        data[249] = 0x8050005080000000ULL;
        data[257] = 0x0850005088040201ULL;
        data[266] = 0x8050005088000000ULL;
        data[268] = 0x0050005008040200ULL;
        data[272] = 0x0050005000000000ULL;
        data[277] = 0x8050005008040201ULL;
        data[280] = 0x0850005008040000ULL;
        data[283] = 0x0850005000000000ULL;
        data[289] = 0x8850005008040000ULL;
        data[307] = 0x8050005080000000ULL;
        data[319] = 0x8850005080000000ULL;
        data[322] = 0x0850005000000000ULL;
        data[330] = 0x8850005000000000ULL;
        data[338] = 0x0850005008000000ULL;
        data[347] = 0x8850005008000000ULL;
        data[353] = 0x0050005008040000ULL;
        data[383] = 0x0050005080000000ULL;
        data[388] = 0x8050005088040000ULL;
        data[391] = 0x8050005080000000ULL;
        data[394] = 0x0050005000000000ULL;
        data[406] = 0x0850005000000000ULL;
        data[411] = 0x0050005008000000ULL;
        data[422] = 0x0850005008000000ULL;
        data[429] = 0x8050005080000000ULL;
        data[441] = 0x8850005080000000ULL;
        data[446] = 0x8050005088000000ULL;
        data[458] = 0x8850005088000000ULL;
        data[460] = 0x0850005008040200ULL;
        data[464] = 0x0850005000000000ULL;
        data[469] = 0x8850005008040201ULL;
        data[499] = 0x8850005080000000ULL;
        data[505] = 0x0050005080000000ULL;
        data[513] = 0x8050005080000000ULL;
        data[522] = 0x0050005088000000ULL;
        data[530] = 0x8050005088000000ULL;
        data[533] = 0x0050005008040201ULL;
        data[545] = 0x0850005008040000ULL;
        data[563] = 0x0050005080000000ULL;
        data[568] = 0x8050005088040200ULL;
        data[571] = 0x8050005080000000ULL;
        data[575] = 0x0850005080000000ULL;
        data[580] = 0x8850005088040000ULL;
        data[583] = 0x8850005080000000ULL;
        data[586] = 0x0850005000000000ULL;
        data[595] = 0x8050005000000000ULL;
        data[603] = 0x0850005008000000ULL;
        data[621] = 0x8850005080000000ULL;
        data[638] = 0x8850005088000000ULL;
        data[644] = 0x0050005088040000ULL;
        data[647] = 0x0050005080000000ULL;
        data[652] = 0x8050005088040000ULL;
        data[685] = 0x0050005080000000ULL;
        data[694] = 0x8050005080000000ULL;
        data[697] = 0x0850005080000000ULL;
        data[702] = 0x0050005088000000ULL;
        data[705] = 0x8850005080000000ULL;
        data[710] = 0x8050005088000000ULL;
        data[714] = 0x0850005088000000ULL;
        data[717] = 0x8050005000000000ULL;
        data[722] = 0x8850005088000000ULL;
        data[725] = 0x0850005008040201ULL;
        data[734] = 0x8050005008000000ULL;
        data[755] = 0x0850005080000000ULL;
        data[760] = 0x8850005088040200ULL;
        data[763] = 0x8850005080000000ULL;
        data[769] = 0x0050005080000000ULL;
        data[775] = 0x8050005000000000ULL;
        data[786] = 0x0050005088000000ULL;
        data[787] = 0x8850005000000000ULL;
        data[824] = 0x0050005088040200ULL;
        data[827] = 0x0050005080000000ULL;
        data[833] = 0x8050005088040201ULL;
        data[836] = 0x0850005088040000ULL;
        data[839] = 0x0850005080000000ULL;
        data[844] = 0x8850005088040000ULL;
        data[851] = 0x0050005000000000ULL;
        data[856] = 0x8050005008040000ULL;
        data[859] = 0x8050005000000000ULL;
        data[877] = 0x0850005080000000ULL;
        data[886] = 0x8850005080000000ULL;
        data[894] = 0x0850005088000000ULL;
        data[898] = 0x8050005000000000ULL;
        data[902] = 0x8850005088000000ULL;
        data[908] = 0x0050005088040000ULL;
        data[909] = 0x8850005000000000ULL;
        data[914] = 0x8050005008000000ULL;
        data[926] = 0x8850005008000000ULL;
        data[950] = 0x0050005080000000ULL;
        data[961] = 0x0850005080000000ULL;
        data[966] = 0x0050005088000000ULL;
        data[967] = 0x8850005000000000ULL;
        data[973] = 0x0050005000000000ULL;
        data[978] = 0x0850005088000000ULL;
        data[982] = 0x8050005000000000ULL;
        data[990] = 0x0050005008000000ULL;
        data[998] = 0x8050005008000000ULL;
        data[1016] = 0x0850005088040200ULL;
        data[1019] = 0x0850005080000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x10a000a010080402ULL;
        data[2] = 0x00a000a000000000ULL;
        data[19] = 0x00a000a010000000ULL;
        data[35] = 0x00a000a010000000ULL;
        data[101] = 0x00a000a000000000ULL;
        data[112] = 0x00a000a010080400ULL;
        data[118] = 0x00a000a000000000ULL;
        data[125] = 0x10a000a000000000ULL;
        data[129] = 0x00a000a010080402ULL;
        data[135] = 0x10a000a010080000ULL;
        data[142] = 0x10a000a000000000ULL;
        data[152] = 0x10a000a010080000ULL;
        data[218] = 0x10a000a000000000ULL;
        data[235] = 0x10a000a000000000ULL;
        data[251] = 0x10a000a010000000ULL;
        data[253] = 0x00a000a000000000ULL;
        data[263] = 0x00a000a010080000ULL;
        data[268] = 0x10a000a010000000ULL;
        data[270] = 0x00a000a000000000ULL;
        data[280] = 0x00a000a010080000ULL;
        data[346] = 0x00a000a000000000ULL;
        data[363] = 0x00a000a000000000ULL;
        data[369] = 0x10a000a000000000ULL;
        data[379] = 0x00a000a010000000ULL;
        data[386] = 0x10a000a000000000ULL;
        data[396] = 0x00a000a010000000ULL;
        data[403] = 0x10a000a010000000ULL;
        data[419] = 0x10a000a010000000ULL;
        data[485] = 0x10a000a000000000ULL;
        data[496] = 0x10a000a010080400ULL;
        data[497] = 0x00a000a000000000ULL;
        data[502] = 0x10a000a000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [506]();
        data[1] = 0x2040004020100804ULL;
        data[4] = 0x0040004000000000ULL;
        data[14] = 0x0040004020100000ULL;
        data[23] = 0x2040004020000000ULL;
        data[27] = 0x0040004000000000ULL;
        data[37] = 0x0040004020000000ULL;
        data[48] = 0x0040004020100000ULL;
        data[70] = 0x0040004020000000ULL;
        data[179] = 0x0040004000000000ULL;
        data[202] = 0x0040004000000000ULL;
        data[213] = 0x0040004000000000ULL;
        data[223] = 0x0040004020100800ULL;
        data[226] = 0x2040004000000000ULL;
        data[236] = 0x0040004000000000ULL;
        data[246] = 0x0040004020000000ULL;
        data[249] = 0x2040004000000000ULL;
        data[257] = 0x0040004020100804ULL;
        data[260] = 0x2040004000000000ULL;
        data[270] = 0x2040004020100000ULL;
        data[279] = 0x0040004020000000ULL;
        data[283] = 0x2040004000000000ULL;
        data[293] = 0x2040004020000000ULL;
        data[304] = 0x2040004020100000ULL;
        data[326] = 0x2040004020000000ULL;
        data[435] = 0x2040004000000000ULL;
        data[458] = 0x2040004000000000ULL;
        data[469] = 0x2040004000000000ULL;
        data[479] = 0x2040004020100800ULL;
        data[482] = 0x0040004000000000ULL;
        data[492] = 0x2040004000000000ULL;
        data[502] = 0x2040004020000000ULL;
        data[505] = 0x0040004000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [503]();
        data[1] = 0x0200020408102040ULL;
        data[11] = 0x0200020000000000ULL;
        data[41] = 0x0200020000000000ULL;
        data[47] = 0x0200020400000000ULL;
        data[66] = 0x0200020408000000ULL;
        data[78] = 0x0200020400000000ULL;
        data[88] = 0x0200020000000000ULL;
        data[96] = 0x0200020408000000ULL;
        data[98] = 0x0200020000000000ULL;
        data[118] = 0x0200020000000000ULL;
        data[129] = 0x0200020000000000ULL;
        data[143] = 0x0200020400000000ULL;
        data[153] = 0x0200020408100000ULL;
        data[173] = 0x0200020400000000ULL;
        data[175] = 0x0200020000000000ULL;
        data[184] = 0x0200020408100000ULL;
        data[194] = 0x0200020000000000ULL;
        data[206] = 0x0200020000000000ULL;
        data[224] = 0x0200020000000000ULL;
        data[230] = 0x0200020400000000ULL;
        data[261] = 0x0200020400000000ULL;
        data[271] = 0x0200020000000000ULL;
        data[281] = 0x0200020000000000ULL;
        data[301] = 0x0200020000000000ULL;
        data[312] = 0x0200020000000000ULL;
        data[358] = 0x0200020000000000ULL;
        data[389] = 0x0200020000000000ULL;
        data[395] = 0x0200020408000000ULL;
        data[425] = 0x0200020408000000ULL;
        data[472] = 0x0200020400000000ULL;
        data[482] = 0x0200020408102000ULL;
        data[502] = 0x0200020400000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_3_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [493]();
        data[1] = 0x0500050810204080ULL;
        data[9] = 0x0500050800000000ULL;
        data[21] = 0x0500050000000000ULL;
        data[29] = 0x0500050000000000ULL;
        data[50] = 0x0500050000000000ULL;
        data[82] = 0x0500050000000000ULL;
        data[90] = 0x0500050000000000ULL;
        data[93] = 0x0500050800000000ULL;
        data[111] = 0x0500050000000000ULL;
        data[131] = 0x0500050810000000ULL;
        data[155] = 0x0500050800000000ULL;
        data[175] = 0x0500050000000000ULL;
        data[192] = 0x0500050810000000ULL;
        data[195] = 0x0500050000000000ULL;
        data[204] = 0x0500050000000000ULL;
        data[236] = 0x0500050000000000ULL;
        data[257] = 0x0500050000000000ULL;
        data[265] = 0x0500050000000000ULL;
        data[277] = 0x0500050810000000ULL;
        data[285] = 0x0500050800000000ULL;
        data[306] = 0x0500050810200000ULL;
        data[338] = 0x0500050810000000ULL;
        data[346] = 0x0500050800000000ULL;
        data[349] = 0x0500050000000000ULL;
        data[367] = 0x0500050810200000ULL;
        data[387] = 0x0500050000000000ULL;
        data[411] = 0x0500050000000000ULL;
        data[431] = 0x0500050800000000ULL;
        data[448] = 0x0500050000000000ULL;
        data[451] = 0x0500050810204000ULL;
        data[460] = 0x0500050800000000ULL;
        data[492] = 0x0500050800000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_5_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [513]();
        data[1] = 0x0a000a1120408000ULL;
        data[22] = 0x0a000a0000000000ULL;
        data[33] = 0x0a000a0000000000ULL;
        data[41] = 0x0a000a0100000000ULL;
        data[77] = 0x0a000a1000000000ULL;
        data[78] = 0x0a000a1100000000ULL;
        data[88] = 0x0a000a1020400000ULL;
        data[96] = 0x0a000a1120000000ULL;
        data[110] = 0x0a000a0000000000ULL;
        data[118] = 0x0a000a0100000000ULL;
        data[128] = 0x0a000a0000000000ULL;
        data[129] = 0x0a000a0100000000ULL;
        data[165] = 0x0a000a1000000000ULL;
        data[173] = 0x0a000a1100000000ULL;
        data[184] = 0x0a000a1120400000ULL;
        data[205] = 0x0a000a0000000000ULL;
        data[206] = 0x0a000a0100000000ULL;
        data[216] = 0x0a000a0000000000ULL;
        data[224] = 0x0a000a0100000000ULL;
        data[261] = 0x0a000a1100000000ULL;
        data[293] = 0x0a000a0000000000ULL;
        data[301] = 0x0a000a0100000000ULL;
        data[312] = 0x0a000a0100000000ULL;
        data[329] = 0x0a000a1020000000ULL;
        data[389] = 0x0a000a0100000000ULL;
        data[406] = 0x0a000a1000000000ULL;
        data[417] = 0x0a000a1020408000ULL;
        data[425] = 0x0a000a1120000000ULL;
        data[457] = 0x0a000a0000000000ULL;
        data[494] = 0x0a000a1000000000ULL;
        data[502] = 0x0a000a1100000000ULL;
        data[512] = 0x0a000a1020000000ULL;
    }),
    ::chess::AttackTable(RightShift<30>::hash, [](uint64_t *& data) {
        data = new uint64_t [20619]();
        data[1] = 0x1400142241800000ULL;
        data[2] = 0x1400142241000000ULL;
        data[9] = 0x1400142240800000ULL;
        data[10] = 0x1400142240000000ULL;
        data[129] = 0x1400142201000000ULL;
        data[130] = 0x1400142201000000ULL;
        data[137] = 0x1400142200000000ULL;
        data[138] = 0x1400142200000000ULL;
        data[4097] = 0x1400142040800000ULL;
        data[4098] = 0x1400142040000000ULL;
        data[4105] = 0x1400142040800000ULL;
        data[4106] = 0x1400142040000000ULL;
        data[4225] = 0x1400142000000000ULL;
        data[4226] = 0x1400142000000000ULL;
        data[4233] = 0x1400142000000000ULL;
        data[4234] = 0x1400142000000000ULL;
        data[16385] = 0x1400140201000000ULL;
        data[16386] = 0x1400140201000000ULL;
        data[16393] = 0x1400140200000000ULL;
        data[16394] = 0x1400140200000000ULL;
        data[16513] = 0x1400140201000000ULL;
        data[16514] = 0x1400140201000000ULL;
        data[16521] = 0x1400140200000000ULL;
        data[16522] = 0x1400140200000000ULL;
        data[20481] = 0x1400140000000000ULL;
        data[20482] = 0x1400140000000000ULL;
        data[20489] = 0x1400140000000000ULL;
        data[20490] = 0x1400140000000000ULL;
        data[20609] = 0x1400140000000000ULL;
        data[20610] = 0x1400140000000000ULL;
        data[20617] = 0x1400140000000000ULL;
        data[20618] = 0x1400140000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x2800284482010000ULL;
        data[18] = 0x2800280400000000ULL;
        data[33] = 0x2800280000000000ULL;
        data[60] = 0x2800280402000000ULL;
        data[78] = 0x2800284402010000ULL;
        data[84] = 0x2800284080000000ULL;
        data[110] = 0x2800280000000000ULL;
        data[129] = 0x2800280402010000ULL;
        data[161] = 0x2800284000000000ULL;
        data[180] = 0x2800284480000000ULL;
        data[206] = 0x2800280402010000ULL;
        data[212] = 0x2800280000000000ULL;
        data[229] = 0x2800284080000000ULL;
        data[257] = 0x2800284400000000ULL;
        data[271] = 0x2800284080000000ULL;
        data[289] = 0x2800280000000000ULL;
        data[306] = 0x2800284000000000ULL;
        data[308] = 0x2800280400000000ULL;
        data[325] = 0x2800284480000000ULL;
        data[348] = 0x2800284000000000ULL;
        data[357] = 0x2800280000000000ULL;
        data[367] = 0x2800284482000000ULL;
        data[385] = 0x2800280400000000ULL;
        data[399] = 0x2800280000000000ULL;
        data[402] = 0x2800284400000000ULL;
        data[417] = 0x2800284080000000ULL;
        data[434] = 0x2800280000000000ULL;
        data[444] = 0x2800284402000000ULL;
        data[453] = 0x2800280400000000ULL;
        data[476] = 0x2800280000000000ULL;
        data[494] = 0x2800284000000000ULL;
        data[495] = 0x2800280402000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x5000508804020100ULL;
        data[30] = 0x5000508000000000ULL;
        data[34] = 0x5000500000000000ULL;
        data[65] = 0x5000500000000000ULL;
        data[73] = 0x5000500800000000ULL;
        data[103] = 0x5000500800000000ULL;
        data[108] = 0x5000508800000000ULL;
        data[137] = 0x5000508000000000ULL;
        data[138] = 0x5000508800000000ULL;
        data[167] = 0x5000508000000000ULL;
        data[172] = 0x5000500000000000ULL;
        data[191] = 0x5000508804000000ULL;
        data[202] = 0x5000500000000000ULL;
        data[222] = 0x5000508804000000ULL;
        data[226] = 0x5000500804020000ULL;
        data[255] = 0x5000500000000000ULL;
        data[257] = 0x5000500804020100ULL;
        data[286] = 0x5000500000000000ULL;
        data[290] = 0x5000508000000000ULL;
        data[321] = 0x5000508000000000ULL;
        data[329] = 0x5000508800000000ULL;
        data[359] = 0x5000508800000000ULL;
        data[364] = 0x5000500800000000ULL;
        data[393] = 0x5000500000000000ULL;
        data[394] = 0x5000500800000000ULL;
        data[423] = 0x5000500000000000ULL;
        data[428] = 0x5000508000000000ULL;
        data[447] = 0x5000500804000000ULL;
        data[458] = 0x5000508000000000ULL;
        data[478] = 0x5000500804000000ULL;
        data[482] = 0x5000508804020000ULL;
        data[511] = 0x5000508000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0xa000a01008040201ULL;
        data[38] = 0xa000a00000000000ULL;
        data[55] = 0xa000a01000000000ULL;
        data[59] = 0xa000a00000000000ULL;
        data[67] = 0xa000a00000000000ULL;
        data[116] = 0xa000a01000000000ULL;
        data[124] = 0xa000a01000000000ULL;
        data[129] = 0xa000a00000000000ULL;
        data[145] = 0xa000a01000000000ULL;
        data[183] = 0xa000a00000000000ULL;
        data[186] = 0xa000a01000000000ULL;
        data[206] = 0xa000a01000000000ULL;
        data[215] = 0xa000a01000000000ULL;
        data[244] = 0xa000a00000000000ULL;
        data[252] = 0xa000a00000000000ULL;
        data[273] = 0xa000a00000000000ULL;
        data[276] = 0xa000a01000000000ULL;
        data[292] = 0xa000a01008000000ULL;
        data[314] = 0xa000a00000000000ULL;
        data[334] = 0xa000a00000000000ULL;
        data[343] = 0xa000a00000000000ULL;
        data[353] = 0xa000a01008000000ULL;
        data[361] = 0xa000a01008040000ULL;
        data[382] = 0xa000a01008000000ULL;
        data[404] = 0xa000a00000000000ULL;
        data[420] = 0xa000a00000000000ULL;
        data[422] = 0xa000a01008040200ULL;
        data[443] = 0xa000a01008000000ULL;
        data[451] = 0xa000a01008040000ULL;
        data[481] = 0xa000a00000000000ULL;
        data[489] = 0xa000a00000000000ULL;
        data[510] = 0xa000a00000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_7_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x4000402010080402ULL;
        data[34] = 0x4000400000000000ULL;
        data[39] = 0x4000402000000000ULL;
        data[71] = 0x4000402010000000ULL;
        data[76] = 0x4000400000000000ULL;
        data[110] = 0x4000402000000000ULL;
        data[115] = 0x4000400000000000ULL;
        data[118] = 0x4000400000000000ULL;
        data[134] = 0x4000400000000000ULL;
        data[156] = 0x4000400000000000ULL;
        data[173] = 0x4000400000000000ULL;
        data[193] = 0x4000402010000000ULL;
        data[210] = 0x4000402010080000ULL;
        data[232] = 0x4000402000000000ULL;
        data[248] = 0x4000402000000000ULL;
        data[251] = 0x4000402010000000ULL;
        data[257] = 0x4000400000000000ULL;
        data[290] = 0x4000402000000000ULL;
        data[295] = 0x4000400000000000ULL;
        data[327] = 0x4000400000000000ULL;
        data[332] = 0x4000402010080400ULL;
        data[366] = 0x4000400000000000ULL;
        data[371] = 0x4000402000000000ULL;
        data[374] = 0x4000402010000000ULL;
        data[390] = 0x4000402010080000ULL;
        data[412] = 0x4000402000000000ULL;
        data[429] = 0x4000402000000000ULL;
        data[449] = 0x4000400000000000ULL;
        data[466] = 0x4000400000000000ULL;
        data[488] = 0x4000400000000000ULL;
        data[504] = 0x4000400000000000ULL;
        data[507] = 0x4000400000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [508]();
        data[1] = 0x0002040810204080ULL;
        data[4] = 0x0002040810000000ULL;
        data[11] = 0x0002000000000000ULL;
        data[14] = 0x0002000000000000ULL;
        data[25] = 0x0002000000000000ULL;
        data[41] = 0x0002000000000000ULL;
        data[44] = 0x0002000000000000ULL;
        data[47] = 0x0002040000000000ULL;
        data[50] = 0x0002040000000000ULL;
        data[66] = 0x0002040800000000ULL;
        data[78] = 0x0002040000000000ULL;
        data[81] = 0x0002040000000000ULL;
        data[88] = 0x0002000000000000ULL;
        data[91] = 0x0002000000000000ULL;
        data[96] = 0x0002040800000000ULL;
        data[98] = 0x0002000000000000ULL;
        data[101] = 0x0002000000000000ULL;
        data[118] = 0x0002000000000000ULL;
        data[121] = 0x0002000000000000ULL;
        data[129] = 0x0002000000000000ULL;
        data[132] = 0x0002000000000000ULL;
        data[143] = 0x0002040000000000ULL;
        data[153] = 0x0002040810000000ULL;
        data[173] = 0x0002040000000000ULL;
        data[175] = 0x0002000000000000ULL;
        data[178] = 0x0002000000000000ULL;
        data[184] = 0x0002040810000000ULL;
        data[194] = 0x0002000000000000ULL;
        data[206] = 0x0002000000000000ULL;
        data[209] = 0x0002000000000000ULL;
        data[214] = 0x0002040800000000ULL;
        data[224] = 0x0002000000000000ULL;
        data[230] = 0x0002040000000000ULL;
        data[245] = 0x0002040800000000ULL;
        data[261] = 0x0002040000000000ULL;
        data[271] = 0x0002000000000000ULL;
        data[281] = 0x0002000000000000ULL;
        data[291] = 0x0002040000000000ULL;
        data[301] = 0x0002000000000000ULL;
        data[302] = 0x0002040810200000ULL;
        data[312] = 0x0002000000000000ULL;
        data[322] = 0x0002040000000000ULL;
        data[332] = 0x0002040810204000ULL;
        data[342] = 0x0002000000000000ULL;
        data[358] = 0x0002000000000000ULL;
        data[373] = 0x0002000000000000ULL;
        data[379] = 0x0002040000000000ULL;
        data[389] = 0x0002000000000000ULL;
        data[395] = 0x0002040800000000ULL;
        data[398] = 0x0002040800000000ULL;
        data[409] = 0x0002040000000000ULL;
        data[419] = 0x0002000000000000ULL;
        data[425] = 0x0002040800000000ULL;
        data[428] = 0x0002040800000000ULL;
        data[430] = 0x0002000000000000ULL;
        data[450] = 0x0002000000000000ULL;
        data[460] = 0x0002000000000000ULL;
        data[472] = 0x0002040000000000ULL;
        data[475] = 0x0002040000000000ULL;
        data[482] = 0x0002040810200000ULL;
        data[485] = 0x0002040810000000ULL;
        data[502] = 0x0002040000000000ULL;
        data[505] = 0x0002040000000000ULL;
        data[507] = 0x0002000000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_11_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [493]();
        data[1] = 0x0005081020408000ULL;
        data[9] = 0x0005080000000000ULL;
        data[21] = 0x0005000000000000ULL;
        data[29] = 0x0005000000000000ULL;
        data[50] = 0x0005000000000000ULL;
        data[82] = 0x0005000000000000ULL;
        data[90] = 0x0005000000000000ULL;
        data[93] = 0x0005080000000000ULL;
        data[111] = 0x0005000000000000ULL;
        data[131] = 0x0005081000000000ULL;
        data[155] = 0x0005080000000000ULL;
        data[175] = 0x0005000000000000ULL;
        data[192] = 0x0005081000000000ULL;
        data[195] = 0x0005000000000000ULL;
        data[204] = 0x0005000000000000ULL;
        data[236] = 0x0005000000000000ULL;
        data[257] = 0x0005000000000000ULL;
        data[265] = 0x0005000000000000ULL;
        data[277] = 0x0005081000000000ULL;
        data[285] = 0x0005080000000000ULL;
        data[306] = 0x0005081020000000ULL;
        data[338] = 0x0005081000000000ULL;
        data[346] = 0x0005080000000000ULL;
        data[349] = 0x0005000000000000ULL;
        data[367] = 0x0005081020000000ULL;
        data[387] = 0x0005000000000000ULL;
        data[411] = 0x0005000000000000ULL;
        data[431] = 0x0005080000000000ULL;
        data[448] = 0x0005000000000000ULL;
        data[451] = 0x0005081020400000ULL;
        data[460] = 0x0005080000000000ULL;
        data[492] = 0x0005080000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x000a112040800000ULL;
        data[6] = 0x000a000000000000ULL;
        data[9] = 0x000a000000000000ULL;
        data[44] = 0x000a110000000000ULL;
        data[46] = 0x000a112040000000ULL;
        data[52] = 0x000a000000000000ULL;
        data[54] = 0x000a000000000000ULL;
        data[102] = 0x000a100000000000ULL;
        data[105] = 0x000a102040800000ULL;
        data[139] = 0x000a010000000000ULL;
        data[148] = 0x000a100000000000ULL;
        data[150] = 0x000a102040000000ULL;
        data[180] = 0x000a010000000000ULL;
        data[184] = 0x000a010000000000ULL;
        data[226] = 0x000a010000000000ULL;
        data[235] = 0x000a112000000000ULL;
        data[243] = 0x000a000000000000ULL;
        data[276] = 0x000a110000000000ULL;
        data[280] = 0x000a112000000000ULL;
        data[284] = 0x000a000000000000ULL;
        data[288] = 0x000a000000000000ULL;
        data[322] = 0x000a110000000000ULL;
        data[330] = 0x000a000000000000ULL;
        data[339] = 0x000a102000000000ULL;
        data[380] = 0x000a100000000000ULL;
        data[384] = 0x000a102000000000ULL;
        data[414] = 0x000a010000000000ULL;
        data[417] = 0x000a010000000000ULL;
        data[426] = 0x000a100000000000ULL;
        data[460] = 0x000a010000000000ULL;
        data[462] = 0x000a010000000000ULL;
        data[510] = 0x000a110000000000ULL;
    }),
    ::chess::AttackTable(RightShift<38>::hash, [](uint64_t *& data) {
        data = new uint64_t [20619]();
        data[1] = 0x0014224180000000ULL;
        data[2] = 0x0014224100000000ULL;
        data[9] = 0x0014224080000000ULL;
        data[10] = 0x0014224000000000ULL;
        data[129] = 0x0014220100000000ULL;
        data[130] = 0x0014220100000000ULL;
        data[137] = 0x0014220000000000ULL;
        data[138] = 0x0014220000000000ULL;
        data[4097] = 0x0014204080000000ULL;
        data[4098] = 0x0014204000000000ULL;
        data[4105] = 0x0014204080000000ULL;
        data[4106] = 0x0014204000000000ULL;
        data[4225] = 0x0014200000000000ULL;
        data[4226] = 0x0014200000000000ULL;
        data[4233] = 0x0014200000000000ULL;
        data[4234] = 0x0014200000000000ULL;
        data[16385] = 0x0014020100000000ULL;
        data[16386] = 0x0014020100000000ULL;
        data[16393] = 0x0014020000000000ULL;
        data[16394] = 0x0014020000000000ULL;
        data[16513] = 0x0014020100000000ULL;
        data[16514] = 0x0014020100000000ULL;
        data[16521] = 0x0014020000000000ULL;
        data[16522] = 0x0014020000000000ULL;
        data[20481] = 0x0014000000000000ULL;
        data[20482] = 0x0014000000000000ULL;
        data[20489] = 0x0014000000000000ULL;
        data[20490] = 0x0014000000000000ULL;
        data[20609] = 0x0014000000000000ULL;
        data[20610] = 0x0014000000000000ULL;
        data[20617] = 0x0014000000000000ULL;
        data[20618] = 0x0014000000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [496]();
        data[1] = 0x0028448201000000ULL;
        data[18] = 0x0028040000000000ULL;
        data[33] = 0x0028000000000000ULL;
        data[60] = 0x0028040200000000ULL;
        data[78] = 0x0028440201000000ULL;
        data[84] = 0x0028408000000000ULL;
        data[110] = 0x0028000000000000ULL;
        data[129] = 0x0028040201000000ULL;
        data[161] = 0x0028400000000000ULL;
        data[180] = 0x0028448000000000ULL;
        data[206] = 0x0028040201000000ULL;
        data[212] = 0x0028000000000000ULL;
        data[229] = 0x0028408000000000ULL;
        data[257] = 0x0028440000000000ULL;
        data[271] = 0x0028408000000000ULL;
        data[289] = 0x0028000000000000ULL;
        data[306] = 0x0028400000000000ULL;
        data[308] = 0x0028040000000000ULL;
        data[325] = 0x0028448000000000ULL;
        data[348] = 0x0028400000000000ULL;
        data[357] = 0x0028000000000000ULL;
        data[367] = 0x0028448200000000ULL;
        data[385] = 0x0028040000000000ULL;
        data[399] = 0x0028000000000000ULL;
        data[402] = 0x0028440000000000ULL;
        data[417] = 0x0028408000000000ULL;
        data[434] = 0x0028000000000000ULL;
        data[444] = 0x0028440200000000ULL;
        data[453] = 0x0028040000000000ULL;
        data[476] = 0x0028000000000000ULL;
        data[494] = 0x0028400000000000ULL;
        data[495] = 0x0028040200000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0050880402010000ULL;
        data[30] = 0x0050800000000000ULL;
        data[34] = 0x0050000000000000ULL;
        data[65] = 0x0050000000000000ULL;
        data[73] = 0x0050080000000000ULL;
        data[103] = 0x0050080000000000ULL;
        data[108] = 0x0050880000000000ULL;
        data[137] = 0x0050800000000000ULL;
        data[138] = 0x0050880000000000ULL;
        data[167] = 0x0050800000000000ULL;
        data[172] = 0x0050000000000000ULL;
        data[191] = 0x0050880400000000ULL;
        data[202] = 0x0050000000000000ULL;
        data[222] = 0x0050880400000000ULL;
        data[226] = 0x0050080402000000ULL;
        data[255] = 0x0050000000000000ULL;
        data[257] = 0x0050080402010000ULL;
        data[286] = 0x0050000000000000ULL;
        data[290] = 0x0050800000000000ULL;
        data[321] = 0x0050800000000000ULL;
        data[329] = 0x0050880000000000ULL;
        data[359] = 0x0050880000000000ULL;
        data[364] = 0x0050080000000000ULL;
        data[393] = 0x0050000000000000ULL;
        data[394] = 0x0050080000000000ULL;
        data[423] = 0x0050000000000000ULL;
        data[428] = 0x0050800000000000ULL;
        data[447] = 0x0050080400000000ULL;
        data[458] = 0x0050800000000000ULL;
        data[478] = 0x0050080400000000ULL;
        data[482] = 0x0050880402000000ULL;
        data[511] = 0x0050800000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_15_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [511]();
        data[1] = 0x00a0100804020100ULL;
        data[38] = 0x00a0000000000000ULL;
        data[55] = 0x00a0100000000000ULL;
        data[59] = 0x00a0000000000000ULL;
        data[67] = 0x00a0000000000000ULL;
        data[116] = 0x00a0100000000000ULL;
        data[124] = 0x00a0100000000000ULL;
        data[129] = 0x00a0000000000000ULL;
        data[145] = 0x00a0100000000000ULL;
        data[183] = 0x00a0000000000000ULL;
        data[186] = 0x00a0100000000000ULL;
        data[206] = 0x00a0100000000000ULL;
        data[215] = 0x00a0100000000000ULL;
        data[244] = 0x00a0000000000000ULL;
        data[252] = 0x00a0000000000000ULL;
        data[273] = 0x00a0000000000000ULL;
        data[276] = 0x00a0100000000000ULL;
        data[292] = 0x00a0100800000000ULL;
        data[314] = 0x00a0000000000000ULL;
        data[334] = 0x00a0000000000000ULL;
        data[343] = 0x00a0000000000000ULL;
        data[353] = 0x00a0100800000000ULL;
        data[361] = 0x00a0100804000000ULL;
        data[382] = 0x00a0100800000000ULL;
        data[404] = 0x00a0000000000000ULL;
        data[420] = 0x00a0000000000000ULL;
        data[422] = 0x00a0100804020000ULL;
        data[443] = 0x00a0100800000000ULL;
        data[451] = 0x00a0100804000000ULL;
        data[481] = 0x00a0000000000000ULL;
        data[489] = 0x00a0000000000000ULL;
        data[510] = 0x00a0000000000000ULL;
    }),
    ::chess::AttackTable(mul_shift_31_81dadef4bc2dd44d_rshift_17_mixin<0x1ff>, [](uint64_t *& data) {
        data = new uint64_t [512]();
        data[1] = 0x0040201008040201ULL;
        data[26] = 0x0040000000000000ULL;
        data[27] = 0x0040200000000000ULL;
        data[30] = 0x0040000000000000ULL;
        data[41] = 0x0040200000000000ULL;
        data[56] = 0x0040000000000000ULL;
        data[62] = 0x0040200000000000ULL;
        data[71] = 0x0040000000000000ULL;
        data[72] = 0x0040200000000000ULL;
        data[80] = 0x0040201000000000ULL;
        data[92] = 0x0040000000000000ULL;
        data[93] = 0x0040200000000000ULL;
        data[101] = 0x0040000000000000ULL;
        data[108] = 0x0040200000000000ULL;
        data[111] = 0x0040201000000000ULL;
        data[122] = 0x0040000000000000ULL;
        data[125] = 0x0040201000000000ULL;
        data[137] = 0x0040000000000000ULL;
        data[138] = 0x0040200000000000ULL;
        data[146] = 0x0040201000000000ULL;
        data[156] = 0x0040201000000000ULL;
        data[167] = 0x0040000000000000ULL;
        data[177] = 0x0040201000000000ULL;
        data[179] = 0x0040000000000000ULL;
        data[191] = 0x0040201000000000ULL;
        data[209] = 0x0040000000000000ULL;
        data[218] = 0x0040200000000000ULL;
        data[222] = 0x0040201000000000ULL;
        data[224] = 0x0040000000000000ULL;
        data[245] = 0x0040000000000000ULL;
        data[248] = 0x0040200000000000ULL;
        data[254] = 0x0040000000000000ULL;
        data[263] = 0x0040200000000000ULL;
        data[275] = 0x0040000000000000ULL;
        data[284] = 0x0040200000000000ULL;
        data[290] = 0x0040000000000000ULL;
        data[293] = 0x0040200000000000ULL;
        data[314] = 0x0040200000000000ULL;
        data[316] = 0x0040000000000000ULL;
        data[321] = 0x0040000000000000ULL;
        data[329] = 0x0040200000000000ULL;
        data[347] = 0x0040000000000000ULL;
        data[359] = 0x0040200000000000ULL;
        data[361] = 0x0040000000000000ULL;
        data[371] = 0x0040201008000000ULL;
        data[382] = 0x0040000000000000ULL;
        data[392] = 0x0040000000000000ULL;
        data[400] = 0x0040000000000000ULL;
        data[401] = 0x0040201008040000ULL;
        data[413] = 0x0040000000000000ULL;
        data[416] = 0x0040201008000000ULL;
        data[428] = 0x0040000000000000ULL;
        data[431] = 0x0040000000000000ULL;
        data[437] = 0x0040201008000000ULL;
        data[445] = 0x0040000000000000ULL;
        data[446] = 0x0040201008040200ULL;
        data[458] = 0x0040000000000000ULL;
        data[466] = 0x0040000000000000ULL;
        data[467] = 0x0040201008040000ULL;
        data[476] = 0x0040000000000000ULL;
        data[482] = 0x0040201008000000ULL;
        data[497] = 0x0040000000000000ULL;
        data[508] = 0x0040200000000000ULL;
        data[511] = 0x0040000000000000ULL;
    }),
};

} /* namespace chess */
